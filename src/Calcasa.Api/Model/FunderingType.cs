// <auto-generated>
/*
 * Copyright 2025 Calcasa B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Calcasa Public API
 *
 * The Calcasa API is used to connect to Calcasa provided services. For more information, please visit [Documentation](https://docs.calcasa.nl) or [GitHub](https://github.com/calcasa/api).
 *
 * The version of the OpenAPI document: 1.4.0-rc3
 * Contact: info@calcasa.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using System.Text.RegularExpressions;
using Calcasa.Api.Client;

namespace Calcasa.Api.Model
{
    /// <summary>
    /// Funderingstypes. | Waarde | Omschrijving | | - -- | - -- | | &#x60;onbekendFunderingType&#x60; | Onbekend fundering-type. | | &#x60;hout&#x60; | Hout. | | &#x60;houtAmsterdam&#x60; | Hout, Amsterdamse variant. | | &#x60;houtRotterdam&#x60; | Hout, Rotterdamse variant. | | &#x60;beton&#x60; | Beton. | | &#x60;nietOnderheid&#x60; | Niet onderheid. | | &#x60;nietOnderheidGemetseld&#x60; | Niet onderheid, gemetseld. | | &#x60;nietOnderheidStroken&#x60; | Niet onderheid, stroken. | | &#x60;nietOnderheidPlaat&#x60; | Niet onderheid, plaat. | | &#x60;nietOnderheidBetonplaat&#x60; | Niet onderheid, betonplaat. | | &#x60;nietOnderheidSlieten&#x60; | Niet onderheid, slieten. | | &#x60;houtOplanger&#x60; | Hout met oplanger. | | &#x60;betonVerzwaard&#x60; | Beton verzwaard. | | &#x60;gecombineerd&#x60; | Gecombineerd. | | &#x60;staal&#x60; | Stalen buispaal. | | &#x60;houtAmsterdamRotterdam&#x60; | Houten paal, Rotterdam/Amsterdam methode. | | &#x60;houtRotterdamSpaarboog&#x60; | Houten paal, Rotterdam methode met spaarboog. | | &#x60;houtAmsterdamSpaarboog&#x60; | Houten paal, Amsterdam methode met spaarboog. |
    /// </summary>
    /// <value>Funderingstypes. | Waarde | Omschrijving | | - -- | - -- | | &#x60;onbekendFunderingType&#x60; | Onbekend fundering-type. | | &#x60;hout&#x60; | Hout. | | &#x60;houtAmsterdam&#x60; | Hout, Amsterdamse variant. | | &#x60;houtRotterdam&#x60; | Hout, Rotterdamse variant. | | &#x60;beton&#x60; | Beton. | | &#x60;nietOnderheid&#x60; | Niet onderheid. | | &#x60;nietOnderheidGemetseld&#x60; | Niet onderheid, gemetseld. | | &#x60;nietOnderheidStroken&#x60; | Niet onderheid, stroken. | | &#x60;nietOnderheidPlaat&#x60; | Niet onderheid, plaat. | | &#x60;nietOnderheidBetonplaat&#x60; | Niet onderheid, betonplaat. | | &#x60;nietOnderheidSlieten&#x60; | Niet onderheid, slieten. | | &#x60;houtOplanger&#x60; | Hout met oplanger. | | &#x60;betonVerzwaard&#x60; | Beton verzwaard. | | &#x60;gecombineerd&#x60; | Gecombineerd. | | &#x60;staal&#x60; | Stalen buispaal. | | &#x60;houtAmsterdamRotterdam&#x60; | Houten paal, Rotterdam/Amsterdam methode. | | &#x60;houtRotterdamSpaarboog&#x60; | Houten paal, Rotterdam methode met spaarboog. | | &#x60;houtAmsterdamSpaarboog&#x60; | Houten paal, Amsterdam methode met spaarboog. |</value>
    public enum FunderingType
    {
        /// <summary>
        /// Enum OnbekendFunderingType for value: onbekendFunderingType
        /// </summary>
        OnbekendFunderingType,

        /// <summary>
        /// Enum Hout for value: hout
        /// </summary>
        Hout,

        /// <summary>
        /// Enum HoutAmsterdam for value: houtAmsterdam
        /// </summary>
        HoutAmsterdam,

        /// <summary>
        /// Enum HoutRotterdam for value: houtRotterdam
        /// </summary>
        HoutRotterdam,

        /// <summary>
        /// Enum Beton for value: beton
        /// </summary>
        Beton,

        /// <summary>
        /// Enum NietOnderheid for value: nietOnderheid
        /// </summary>
        NietOnderheid,

        /// <summary>
        /// Enum NietOnderheidGemetseld for value: nietOnderheidGemetseld
        /// </summary>
        NietOnderheidGemetseld,

        /// <summary>
        /// Enum NietOnderheidStroken for value: nietOnderheidStroken
        /// </summary>
        NietOnderheidStroken,

        /// <summary>
        /// Enum NietOnderheidPlaat for value: nietOnderheidPlaat
        /// </summary>
        NietOnderheidPlaat,

        /// <summary>
        /// Enum NietOnderheidBetonplaat for value: nietOnderheidBetonplaat
        /// </summary>
        NietOnderheidBetonplaat,

        /// <summary>
        /// Enum NietOnderheidSlieten for value: nietOnderheidSlieten
        /// </summary>
        NietOnderheidSlieten,

        /// <summary>
        /// Enum HoutOplanger for value: houtOplanger
        /// </summary>
        HoutOplanger,

        /// <summary>
        /// Enum BetonVerzwaard for value: betonVerzwaard
        /// </summary>
        BetonVerzwaard,

        /// <summary>
        /// Enum Gecombineerd for value: gecombineerd
        /// </summary>
        Gecombineerd,

        /// <summary>
        /// Enum Staal for value: staal
        /// </summary>
        Staal,

        /// <summary>
        /// Enum HoutAmsterdamRotterdam for value: houtAmsterdamRotterdam
        /// </summary>
        HoutAmsterdamRotterdam,

        /// <summary>
        /// Enum HoutRotterdamSpaarboog for value: houtRotterdamSpaarboog
        /// </summary>
        HoutRotterdamSpaarboog,

        /// <summary>
        /// Enum HoutAmsterdamSpaarboog for value: houtAmsterdamSpaarboog
        /// </summary>
        HoutAmsterdamSpaarboog
    }

    /// <summary>
    /// Converts <see cref="FunderingType"/> to and from the JSON value
    /// </summary>
    public static class FunderingTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="FunderingType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static FunderingType FromString(string value)
        {
            if (value.Equals("onbekendFunderingType"))
                return FunderingType.OnbekendFunderingType;

            if (value.Equals("hout"))
                return FunderingType.Hout;

            if (value.Equals("houtAmsterdam"))
                return FunderingType.HoutAmsterdam;

            if (value.Equals("houtRotterdam"))
                return FunderingType.HoutRotterdam;

            if (value.Equals("beton"))
                return FunderingType.Beton;

            if (value.Equals("nietOnderheid"))
                return FunderingType.NietOnderheid;

            if (value.Equals("nietOnderheidGemetseld"))
                return FunderingType.NietOnderheidGemetseld;

            if (value.Equals("nietOnderheidStroken"))
                return FunderingType.NietOnderheidStroken;

            if (value.Equals("nietOnderheidPlaat"))
                return FunderingType.NietOnderheidPlaat;

            if (value.Equals("nietOnderheidBetonplaat"))
                return FunderingType.NietOnderheidBetonplaat;

            if (value.Equals("nietOnderheidSlieten"))
                return FunderingType.NietOnderheidSlieten;

            if (value.Equals("houtOplanger"))
                return FunderingType.HoutOplanger;

            if (value.Equals("betonVerzwaard"))
                return FunderingType.BetonVerzwaard;

            if (value.Equals("gecombineerd"))
                return FunderingType.Gecombineerd;

            if (value.Equals("staal"))
                return FunderingType.Staal;

            if (value.Equals("houtAmsterdamRotterdam"))
                return FunderingType.HoutAmsterdamRotterdam;

            if (value.Equals("houtRotterdamSpaarboog"))
                return FunderingType.HoutRotterdamSpaarboog;

            if (value.Equals("houtAmsterdamSpaarboog"))
                return FunderingType.HoutAmsterdamSpaarboog;

            throw new NotImplementedException($"Could not convert value to type FunderingType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="FunderingType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static FunderingType? FromStringOrDefault(string value)
        {
            if (value.Equals("onbekendFunderingType"))
                return FunderingType.OnbekendFunderingType;

            if (value.Equals("hout"))
                return FunderingType.Hout;

            if (value.Equals("houtAmsterdam"))
                return FunderingType.HoutAmsterdam;

            if (value.Equals("houtRotterdam"))
                return FunderingType.HoutRotterdam;

            if (value.Equals("beton"))
                return FunderingType.Beton;

            if (value.Equals("nietOnderheid"))
                return FunderingType.NietOnderheid;

            if (value.Equals("nietOnderheidGemetseld"))
                return FunderingType.NietOnderheidGemetseld;

            if (value.Equals("nietOnderheidStroken"))
                return FunderingType.NietOnderheidStroken;

            if (value.Equals("nietOnderheidPlaat"))
                return FunderingType.NietOnderheidPlaat;

            if (value.Equals("nietOnderheidBetonplaat"))
                return FunderingType.NietOnderheidBetonplaat;

            if (value.Equals("nietOnderheidSlieten"))
                return FunderingType.NietOnderheidSlieten;

            if (value.Equals("houtOplanger"))
                return FunderingType.HoutOplanger;

            if (value.Equals("betonVerzwaard"))
                return FunderingType.BetonVerzwaard;

            if (value.Equals("gecombineerd"))
                return FunderingType.Gecombineerd;

            if (value.Equals("staal"))
                return FunderingType.Staal;

            if (value.Equals("houtAmsterdamRotterdam"))
                return FunderingType.HoutAmsterdamRotterdam;

            if (value.Equals("houtRotterdamSpaarboog"))
                return FunderingType.HoutRotterdamSpaarboog;

            if (value.Equals("houtAmsterdamSpaarboog"))
                return FunderingType.HoutAmsterdamSpaarboog;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="FunderingType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(FunderingType value)
        {
            if (value == FunderingType.OnbekendFunderingType)
                return "onbekendFunderingType";

            if (value == FunderingType.Hout)
                return "hout";

            if (value == FunderingType.HoutAmsterdam)
                return "houtAmsterdam";

            if (value == FunderingType.HoutRotterdam)
                return "houtRotterdam";

            if (value == FunderingType.Beton)
                return "beton";

            if (value == FunderingType.NietOnderheid)
                return "nietOnderheid";

            if (value == FunderingType.NietOnderheidGemetseld)
                return "nietOnderheidGemetseld";

            if (value == FunderingType.NietOnderheidStroken)
                return "nietOnderheidStroken";

            if (value == FunderingType.NietOnderheidPlaat)
                return "nietOnderheidPlaat";

            if (value == FunderingType.NietOnderheidBetonplaat)
                return "nietOnderheidBetonplaat";

            if (value == FunderingType.NietOnderheidSlieten)
                return "nietOnderheidSlieten";

            if (value == FunderingType.HoutOplanger)
                return "houtOplanger";

            if (value == FunderingType.BetonVerzwaard)
                return "betonVerzwaard";

            if (value == FunderingType.Gecombineerd)
                return "gecombineerd";

            if (value == FunderingType.Staal)
                return "staal";

            if (value == FunderingType.HoutAmsterdamRotterdam)
                return "houtAmsterdamRotterdam";

            if (value == FunderingType.HoutRotterdamSpaarboog)
                return "houtRotterdamSpaarboog";

            if (value == FunderingType.HoutAmsterdamSpaarboog)
                return "houtAmsterdamSpaarboog";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FunderingType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class FunderingTypeJsonConverter : JsonConverter<FunderingType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override FunderingType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            FunderingType? result = rawValue == null
                ? null
                : FunderingTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the FunderingType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="funderingType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, FunderingType funderingType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(FunderingTypeValueConverter.ToJsonValue(funderingType).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FunderingType"/>
    /// </summary>
    public class FunderingTypeNullableJsonConverter : JsonConverter<FunderingType?>
    {
        /// <summary>
        /// Returns a FunderingType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override FunderingType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            FunderingType? result = rawValue == null
                ? null
                : FunderingTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the FunderingType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="funderingType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, FunderingType? funderingType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(funderingType.HasValue ? FunderingTypeValueConverter.ToJsonValue(funderingType.Value).ToString() : "null");
        }
    }


    /// <summary>
    /// The FunderingTypeSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(FunderingType))]
    public partial class FunderingTypeSerializationContext : JsonSerializerContext { }
}
