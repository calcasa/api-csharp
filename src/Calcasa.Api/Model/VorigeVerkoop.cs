// <auto-generated>
/*
 * Copyright 2025 Calcasa B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Calcasa Public API
 *
 * The Calcasa API is used to connect to Calcasa provided services. For more information, please visit [Documentation](https://docs.calcasa.nl) or [GitHub](https://github.com/calcasa/api).
 *
 * The version of the OpenAPI document: 1.4.0-rc1
 * Contact: info@calcasa.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using Calcasa.Api.Client;

namespace Calcasa.Api.Model
{
    /// <summary>
    /// VorigeVerkoop
    /// </summary>
    public partial class VorigeVerkoop
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VorigeVerkoop" /> class.
        /// </summary>
        /// <param name="verkoopprijs">In hele euros.</param>
        /// <param name="geindexeerdeVerkoopprijs">In hele euros.</param>
        /// <param name="vierkantemeterprijs">In hele euros per vierkante meter.</param>
        /// <param name="geindexeerdeVierkantemeterprijs">In hele euros per vierkante meter.</param>
        /// <param name="verkoopdatum">In UTC.</param>
        /// <param name="perceeloppervlak">Het perceeloppervlak in hele vierkante meters.</param>
        /// <param name="bijzonderheden">Eventuele bijzonderheden van de transactie.</param>
        [JsonConstructor]
        public VorigeVerkoop(Option<int?> verkoopprijs = default, Option<int?> geindexeerdeVerkoopprijs = default, Option<int?> vierkantemeterprijs = default, Option<int?> geindexeerdeVierkantemeterprijs = default, Option<DateOnly?> verkoopdatum = default, Option<int?> perceeloppervlak = default, Option<Collection<VerkoopBijzonderheden>?> bijzonderheden = default)
        {
            VerkoopprijsOption = verkoopprijs;
            GeindexeerdeVerkoopprijsOption = geindexeerdeVerkoopprijs;
            VierkantemeterprijsOption = vierkantemeterprijs;
            GeindexeerdeVierkantemeterprijsOption = geindexeerdeVierkantemeterprijs;
            VerkoopdatumOption = verkoopdatum;
            PerceeloppervlakOption = perceeloppervlak;
            BijzonderhedenOption = bijzonderheden;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Verkoopprijs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> VerkoopprijsOption { get; private set; }

        /// <summary>
        /// In hele euros.
        /// </summary>
        /// <value>In hele euros.</value>
        [JsonPropertyName("verkoopprijs")]
        public int? Verkoopprijs { get { return this.VerkoopprijsOption; } set { this.VerkoopprijsOption = new(value); } }

        /// <summary>
        /// Used to track the state of GeindexeerdeVerkoopprijs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> GeindexeerdeVerkoopprijsOption { get; private set; }

        /// <summary>
        /// In hele euros.
        /// </summary>
        /// <value>In hele euros.</value>
        [JsonPropertyName("geindexeerdeVerkoopprijs")]
        public int? GeindexeerdeVerkoopprijs { get { return this.GeindexeerdeVerkoopprijsOption; } set { this.GeindexeerdeVerkoopprijsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Vierkantemeterprijs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> VierkantemeterprijsOption { get; private set; }

        /// <summary>
        /// In hele euros per vierkante meter.
        /// </summary>
        /// <value>In hele euros per vierkante meter.</value>
        [JsonPropertyName("vierkantemeterprijs")]
        public int? Vierkantemeterprijs { get { return this.VierkantemeterprijsOption; } set { this.VierkantemeterprijsOption = new(value); } }

        /// <summary>
        /// Used to track the state of GeindexeerdeVierkantemeterprijs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> GeindexeerdeVierkantemeterprijsOption { get; private set; }

        /// <summary>
        /// In hele euros per vierkante meter.
        /// </summary>
        /// <value>In hele euros per vierkante meter.</value>
        [JsonPropertyName("geindexeerdeVierkantemeterprijs")]
        public int? GeindexeerdeVierkantemeterprijs { get { return this.GeindexeerdeVierkantemeterprijsOption; } set { this.GeindexeerdeVierkantemeterprijsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Verkoopdatum
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> VerkoopdatumOption { get; private set; }

        /// <summary>
        /// In UTC.
        /// </summary>
        /// <value>In UTC.</value>
        /* <example>Wed Apr 28 00:00:00 UTC 2021</example> */
        [JsonPropertyName("verkoopdatum")]
        public DateOnly? Verkoopdatum { get { return this.VerkoopdatumOption; } set { this.VerkoopdatumOption = new(value); } }

        /// <summary>
        /// Used to track the state of Perceeloppervlak
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PerceeloppervlakOption { get; private set; }

        /// <summary>
        /// Het perceeloppervlak in hele vierkante meters.
        /// </summary>
        /// <value>Het perceeloppervlak in hele vierkante meters.</value>
        [JsonPropertyName("perceeloppervlak")]
        public int? Perceeloppervlak { get { return this.PerceeloppervlakOption; } set { this.PerceeloppervlakOption = new(value); } }

        /// <summary>
        /// Used to track the state of Bijzonderheden
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Collection<VerkoopBijzonderheden>?> BijzonderhedenOption { get; private set; }

        /// <summary>
        /// Eventuele bijzonderheden van de transactie.
        /// </summary>
        /// <value>Eventuele bijzonderheden van de transactie.</value>
        [JsonPropertyName("bijzonderheden")]
        public Collection<VerkoopBijzonderheden>? Bijzonderheden { get { return this.BijzonderhedenOption; } set { this.BijzonderhedenOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VorigeVerkoop {\n");
            sb.Append("  Verkoopprijs: ").Append(Verkoopprijs).Append("\n");
            sb.Append("  GeindexeerdeVerkoopprijs: ").Append(GeindexeerdeVerkoopprijs).Append("\n");
            sb.Append("  Vierkantemeterprijs: ").Append(Vierkantemeterprijs).Append("\n");
            sb.Append("  GeindexeerdeVierkantemeterprijs: ").Append(GeindexeerdeVierkantemeterprijs).Append("\n");
            sb.Append("  Verkoopdatum: ").Append(Verkoopdatum).Append("\n");
            sb.Append("  Perceeloppervlak: ").Append(Perceeloppervlak).Append("\n");
            sb.Append("  Bijzonderheden: ").Append(Bijzonderheden).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VorigeVerkoop" />
    /// </summary>
    public class VorigeVerkoopJsonConverter : JsonConverter<VorigeVerkoop>
    {
        /// <summary>
        /// The format to use to serialize Verkoopdatum
        /// </summary>
        public static string VerkoopdatumFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="VorigeVerkoop" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override VorigeVerkoop Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> verkoopprijs = default;
            Option<int?> geindexeerdeVerkoopprijs = default;
            Option<int?> vierkantemeterprijs = default;
            Option<int?> geindexeerdeVierkantemeterprijs = default;
            Option<DateOnly?> verkoopdatum = default;
            Option<int?> perceeloppervlak = default;
            Option<Collection<VerkoopBijzonderheden>?> bijzonderheden = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "verkoopprijs":
                            verkoopprijs = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "geindexeerdeVerkoopprijs":
                            geindexeerdeVerkoopprijs = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "vierkantemeterprijs":
                            vierkantemeterprijs = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "geindexeerdeVierkantemeterprijs":
                            geindexeerdeVierkantemeterprijs = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "verkoopdatum":
                            verkoopdatum = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "perceeloppervlak":
                            perceeloppervlak = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "bijzonderheden":
                            bijzonderheden = new Option<Collection<VerkoopBijzonderheden>?>(JsonSerializer.Deserialize<Collection<VerkoopBijzonderheden>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (verkoopprijs.IsSet && verkoopprijs.Value == null)
                throw new ArgumentNullException(nameof(verkoopprijs), "Property is not nullable for class VorigeVerkoop.");

            if (geindexeerdeVerkoopprijs.IsSet && geindexeerdeVerkoopprijs.Value == null)
                throw new ArgumentNullException(nameof(geindexeerdeVerkoopprijs), "Property is not nullable for class VorigeVerkoop.");

            if (vierkantemeterprijs.IsSet && vierkantemeterprijs.Value == null)
                throw new ArgumentNullException(nameof(vierkantemeterprijs), "Property is not nullable for class VorigeVerkoop.");

            if (geindexeerdeVierkantemeterprijs.IsSet && geindexeerdeVierkantemeterprijs.Value == null)
                throw new ArgumentNullException(nameof(geindexeerdeVierkantemeterprijs), "Property is not nullable for class VorigeVerkoop.");

            if (verkoopdatum.IsSet && verkoopdatum.Value == null)
                throw new ArgumentNullException(nameof(verkoopdatum), "Property is not nullable for class VorigeVerkoop.");

            if (perceeloppervlak.IsSet && perceeloppervlak.Value == null)
                throw new ArgumentNullException(nameof(perceeloppervlak), "Property is not nullable for class VorigeVerkoop.");

            if (bijzonderheden.IsSet && bijzonderheden.Value == null)
                throw new ArgumentNullException(nameof(bijzonderheden), "Property is not nullable for class VorigeVerkoop.");

            return new VorigeVerkoop(verkoopprijs, geindexeerdeVerkoopprijs, vierkantemeterprijs, geindexeerdeVierkantemeterprijs, verkoopdatum, perceeloppervlak, bijzonderheden);
        }

        /// <summary>
        /// Serializes a <see cref="VorigeVerkoop" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="vorigeVerkoop"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, VorigeVerkoop vorigeVerkoop, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, vorigeVerkoop, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="VorigeVerkoop" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="vorigeVerkoop"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, VorigeVerkoop vorigeVerkoop, JsonSerializerOptions jsonSerializerOptions)
        {
            if (vorigeVerkoop.BijzonderhedenOption.IsSet && vorigeVerkoop.Bijzonderheden == null)
                throw new ArgumentNullException(nameof(vorigeVerkoop.Bijzonderheden), "Property is required for class VorigeVerkoop.");

            if (vorigeVerkoop.VerkoopprijsOption.IsSet)
                writer.WriteNumber("verkoopprijs", vorigeVerkoop.VerkoopprijsOption.Value!.Value);

            if (vorigeVerkoop.GeindexeerdeVerkoopprijsOption.IsSet)
                writer.WriteNumber("geindexeerdeVerkoopprijs", vorigeVerkoop.GeindexeerdeVerkoopprijsOption.Value!.Value);

            if (vorigeVerkoop.VierkantemeterprijsOption.IsSet)
                writer.WriteNumber("vierkantemeterprijs", vorigeVerkoop.VierkantemeterprijsOption.Value!.Value);

            if (vorigeVerkoop.GeindexeerdeVierkantemeterprijsOption.IsSet)
                writer.WriteNumber("geindexeerdeVierkantemeterprijs", vorigeVerkoop.GeindexeerdeVierkantemeterprijsOption.Value!.Value);

            if (vorigeVerkoop.VerkoopdatumOption.IsSet)
                writer.WriteString("verkoopdatum", vorigeVerkoop.VerkoopdatumOption.Value!.Value.ToString(VerkoopdatumFormat));

            if (vorigeVerkoop.PerceeloppervlakOption.IsSet)
                writer.WriteNumber("perceeloppervlak", vorigeVerkoop.PerceeloppervlakOption.Value!.Value);

            if (vorigeVerkoop.BijzonderhedenOption.IsSet)
            {
                writer.WritePropertyName("bijzonderheden");
                JsonSerializer.Serialize(writer, vorigeVerkoop.Bijzonderheden, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The VorigeVerkoopSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(VorigeVerkoop))]
    public partial class VorigeVerkoopSerializationContext : JsonSerializerContext { }
}
