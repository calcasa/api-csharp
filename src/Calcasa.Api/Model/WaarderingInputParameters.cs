// <auto-generated>
/*
 * Copyright 2025 Calcasa B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Calcasa Public API
 *
 * The Calcasa API is used to connect to Calcasa provided services. For more information, please visit [Documentation](https://docs.calcasa.nl) or [GitHub](https://github.com/calcasa/api).
 *
 * The version of the OpenAPI document: 1.4.0-rc3
 * Contact: info@calcasa.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using System.Text.RegularExpressions;
using Calcasa.Api.Client;

namespace Calcasa.Api.Model
{
    /// <summary>
    /// WaarderingInputParameters
    /// </summary>
    public partial class WaarderingInputParameters
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WaarderingInputParameters" /> class.
        /// </summary>
        /// <param name="productType">productType</param>
        /// <param name="bagNummeraanduidingId">Verplicht voor alle producttypen. Het BAG (Basisregistratie Adressen en Gebouwen) nummeraanduiding id.</param>
        /// <param name="geldverstrekker">Ongebruikt voor alle producttypen op dit moment. Deze informatie komt uit de credentials.</param>
        /// <param name="hypotheekwaarde">Verplicht voor de producttypen &#x60;modelwaardeDesktopTaxatie&#x60; en &#x60;desktopTaxatie&#x60;. Voor het aanvraagdoel &#x60;hypotheekOphogen&#x60; is dit de som van de huidige hypotheeksom en de ophoging. In hele euros.</param>
        /// <param name="aanvraagdoel">aanvraagdoel</param>
        /// <param name="klantwaarde">Verplicht voor de producttypen &#x60;modelwaardeDesktopTaxatie&#x60; en &#x60;desktopTaxatie&#x60;. In hele euros. De waarde zoals bekend bij de klant met bijbehorende KlantwaardeType.</param>
        /// <param name="klantwaardeType">klantwaardeType</param>
        /// <param name="isBestaandeWoning">Verplicht voor de producttypen &#x60;modelwaardeDesktopTaxatie&#x60; en &#x60;desktopTaxatie&#x60;. Geeft aan of het te waarderen object een bestaande koopwoning is.</param>
        /// <param name="isNhg">Verplicht voor de producttypen &#x60;modelwaardeDesktopTaxatie&#x60; en &#x60;desktopTaxatie&#x60;. Geeft aan of er gebruikt gemaakt wordt van de Nationale Hypotheekgarantie.</param>
        /// <param name="isBestaandeNhgHypotheek">Verplicht te gebruiken voor de combinatie van de producttypen &#x60;modelwaardeDesktopTaxatie&#x60; en &#x60;desktopTaxatie&#x60;, als er gebruikt gemaakt wordt van de Nationale Hypotheekgarantie (&#x60;isNhg&#x60;) en het aanvraagdoel niet &#x60;aankoopNieuweWoning&#x60; is. Geeft aan of er bij de eventuele bestaande hypotheek gebruik is gemaakt van de Nationale Hypotheekgarantie.</param>
        /// <param name="benodigdeOverbrugging">Verplicht voor de combinatie van de producttypen &#x60;modelwaardeDesktopTaxatie&#x60; en &#x60;desktopTaxatie&#x60; en het aanvraagdoel &#x60;overbruggingsfinanciering&#x60;. In hele euros.</param>
        /// <param name="peildatum">Optioneel te gebruiken voor de producttypen &#x60;modelwaardeRisico&#x60;. Peildatum voor de aanvraag. Standaard de datum van vandaag. Supports yyyy-MM-dd or optionally yyyy-MM-ddTHH:mm:ssZ (ISO) with the time stamp assumed to be in UTC and the time is dropped before using the value.</param>
        /// <param name="isErfpacht">Potentieel verplicht voor de product typen &#x60;modelwaardeDesktopTaxatie&#x60; en &#x60;desktopTaxatie&#x60; afhankelijk van de geldverstrekker- en accountconfiguratie.</param>
        /// <param name="klantkenmerk">Vrij veld voor het opslaan van een klantkenmerk, zoals bijvoorbeeld een dossiernummer of andere interne referentie. Dit veld komt later weer terug in het &#x60;origineleInput&#x60; veld in het &#x60;waardering&#x60; object.</param>
        [JsonConstructor]
        public WaarderingInputParameters(ProductType productType, long bagNummeraanduidingId, Option<string?> geldverstrekker = default, Option<int?> hypotheekwaarde = default, Option<Aanvraagdoel?> aanvraagdoel = default, Option<int?> klantwaarde = default, Option<KlantwaardeType?> klantwaardeType = default, Option<bool?> isBestaandeWoning = default, Option<bool?> isNhg = default, Option<bool?> isBestaandeNhgHypotheek = default, Option<int?> benodigdeOverbrugging = default, Option<DateOnly?> peildatum = default, Option<bool?> isErfpacht = default, Option<string?> klantkenmerk = default)
        {
            ProductType = productType;
            BagNummeraanduidingId = bagNummeraanduidingId;
            GeldverstrekkerOption = geldverstrekker;
            HypotheekwaardeOption = hypotheekwaarde;
            AanvraagdoelOption = aanvraagdoel;
            KlantwaardeOption = klantwaarde;
            KlantwaardeTypeOption = klantwaardeType;
            IsBestaandeWoningOption = isBestaandeWoning;
            IsNhgOption = isNhg;
            IsBestaandeNhgHypotheekOption = isBestaandeNhgHypotheek;
            BenodigdeOverbruggingOption = benodigdeOverbrugging;
            PeildatumOption = peildatum;
            IsErfpachtOption = isErfpacht;
            KlantkenmerkOption = klantkenmerk;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets ProductType
        /// </summary>
        [JsonPropertyName("productType")]
        public ProductType ProductType { get; set; }

        /// <summary>
        /// Used to track the state of Aanvraagdoel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Aanvraagdoel?> AanvraagdoelOption { get; private set; }

        /// <summary>
        /// Gets or Sets Aanvraagdoel
        /// </summary>
        [JsonPropertyName("aanvraagdoel")]
        public Aanvraagdoel? Aanvraagdoel { get { return this.AanvraagdoelOption; } set { this.AanvraagdoelOption = new(value); } }

        /// <summary>
        /// Used to track the state of KlantwaardeType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<KlantwaardeType?> KlantwaardeTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets KlantwaardeType
        /// </summary>
        [JsonPropertyName("klantwaardeType")]
        public KlantwaardeType? KlantwaardeType { get { return this.KlantwaardeTypeOption; } set { this.KlantwaardeTypeOption = new(value); } }

        /// <summary>
        /// Verplicht voor alle producttypen. Het BAG (Basisregistratie Adressen en Gebouwen) nummeraanduiding id.
        /// </summary>
        /// <value>Verplicht voor alle producttypen. Het BAG (Basisregistratie Adressen en Gebouwen) nummeraanduiding id.</value>
        [JsonPropertyName("bagNummeraanduidingId")]
        public long BagNummeraanduidingId { get; set; }

        /// <summary>
        /// Used to track the state of Geldverstrekker
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GeldverstrekkerOption { get; private set; }

        /// <summary>
        /// Ongebruikt voor alle producttypen op dit moment. Deze informatie komt uit de credentials.
        /// </summary>
        /// <value>Ongebruikt voor alle producttypen op dit moment. Deze informatie komt uit de credentials.</value>
        [JsonPropertyName("geldverstrekker")]
        public string? Geldverstrekker { get { return this.GeldverstrekkerOption; } set { this.GeldverstrekkerOption = new(value); } }

        /// <summary>
        /// Used to track the state of Hypotheekwaarde
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> HypotheekwaardeOption { get; private set; }

        /// <summary>
        /// Verplicht voor de producttypen &#x60;modelwaardeDesktopTaxatie&#x60; en &#x60;desktopTaxatie&#x60;. Voor het aanvraagdoel &#x60;hypotheekOphogen&#x60; is dit de som van de huidige hypotheeksom en de ophoging. In hele euros.
        /// </summary>
        /// <value>Verplicht voor de producttypen &#x60;modelwaardeDesktopTaxatie&#x60; en &#x60;desktopTaxatie&#x60;. Voor het aanvraagdoel &#x60;hypotheekOphogen&#x60; is dit de som van de huidige hypotheeksom en de ophoging. In hele euros.</value>
        [JsonPropertyName("hypotheekwaarde")]
        public int? Hypotheekwaarde { get { return this.HypotheekwaardeOption; } set { this.HypotheekwaardeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Klantwaarde
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> KlantwaardeOption { get; private set; }

        /// <summary>
        /// Verplicht voor de producttypen &#x60;modelwaardeDesktopTaxatie&#x60; en &#x60;desktopTaxatie&#x60;. In hele euros. De waarde zoals bekend bij de klant met bijbehorende KlantwaardeType.
        /// </summary>
        /// <value>Verplicht voor de producttypen &#x60;modelwaardeDesktopTaxatie&#x60; en &#x60;desktopTaxatie&#x60;. In hele euros. De waarde zoals bekend bij de klant met bijbehorende KlantwaardeType.</value>
        [JsonPropertyName("klantwaarde")]
        public int? Klantwaarde { get { return this.KlantwaardeOption; } set { this.KlantwaardeOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsBestaandeWoning
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsBestaandeWoningOption { get; private set; }

        /// <summary>
        /// Verplicht voor de producttypen &#x60;modelwaardeDesktopTaxatie&#x60; en &#x60;desktopTaxatie&#x60;. Geeft aan of het te waarderen object een bestaande koopwoning is.
        /// </summary>
        /// <value>Verplicht voor de producttypen &#x60;modelwaardeDesktopTaxatie&#x60; en &#x60;desktopTaxatie&#x60;. Geeft aan of het te waarderen object een bestaande koopwoning is.</value>
        [JsonPropertyName("isBestaandeWoning")]
        public bool? IsBestaandeWoning { get { return this.IsBestaandeWoningOption; } set { this.IsBestaandeWoningOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsNhg
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsNhgOption { get; private set; }

        /// <summary>
        /// Verplicht voor de producttypen &#x60;modelwaardeDesktopTaxatie&#x60; en &#x60;desktopTaxatie&#x60;. Geeft aan of er gebruikt gemaakt wordt van de Nationale Hypotheekgarantie.
        /// </summary>
        /// <value>Verplicht voor de producttypen &#x60;modelwaardeDesktopTaxatie&#x60; en &#x60;desktopTaxatie&#x60;. Geeft aan of er gebruikt gemaakt wordt van de Nationale Hypotheekgarantie.</value>
        [JsonPropertyName("isNhg")]
        public bool? IsNhg { get { return this.IsNhgOption; } set { this.IsNhgOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsBestaandeNhgHypotheek
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsBestaandeNhgHypotheekOption { get; private set; }

        /// <summary>
        /// Verplicht te gebruiken voor de combinatie van de producttypen &#x60;modelwaardeDesktopTaxatie&#x60; en &#x60;desktopTaxatie&#x60;, als er gebruikt gemaakt wordt van de Nationale Hypotheekgarantie (&#x60;isNhg&#x60;) en het aanvraagdoel niet &#x60;aankoopNieuweWoning&#x60; is. Geeft aan of er bij de eventuele bestaande hypotheek gebruik is gemaakt van de Nationale Hypotheekgarantie.
        /// </summary>
        /// <value>Verplicht te gebruiken voor de combinatie van de producttypen &#x60;modelwaardeDesktopTaxatie&#x60; en &#x60;desktopTaxatie&#x60;, als er gebruikt gemaakt wordt van de Nationale Hypotheekgarantie (&#x60;isNhg&#x60;) en het aanvraagdoel niet &#x60;aankoopNieuweWoning&#x60; is. Geeft aan of er bij de eventuele bestaande hypotheek gebruik is gemaakt van de Nationale Hypotheekgarantie.</value>
        [JsonPropertyName("isBestaandeNhgHypotheek")]
        public bool? IsBestaandeNhgHypotheek { get { return this.IsBestaandeNhgHypotheekOption; } set { this.IsBestaandeNhgHypotheekOption = new(value); } }

        /// <summary>
        /// Used to track the state of BenodigdeOverbrugging
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> BenodigdeOverbruggingOption { get; private set; }

        /// <summary>
        /// Verplicht voor de combinatie van de producttypen &#x60;modelwaardeDesktopTaxatie&#x60; en &#x60;desktopTaxatie&#x60; en het aanvraagdoel &#x60;overbruggingsfinanciering&#x60;. In hele euros.
        /// </summary>
        /// <value>Verplicht voor de combinatie van de producttypen &#x60;modelwaardeDesktopTaxatie&#x60; en &#x60;desktopTaxatie&#x60; en het aanvraagdoel &#x60;overbruggingsfinanciering&#x60;. In hele euros.</value>
        [JsonPropertyName("benodigdeOverbrugging")]
        public int? BenodigdeOverbrugging { get { return this.BenodigdeOverbruggingOption; } set { this.BenodigdeOverbruggingOption = new(value); } }

        /// <summary>
        /// Used to track the state of Peildatum
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> PeildatumOption { get; private set; }

        /// <summary>
        /// Optioneel te gebruiken voor de producttypen &#x60;modelwaardeRisico&#x60;. Peildatum voor de aanvraag. Standaard de datum van vandaag. Supports yyyy-MM-dd or optionally yyyy-MM-ddTHH:mm:ssZ (ISO) with the time stamp assumed to be in UTC and the time is dropped before using the value.
        /// </summary>
        /// <value>Optioneel te gebruiken voor de producttypen &#x60;modelwaardeRisico&#x60;. Peildatum voor de aanvraag. Standaard de datum van vandaag. Supports yyyy-MM-dd or optionally yyyy-MM-ddTHH:mm:ssZ (ISO) with the time stamp assumed to be in UTC and the time is dropped before using the value.</value>
        /* <example>Wed Apr 28 00:00:00 UTC 2021</example> */
        [JsonPropertyName("peildatum")]
        public DateOnly? Peildatum { get { return this.PeildatumOption; } set { this.PeildatumOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsErfpacht
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsErfpachtOption { get; private set; }

        /// <summary>
        /// Potentieel verplicht voor de product typen &#x60;modelwaardeDesktopTaxatie&#x60; en &#x60;desktopTaxatie&#x60; afhankelijk van de geldverstrekker- en accountconfiguratie.
        /// </summary>
        /// <value>Potentieel verplicht voor de product typen &#x60;modelwaardeDesktopTaxatie&#x60; en &#x60;desktopTaxatie&#x60; afhankelijk van de geldverstrekker- en accountconfiguratie.</value>
        [JsonPropertyName("isErfpacht")]
        public bool? IsErfpacht { get { return this.IsErfpachtOption; } set { this.IsErfpachtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Klantkenmerk
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> KlantkenmerkOption { get; private set; }

        /// <summary>
        /// Vrij veld voor het opslaan van een klantkenmerk, zoals bijvoorbeeld een dossiernummer of andere interne referentie. Dit veld komt later weer terug in het &#x60;origineleInput&#x60; veld in het &#x60;waardering&#x60; object.
        /// </summary>
        /// <value>Vrij veld voor het opslaan van een klantkenmerk, zoals bijvoorbeeld een dossiernummer of andere interne referentie. Dit veld komt later weer terug in het &#x60;origineleInput&#x60; veld in het &#x60;waardering&#x60; object.</value>
        [JsonPropertyName("klantkenmerk")]
        public string? Klantkenmerk { get { return this.KlantkenmerkOption; } set { this.KlantkenmerkOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WaarderingInputParameters {\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  BagNummeraanduidingId: ").Append(BagNummeraanduidingId).Append("\n");
            sb.Append("  Geldverstrekker: ").Append(Geldverstrekker).Append("\n");
            sb.Append("  Hypotheekwaarde: ").Append(Hypotheekwaarde).Append("\n");
            sb.Append("  Aanvraagdoel: ").Append(Aanvraagdoel).Append("\n");
            sb.Append("  Klantwaarde: ").Append(Klantwaarde).Append("\n");
            sb.Append("  KlantwaardeType: ").Append(KlantwaardeType).Append("\n");
            sb.Append("  IsBestaandeWoning: ").Append(IsBestaandeWoning).Append("\n");
            sb.Append("  IsNhg: ").Append(IsNhg).Append("\n");
            sb.Append("  IsBestaandeNhgHypotheek: ").Append(IsBestaandeNhgHypotheek).Append("\n");
            sb.Append("  BenodigdeOverbrugging: ").Append(BenodigdeOverbrugging).Append("\n");
            sb.Append("  Peildatum: ").Append(Peildatum).Append("\n");
            sb.Append("  IsErfpacht: ").Append(IsErfpacht).Append("\n");
            sb.Append("  Klantkenmerk: ").Append(Klantkenmerk).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WaarderingInputParameters" />
    /// </summary>
    public class WaarderingInputParametersJsonConverter : JsonConverter<WaarderingInputParameters>
    {
        /// <summary>
        /// The format to use to serialize Peildatum
        /// </summary>
        public static string PeildatumFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="WaarderingInputParameters" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WaarderingInputParameters Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ProductType?> productType = default;
            Option<long?> bagNummeraanduidingId = default;
            Option<string?> geldverstrekker = default;
            Option<int?> hypotheekwaarde = default;
            Option<Aanvraagdoel?> aanvraagdoel = default;
            Option<int?> klantwaarde = default;
            Option<KlantwaardeType?> klantwaardeType = default;
            Option<bool?> isBestaandeWoning = default;
            Option<bool?> isNhg = default;
            Option<bool?> isBestaandeNhgHypotheek = default;
            Option<int?> benodigdeOverbrugging = default;
            Option<DateOnly?> peildatum = default;
            Option<bool?> isErfpacht = default;
            Option<string?> klantkenmerk = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "productType":
                            string? productTypeRawValue = utf8JsonReader.GetString();
                            if (productTypeRawValue != null)
                                productType = new Option<ProductType?>(ProductTypeValueConverter.FromStringOrDefault(productTypeRawValue));
                            break;
                        case "bagNummeraanduidingId":
                            bagNummeraanduidingId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "geldverstrekker":
                            geldverstrekker = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "hypotheekwaarde":
                            hypotheekwaarde = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "aanvraagdoel":
                            string? aanvraagdoelRawValue = utf8JsonReader.GetString();
                            if (aanvraagdoelRawValue != null)
                                aanvraagdoel = new Option<Aanvraagdoel?>(AanvraagdoelValueConverter.FromStringOrDefault(aanvraagdoelRawValue));
                            break;
                        case "klantwaarde":
                            klantwaarde = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "klantwaardeType":
                            string? klantwaardeTypeRawValue = utf8JsonReader.GetString();
                            if (klantwaardeTypeRawValue != null)
                                klantwaardeType = new Option<KlantwaardeType?>(KlantwaardeTypeValueConverter.FromStringOrDefault(klantwaardeTypeRawValue));
                            break;
                        case "isBestaandeWoning":
                            isBestaandeWoning = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "isNhg":
                            isNhg = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "isBestaandeNhgHypotheek":
                            isBestaandeNhgHypotheek = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "benodigdeOverbrugging":
                            benodigdeOverbrugging = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "peildatum":
                            peildatum = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "isErfpacht":
                            isErfpacht = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "klantkenmerk":
                            klantkenmerk = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!productType.IsSet)
                throw new ArgumentException("Property is required for class WaarderingInputParameters.", nameof(productType));

            if (!bagNummeraanduidingId.IsSet)
                throw new ArgumentException("Property is required for class WaarderingInputParameters.", nameof(bagNummeraanduidingId));

            if (productType.IsSet && productType.Value == null)
                throw new ArgumentNullException(nameof(productType), "Property is not nullable for class WaarderingInputParameters.");

            if (bagNummeraanduidingId.IsSet && bagNummeraanduidingId.Value == null)
                throw new ArgumentNullException(nameof(bagNummeraanduidingId), "Property is not nullable for class WaarderingInputParameters.");

            if (geldverstrekker.IsSet && geldverstrekker.Value == null)
                throw new ArgumentNullException(nameof(geldverstrekker), "Property is not nullable for class WaarderingInputParameters.");

            if (hypotheekwaarde.IsSet && hypotheekwaarde.Value == null)
                throw new ArgumentNullException(nameof(hypotheekwaarde), "Property is not nullable for class WaarderingInputParameters.");

            if (aanvraagdoel.IsSet && aanvraagdoel.Value == null)
                throw new ArgumentNullException(nameof(aanvraagdoel), "Property is not nullable for class WaarderingInputParameters.");

            if (klantwaarde.IsSet && klantwaarde.Value == null)
                throw new ArgumentNullException(nameof(klantwaarde), "Property is not nullable for class WaarderingInputParameters.");

            if (klantwaardeType.IsSet && klantwaardeType.Value == null)
                throw new ArgumentNullException(nameof(klantwaardeType), "Property is not nullable for class WaarderingInputParameters.");

            if (isBestaandeWoning.IsSet && isBestaandeWoning.Value == null)
                throw new ArgumentNullException(nameof(isBestaandeWoning), "Property is not nullable for class WaarderingInputParameters.");

            if (isNhg.IsSet && isNhg.Value == null)
                throw new ArgumentNullException(nameof(isNhg), "Property is not nullable for class WaarderingInputParameters.");

            if (isBestaandeNhgHypotheek.IsSet && isBestaandeNhgHypotheek.Value == null)
                throw new ArgumentNullException(nameof(isBestaandeNhgHypotheek), "Property is not nullable for class WaarderingInputParameters.");

            if (benodigdeOverbrugging.IsSet && benodigdeOverbrugging.Value == null)
                throw new ArgumentNullException(nameof(benodigdeOverbrugging), "Property is not nullable for class WaarderingInputParameters.");

            if (klantkenmerk.IsSet && klantkenmerk.Value == null)
                throw new ArgumentNullException(nameof(klantkenmerk), "Property is not nullable for class WaarderingInputParameters.");

            return new WaarderingInputParameters(productType.Value!.Value!, bagNummeraanduidingId.Value!.Value!, geldverstrekker, hypotheekwaarde, aanvraagdoel, klantwaarde, klantwaardeType, isBestaandeWoning, isNhg, isBestaandeNhgHypotheek, benodigdeOverbrugging, peildatum, isErfpacht, klantkenmerk);
        }

        /// <summary>
        /// Serializes a <see cref="WaarderingInputParameters" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="waarderingInputParameters"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WaarderingInputParameters waarderingInputParameters, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, waarderingInputParameters, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WaarderingInputParameters" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="waarderingInputParameters"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WaarderingInputParameters waarderingInputParameters, JsonSerializerOptions jsonSerializerOptions)
        {
            if (waarderingInputParameters.GeldverstrekkerOption.IsSet && waarderingInputParameters.Geldverstrekker == null)
                throw new ArgumentNullException(nameof(waarderingInputParameters.Geldverstrekker), "Property is required for class WaarderingInputParameters.");

            if (waarderingInputParameters.KlantkenmerkOption.IsSet && waarderingInputParameters.Klantkenmerk == null)
                throw new ArgumentNullException(nameof(waarderingInputParameters.Klantkenmerk), "Property is required for class WaarderingInputParameters.");

            var productTypeRawValue = ProductTypeValueConverter.ToJsonValue(waarderingInputParameters.ProductType);
            writer.WriteString("productType", productTypeRawValue);

            writer.WriteNumber("bagNummeraanduidingId", waarderingInputParameters.BagNummeraanduidingId);

            if (waarderingInputParameters.GeldverstrekkerOption.IsSet)
                writer.WriteString("geldverstrekker", waarderingInputParameters.Geldverstrekker);

            if (waarderingInputParameters.HypotheekwaardeOption.IsSet)
                writer.WriteNumber("hypotheekwaarde", waarderingInputParameters.HypotheekwaardeOption.Value!.Value);

            if (waarderingInputParameters.AanvraagdoelOption.IsSet)
            {
                var aanvraagdoelRawValue = AanvraagdoelValueConverter.ToJsonValue(waarderingInputParameters.Aanvraagdoel!.Value);
                writer.WriteString("aanvraagdoel", aanvraagdoelRawValue);
            }
            if (waarderingInputParameters.KlantwaardeOption.IsSet)
                writer.WriteNumber("klantwaarde", waarderingInputParameters.KlantwaardeOption.Value!.Value);

            if (waarderingInputParameters.KlantwaardeTypeOption.IsSet)
            {
                var klantwaardeTypeRawValue = KlantwaardeTypeValueConverter.ToJsonValue(waarderingInputParameters.KlantwaardeType!.Value);
                writer.WriteString("klantwaardeType", klantwaardeTypeRawValue);
            }
            if (waarderingInputParameters.IsBestaandeWoningOption.IsSet)
                writer.WriteBoolean("isBestaandeWoning", waarderingInputParameters.IsBestaandeWoningOption.Value!.Value);

            if (waarderingInputParameters.IsNhgOption.IsSet)
                writer.WriteBoolean("isNhg", waarderingInputParameters.IsNhgOption.Value!.Value);

            if (waarderingInputParameters.IsBestaandeNhgHypotheekOption.IsSet)
                writer.WriteBoolean("isBestaandeNhgHypotheek", waarderingInputParameters.IsBestaandeNhgHypotheekOption.Value!.Value);

            if (waarderingInputParameters.BenodigdeOverbruggingOption.IsSet)
                writer.WriteNumber("benodigdeOverbrugging", waarderingInputParameters.BenodigdeOverbruggingOption.Value!.Value);

            if (waarderingInputParameters.PeildatumOption.IsSet)
                if (waarderingInputParameters.PeildatumOption.Value != null)
                    writer.WriteString("peildatum", waarderingInputParameters.PeildatumOption.Value!.Value.ToString(PeildatumFormat));
                else
                    writer.WriteNull("peildatum");

            if (waarderingInputParameters.IsErfpachtOption.IsSet)
                if (waarderingInputParameters.IsErfpachtOption.Value != null)
                    writer.WriteBoolean("isErfpacht", waarderingInputParameters.IsErfpachtOption.Value!.Value);
                else
                    writer.WriteNull("isErfpacht");

            if (waarderingInputParameters.KlantkenmerkOption.IsSet)
                writer.WriteString("klantkenmerk", waarderingInputParameters.Klantkenmerk);
        }
    }

    /// <summary>
    /// The WaarderingInputParametersSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(WaarderingInputParameters))]
    public partial class WaarderingInputParametersSerializationContext : JsonSerializerContext { }
}
