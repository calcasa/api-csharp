// <auto-generated>
/*
 * Copyright 2025 Calcasa B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Calcasa Public API
 *
 * The Calcasa API is used to connect to Calcasa provided services. For more information, please visit [Documentation](https://docs.calcasa.nl) or [GitHub](https://github.com/calcasa/api).
 *
 * The version of the OpenAPI document: 1.4.0-rc2
 * Contact: info@calcasa.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using System.Text.RegularExpressions;
using Calcasa.Api.Client;

namespace Calcasa.Api.Model
{
    /// <summary>
    /// | Waarde | Omschrijving | | - -- | - -- | | &#x60;onbekend&#x60; | Bijzonderheden onbekend. | | &#x60;executieverkoop&#x60; | Een indicatie dat het object is verkocht via een executieveiling. | | &#x60;familieverkoop&#x60; | Een indicatie dat de transactie is geregistreerd als familieverkoop. | | &#x60;meerOnroerendGoed&#x60; | Een indicatie dat de transactie meerdere percelen bevat. | | &#x60;zittendeHuurder&#x60; | Een indicatie dat de transactie is geregistreerd als verkoop aan de zittende huurder. | | &#x60;verkoperNietNatuurlijk&#x60; | Een indicatie dat de verkoper een niet-natuurlijke persoon is. | | &#x60;koperNietNatuurlijk&#x60; | Een indicatie dat de koper een niet-natuurlijke persoon is. | | &#x60;nietWoning&#x60; | Een indicatie dat het object geregistreerd is als niet-woning. | | &#x60;erfdienstbaarheid&#x60; | Een indicatie dat er een erfdienstbaarheid op het object gevestigd is. |
    /// </summary>
    /// <value>| Waarde | Omschrijving | | - -- | - -- | | &#x60;onbekend&#x60; | Bijzonderheden onbekend. | | &#x60;executieverkoop&#x60; | Een indicatie dat het object is verkocht via een executieveiling. | | &#x60;familieverkoop&#x60; | Een indicatie dat de transactie is geregistreerd als familieverkoop. | | &#x60;meerOnroerendGoed&#x60; | Een indicatie dat de transactie meerdere percelen bevat. | | &#x60;zittendeHuurder&#x60; | Een indicatie dat de transactie is geregistreerd als verkoop aan de zittende huurder. | | &#x60;verkoperNietNatuurlijk&#x60; | Een indicatie dat de verkoper een niet-natuurlijke persoon is. | | &#x60;koperNietNatuurlijk&#x60; | Een indicatie dat de koper een niet-natuurlijke persoon is. | | &#x60;nietWoning&#x60; | Een indicatie dat het object geregistreerd is als niet-woning. | | &#x60;erfdienstbaarheid&#x60; | Een indicatie dat er een erfdienstbaarheid op het object gevestigd is. |</value>
    public enum VerkoopBijzonderheden
    {
        /// <summary>
        /// Enum Onbekend for value: onbekend
        /// </summary>
        Onbekend,

        /// <summary>
        /// Enum Executieverkoop for value: executieverkoop
        /// </summary>
        Executieverkoop,

        /// <summary>
        /// Enum Familieverkoop for value: familieverkoop
        /// </summary>
        Familieverkoop,

        /// <summary>
        /// Enum MeerOnroerendGoed for value: meerOnroerendGoed
        /// </summary>
        MeerOnroerendGoed,

        /// <summary>
        /// Enum ZittendeHuurder for value: zittendeHuurder
        /// </summary>
        ZittendeHuurder,

        /// <summary>
        /// Enum VerkoperNietNatuurlijk for value: verkoperNietNatuurlijk
        /// </summary>
        VerkoperNietNatuurlijk,

        /// <summary>
        /// Enum KoperNietNatuurlijk for value: koperNietNatuurlijk
        /// </summary>
        KoperNietNatuurlijk,

        /// <summary>
        /// Enum NietWoning for value: nietWoning
        /// </summary>
        NietWoning,

        /// <summary>
        /// Enum Erfdienstbaarheid for value: erfdienstbaarheid
        /// </summary>
        Erfdienstbaarheid
    }

    /// <summary>
    /// Converts <see cref="VerkoopBijzonderheden"/> to and from the JSON value
    /// </summary>
    public static class VerkoopBijzonderhedenValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="VerkoopBijzonderheden"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static VerkoopBijzonderheden FromString(string value)
        {
            if (value.Equals("onbekend"))
                return VerkoopBijzonderheden.Onbekend;

            if (value.Equals("executieverkoop"))
                return VerkoopBijzonderheden.Executieverkoop;

            if (value.Equals("familieverkoop"))
                return VerkoopBijzonderheden.Familieverkoop;

            if (value.Equals("meerOnroerendGoed"))
                return VerkoopBijzonderheden.MeerOnroerendGoed;

            if (value.Equals("zittendeHuurder"))
                return VerkoopBijzonderheden.ZittendeHuurder;

            if (value.Equals("verkoperNietNatuurlijk"))
                return VerkoopBijzonderheden.VerkoperNietNatuurlijk;

            if (value.Equals("koperNietNatuurlijk"))
                return VerkoopBijzonderheden.KoperNietNatuurlijk;

            if (value.Equals("nietWoning"))
                return VerkoopBijzonderheden.NietWoning;

            if (value.Equals("erfdienstbaarheid"))
                return VerkoopBijzonderheden.Erfdienstbaarheid;

            throw new NotImplementedException($"Could not convert value to type VerkoopBijzonderheden: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="VerkoopBijzonderheden"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static VerkoopBijzonderheden? FromStringOrDefault(string value)
        {
            if (value.Equals("onbekend"))
                return VerkoopBijzonderheden.Onbekend;

            if (value.Equals("executieverkoop"))
                return VerkoopBijzonderheden.Executieverkoop;

            if (value.Equals("familieverkoop"))
                return VerkoopBijzonderheden.Familieverkoop;

            if (value.Equals("meerOnroerendGoed"))
                return VerkoopBijzonderheden.MeerOnroerendGoed;

            if (value.Equals("zittendeHuurder"))
                return VerkoopBijzonderheden.ZittendeHuurder;

            if (value.Equals("verkoperNietNatuurlijk"))
                return VerkoopBijzonderheden.VerkoperNietNatuurlijk;

            if (value.Equals("koperNietNatuurlijk"))
                return VerkoopBijzonderheden.KoperNietNatuurlijk;

            if (value.Equals("nietWoning"))
                return VerkoopBijzonderheden.NietWoning;

            if (value.Equals("erfdienstbaarheid"))
                return VerkoopBijzonderheden.Erfdienstbaarheid;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="VerkoopBijzonderheden"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(VerkoopBijzonderheden value)
        {
            if (value == VerkoopBijzonderheden.Onbekend)
                return "onbekend";

            if (value == VerkoopBijzonderheden.Executieverkoop)
                return "executieverkoop";

            if (value == VerkoopBijzonderheden.Familieverkoop)
                return "familieverkoop";

            if (value == VerkoopBijzonderheden.MeerOnroerendGoed)
                return "meerOnroerendGoed";

            if (value == VerkoopBijzonderheden.ZittendeHuurder)
                return "zittendeHuurder";

            if (value == VerkoopBijzonderheden.VerkoperNietNatuurlijk)
                return "verkoperNietNatuurlijk";

            if (value == VerkoopBijzonderheden.KoperNietNatuurlijk)
                return "koperNietNatuurlijk";

            if (value == VerkoopBijzonderheden.NietWoning)
                return "nietWoning";

            if (value == VerkoopBijzonderheden.Erfdienstbaarheid)
                return "erfdienstbaarheid";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VerkoopBijzonderheden"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class VerkoopBijzonderhedenJsonConverter : JsonConverter<VerkoopBijzonderheden>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override VerkoopBijzonderheden Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            VerkoopBijzonderheden? result = rawValue == null
                ? null
                : VerkoopBijzonderhedenValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the VerkoopBijzonderheden to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="verkoopBijzonderheden"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, VerkoopBijzonderheden verkoopBijzonderheden, JsonSerializerOptions options)
        {
            writer.WriteStringValue(VerkoopBijzonderhedenValueConverter.ToJsonValue(verkoopBijzonderheden).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VerkoopBijzonderheden"/>
    /// </summary>
    public class VerkoopBijzonderhedenNullableJsonConverter : JsonConverter<VerkoopBijzonderheden?>
    {
        /// <summary>
        /// Returns a VerkoopBijzonderheden from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override VerkoopBijzonderheden? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            VerkoopBijzonderheden? result = rawValue == null
                ? null
                : VerkoopBijzonderhedenValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the VerkoopBijzonderheden to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="verkoopBijzonderheden"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, VerkoopBijzonderheden? verkoopBijzonderheden, JsonSerializerOptions options)
        {
            writer.WriteStringValue(verkoopBijzonderheden.HasValue ? VerkoopBijzonderhedenValueConverter.ToJsonValue(verkoopBijzonderheden.Value).ToString() : "null");
        }
    }


    /// <summary>
    /// The VerkoopBijzonderhedenSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(VerkoopBijzonderheden))]
    public partial class VerkoopBijzonderhedenSerializationContext : JsonSerializerContext { }
}
