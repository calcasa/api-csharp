// <auto-generated>
/*
 * Copyright 2025 Calcasa B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Calcasa Public API
 *
 * The Calcasa API is used to connect to Calcasa provided services. For more information, please visit [Documentation](https://docs.calcasa.nl) or [GitHub](https://github.com/calcasa/api).
 *
 * The version of the OpenAPI document: 1.4.0-rc1
 * Contact: info@calcasa.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using Calcasa.Api.Client;

namespace Calcasa.Api.Model
{
    /// <summary>
    /// Referentieobject
    /// </summary>
    public partial class Referentieobject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Referentieobject" /> class.
        /// </summary>
        /// <param name="afstand">Afstand tot het waarderingsobject in meters.</param>
        /// <param name="verkoopprijs">In hele euros.</param>
        /// <param name="gecorrigeerdeVerkoopprijs">In hele euros.</param>
        /// <param name="geindexeerdeVerkoopprijs">In hele euros.</param>
        /// <param name="vierkantemeterprijs">In hele euros per vierkante meters.</param>
        /// <param name="gecorrigeerdeVierkantemeterprijs">In hele euros per vierkante meters.</param>
        /// <param name="geindexeerdeVierkantemeterprijs">In hele euros per vierkante meters.</param>
        /// <param name="verkoopdatum">In UTC.</param>
        /// <param name="adres">adres</param>
        /// <param name="object">object</param>
        /// <param name="cbsIndeling">cbsIndeling</param>
        /// <param name="fotos">Fotos van het referentieobject.</param>
        /// <param name="bijzonderheden">Eventuele bijzonderheden van de transactie.</param>
        [JsonConstructor]
        public Referentieobject(Option<int?> afstand = default, Option<int?> verkoopprijs = default, Option<int?> gecorrigeerdeVerkoopprijs = default, Option<int?> geindexeerdeVerkoopprijs = default, Option<int?> vierkantemeterprijs = default, Option<int?> gecorrigeerdeVierkantemeterprijs = default, Option<int?> geindexeerdeVierkantemeterprijs = default, Option<DateOnly?> verkoopdatum = default, Option<Adres?> adres = default, Option<Objectdata?> @object = default, Option<CbsIndeling?> cbsIndeling = default, Option<Collection<Foto>?> fotos = default, Option<Collection<VerkoopBijzonderheden>?> bijzonderheden = default)
        {
            AfstandOption = afstand;
            VerkoopprijsOption = verkoopprijs;
            GecorrigeerdeVerkoopprijsOption = gecorrigeerdeVerkoopprijs;
            GeindexeerdeVerkoopprijsOption = geindexeerdeVerkoopprijs;
            VierkantemeterprijsOption = vierkantemeterprijs;
            GecorrigeerdeVierkantemeterprijsOption = gecorrigeerdeVierkantemeterprijs;
            GeindexeerdeVierkantemeterprijsOption = geindexeerdeVierkantemeterprijs;
            VerkoopdatumOption = verkoopdatum;
            AdresOption = adres;
            ObjectOption = @object;
            CbsIndelingOption = cbsIndeling;
            FotosOption = fotos;
            BijzonderhedenOption = bijzonderheden;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Afstand
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AfstandOption { get; private set; }

        /// <summary>
        /// Afstand tot het waarderingsobject in meters.
        /// </summary>
        /// <value>Afstand tot het waarderingsobject in meters.</value>
        [JsonPropertyName("afstand")]
        public int? Afstand { get { return this.AfstandOption; } set { this.AfstandOption = new(value); } }

        /// <summary>
        /// Used to track the state of Verkoopprijs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> VerkoopprijsOption { get; private set; }

        /// <summary>
        /// In hele euros.
        /// </summary>
        /// <value>In hele euros.</value>
        [JsonPropertyName("verkoopprijs")]
        public int? Verkoopprijs { get { return this.VerkoopprijsOption; } set { this.VerkoopprijsOption = new(value); } }

        /// <summary>
        /// Used to track the state of GecorrigeerdeVerkoopprijs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> GecorrigeerdeVerkoopprijsOption { get; private set; }

        /// <summary>
        /// In hele euros.
        /// </summary>
        /// <value>In hele euros.</value>
        [JsonPropertyName("gecorrigeerdeVerkoopprijs")]
        public int? GecorrigeerdeVerkoopprijs { get { return this.GecorrigeerdeVerkoopprijsOption; } set { this.GecorrigeerdeVerkoopprijsOption = new(value); } }

        /// <summary>
        /// Used to track the state of GeindexeerdeVerkoopprijs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> GeindexeerdeVerkoopprijsOption { get; private set; }

        /// <summary>
        /// In hele euros.
        /// </summary>
        /// <value>In hele euros.</value>
        [JsonPropertyName("geindexeerdeVerkoopprijs")]
        public int? GeindexeerdeVerkoopprijs { get { return this.GeindexeerdeVerkoopprijsOption; } set { this.GeindexeerdeVerkoopprijsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Vierkantemeterprijs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> VierkantemeterprijsOption { get; private set; }

        /// <summary>
        /// In hele euros per vierkante meters.
        /// </summary>
        /// <value>In hele euros per vierkante meters.</value>
        [JsonPropertyName("vierkantemeterprijs")]
        public int? Vierkantemeterprijs { get { return this.VierkantemeterprijsOption; } set { this.VierkantemeterprijsOption = new(value); } }

        /// <summary>
        /// Used to track the state of GecorrigeerdeVierkantemeterprijs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> GecorrigeerdeVierkantemeterprijsOption { get; private set; }

        /// <summary>
        /// In hele euros per vierkante meters.
        /// </summary>
        /// <value>In hele euros per vierkante meters.</value>
        [JsonPropertyName("gecorrigeerdeVierkantemeterprijs")]
        public int? GecorrigeerdeVierkantemeterprijs { get { return this.GecorrigeerdeVierkantemeterprijsOption; } set { this.GecorrigeerdeVierkantemeterprijsOption = new(value); } }

        /// <summary>
        /// Used to track the state of GeindexeerdeVierkantemeterprijs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> GeindexeerdeVierkantemeterprijsOption { get; private set; }

        /// <summary>
        /// In hele euros per vierkante meters.
        /// </summary>
        /// <value>In hele euros per vierkante meters.</value>
        [JsonPropertyName("geindexeerdeVierkantemeterprijs")]
        public int? GeindexeerdeVierkantemeterprijs { get { return this.GeindexeerdeVierkantemeterprijsOption; } set { this.GeindexeerdeVierkantemeterprijsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Verkoopdatum
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> VerkoopdatumOption { get; private set; }

        /// <summary>
        /// In UTC.
        /// </summary>
        /// <value>In UTC.</value>
        /* <example>Wed Apr 28 00:00:00 UTC 2021</example> */
        [JsonPropertyName("verkoopdatum")]
        public DateOnly? Verkoopdatum { get { return this.VerkoopdatumOption; } set { this.VerkoopdatumOption = new(value); } }

        /// <summary>
        /// Used to track the state of Adres
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Adres?> AdresOption { get; private set; }

        /// <summary>
        /// Gets or Sets Adres
        /// </summary>
        [JsonPropertyName("adres")]
        public Adres? Adres { get { return this.AdresOption; } set { this.AdresOption = new(value); } }

        /// <summary>
        /// Used to track the state of Object
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Objectdata?> ObjectOption { get; private set; }

        /// <summary>
        /// Gets or Sets Object
        /// </summary>
        [JsonPropertyName("object")]
        public Objectdata? Object { get { return this.ObjectOption; } set { this.ObjectOption = new(value); } }

        /// <summary>
        /// Used to track the state of CbsIndeling
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CbsIndeling?> CbsIndelingOption { get; private set; }

        /// <summary>
        /// Gets or Sets CbsIndeling
        /// </summary>
        [JsonPropertyName("cbsIndeling")]
        public CbsIndeling? CbsIndeling { get { return this.CbsIndelingOption; } set { this.CbsIndelingOption = new(value); } }

        /// <summary>
        /// Used to track the state of Fotos
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Collection<Foto>?> FotosOption { get; private set; }

        /// <summary>
        /// Fotos van het referentieobject.
        /// </summary>
        /// <value>Fotos van het referentieobject.</value>
        [JsonPropertyName("fotos")]
        public Collection<Foto>? Fotos { get { return this.FotosOption; } set { this.FotosOption = new(value); } }

        /// <summary>
        /// Used to track the state of Bijzonderheden
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Collection<VerkoopBijzonderheden>?> BijzonderhedenOption { get; private set; }

        /// <summary>
        /// Eventuele bijzonderheden van de transactie.
        /// </summary>
        /// <value>Eventuele bijzonderheden van de transactie.</value>
        [JsonPropertyName("bijzonderheden")]
        public Collection<VerkoopBijzonderheden>? Bijzonderheden { get { return this.BijzonderhedenOption; } set { this.BijzonderhedenOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Referentieobject {\n");
            sb.Append("  Afstand: ").Append(Afstand).Append("\n");
            sb.Append("  Verkoopprijs: ").Append(Verkoopprijs).Append("\n");
            sb.Append("  GecorrigeerdeVerkoopprijs: ").Append(GecorrigeerdeVerkoopprijs).Append("\n");
            sb.Append("  GeindexeerdeVerkoopprijs: ").Append(GeindexeerdeVerkoopprijs).Append("\n");
            sb.Append("  Vierkantemeterprijs: ").Append(Vierkantemeterprijs).Append("\n");
            sb.Append("  GecorrigeerdeVierkantemeterprijs: ").Append(GecorrigeerdeVierkantemeterprijs).Append("\n");
            sb.Append("  GeindexeerdeVierkantemeterprijs: ").Append(GeindexeerdeVierkantemeterprijs).Append("\n");
            sb.Append("  Verkoopdatum: ").Append(Verkoopdatum).Append("\n");
            sb.Append("  Adres: ").Append(Adres).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  CbsIndeling: ").Append(CbsIndeling).Append("\n");
            sb.Append("  Fotos: ").Append(Fotos).Append("\n");
            sb.Append("  Bijzonderheden: ").Append(Bijzonderheden).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Referentieobject" />
    /// </summary>
    public class ReferentieobjectJsonConverter : JsonConverter<Referentieobject>
    {
        /// <summary>
        /// The format to use to serialize Verkoopdatum
        /// </summary>
        public static string VerkoopdatumFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="Referentieobject" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Referentieobject Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> afstand = default;
            Option<int?> verkoopprijs = default;
            Option<int?> gecorrigeerdeVerkoopprijs = default;
            Option<int?> geindexeerdeVerkoopprijs = default;
            Option<int?> vierkantemeterprijs = default;
            Option<int?> gecorrigeerdeVierkantemeterprijs = default;
            Option<int?> geindexeerdeVierkantemeterprijs = default;
            Option<DateOnly?> verkoopdatum = default;
            Option<Adres?> adres = default;
            Option<Objectdata?> varObject = default;
            Option<CbsIndeling?> cbsIndeling = default;
            Option<Collection<Foto>?> fotos = default;
            Option<Collection<VerkoopBijzonderheden>?> bijzonderheden = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "afstand":
                            afstand = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "verkoopprijs":
                            verkoopprijs = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "gecorrigeerdeVerkoopprijs":
                            gecorrigeerdeVerkoopprijs = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "geindexeerdeVerkoopprijs":
                            geindexeerdeVerkoopprijs = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "vierkantemeterprijs":
                            vierkantemeterprijs = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "gecorrigeerdeVierkantemeterprijs":
                            gecorrigeerdeVierkantemeterprijs = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "geindexeerdeVierkantemeterprijs":
                            geindexeerdeVierkantemeterprijs = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "verkoopdatum":
                            verkoopdatum = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "adres":
                            adres = new Option<Adres?>(JsonSerializer.Deserialize<Adres>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "object":
                            varObject = new Option<Objectdata?>(JsonSerializer.Deserialize<Objectdata>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "cbsIndeling":
                            cbsIndeling = new Option<CbsIndeling?>(JsonSerializer.Deserialize<CbsIndeling>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "fotos":
                            fotos = new Option<Collection<Foto>?>(JsonSerializer.Deserialize<Collection<Foto>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "bijzonderheden":
                            bijzonderheden = new Option<Collection<VerkoopBijzonderheden>?>(JsonSerializer.Deserialize<Collection<VerkoopBijzonderheden>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (afstand.IsSet && afstand.Value == null)
                throw new ArgumentNullException(nameof(afstand), "Property is not nullable for class Referentieobject.");

            if (verkoopprijs.IsSet && verkoopprijs.Value == null)
                throw new ArgumentNullException(nameof(verkoopprijs), "Property is not nullable for class Referentieobject.");

            if (gecorrigeerdeVerkoopprijs.IsSet && gecorrigeerdeVerkoopprijs.Value == null)
                throw new ArgumentNullException(nameof(gecorrigeerdeVerkoopprijs), "Property is not nullable for class Referentieobject.");

            if (geindexeerdeVerkoopprijs.IsSet && geindexeerdeVerkoopprijs.Value == null)
                throw new ArgumentNullException(nameof(geindexeerdeVerkoopprijs), "Property is not nullable for class Referentieobject.");

            if (vierkantemeterprijs.IsSet && vierkantemeterprijs.Value == null)
                throw new ArgumentNullException(nameof(vierkantemeterprijs), "Property is not nullable for class Referentieobject.");

            if (gecorrigeerdeVierkantemeterprijs.IsSet && gecorrigeerdeVierkantemeterprijs.Value == null)
                throw new ArgumentNullException(nameof(gecorrigeerdeVierkantemeterprijs), "Property is not nullable for class Referentieobject.");

            if (geindexeerdeVierkantemeterprijs.IsSet && geindexeerdeVierkantemeterprijs.Value == null)
                throw new ArgumentNullException(nameof(geindexeerdeVierkantemeterprijs), "Property is not nullable for class Referentieobject.");

            if (verkoopdatum.IsSet && verkoopdatum.Value == null)
                throw new ArgumentNullException(nameof(verkoopdatum), "Property is not nullable for class Referentieobject.");

            if (adres.IsSet && adres.Value == null)
                throw new ArgumentNullException(nameof(adres), "Property is not nullable for class Referentieobject.");

            if (varObject.IsSet && varObject.Value == null)
                throw new ArgumentNullException(nameof(varObject), "Property is not nullable for class Referentieobject.");

            if (cbsIndeling.IsSet && cbsIndeling.Value == null)
                throw new ArgumentNullException(nameof(cbsIndeling), "Property is not nullable for class Referentieobject.");

            if (fotos.IsSet && fotos.Value == null)
                throw new ArgumentNullException(nameof(fotos), "Property is not nullable for class Referentieobject.");

            if (bijzonderheden.IsSet && bijzonderheden.Value == null)
                throw new ArgumentNullException(nameof(bijzonderheden), "Property is not nullable for class Referentieobject.");

            return new Referentieobject(afstand, verkoopprijs, gecorrigeerdeVerkoopprijs, geindexeerdeVerkoopprijs, vierkantemeterprijs, gecorrigeerdeVierkantemeterprijs, geindexeerdeVierkantemeterprijs, verkoopdatum, adres, varObject, cbsIndeling, fotos, bijzonderheden);
        }

        /// <summary>
        /// Serializes a <see cref="Referentieobject" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="referentieobject"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Referentieobject referentieobject, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, referentieobject, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Referentieobject" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="referentieobject"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Referentieobject referentieobject, JsonSerializerOptions jsonSerializerOptions)
        {
            if (referentieobject.AdresOption.IsSet && referentieobject.Adres == null)
                throw new ArgumentNullException(nameof(referentieobject.Adres), "Property is required for class Referentieobject.");

            if (referentieobject.ObjectOption.IsSet && referentieobject.Object == null)
                throw new ArgumentNullException(nameof(referentieobject.Object), "Property is required for class Referentieobject.");

            if (referentieobject.CbsIndelingOption.IsSet && referentieobject.CbsIndeling == null)
                throw new ArgumentNullException(nameof(referentieobject.CbsIndeling), "Property is required for class Referentieobject.");

            if (referentieobject.FotosOption.IsSet && referentieobject.Fotos == null)
                throw new ArgumentNullException(nameof(referentieobject.Fotos), "Property is required for class Referentieobject.");

            if (referentieobject.BijzonderhedenOption.IsSet && referentieobject.Bijzonderheden == null)
                throw new ArgumentNullException(nameof(referentieobject.Bijzonderheden), "Property is required for class Referentieobject.");

            if (referentieobject.AfstandOption.IsSet)
                writer.WriteNumber("afstand", referentieobject.AfstandOption.Value!.Value);

            if (referentieobject.VerkoopprijsOption.IsSet)
                writer.WriteNumber("verkoopprijs", referentieobject.VerkoopprijsOption.Value!.Value);

            if (referentieobject.GecorrigeerdeVerkoopprijsOption.IsSet)
                writer.WriteNumber("gecorrigeerdeVerkoopprijs", referentieobject.GecorrigeerdeVerkoopprijsOption.Value!.Value);

            if (referentieobject.GeindexeerdeVerkoopprijsOption.IsSet)
                writer.WriteNumber("geindexeerdeVerkoopprijs", referentieobject.GeindexeerdeVerkoopprijsOption.Value!.Value);

            if (referentieobject.VierkantemeterprijsOption.IsSet)
                writer.WriteNumber("vierkantemeterprijs", referentieobject.VierkantemeterprijsOption.Value!.Value);

            if (referentieobject.GecorrigeerdeVierkantemeterprijsOption.IsSet)
                writer.WriteNumber("gecorrigeerdeVierkantemeterprijs", referentieobject.GecorrigeerdeVierkantemeterprijsOption.Value!.Value);

            if (referentieobject.GeindexeerdeVierkantemeterprijsOption.IsSet)
                writer.WriteNumber("geindexeerdeVierkantemeterprijs", referentieobject.GeindexeerdeVierkantemeterprijsOption.Value!.Value);

            if (referentieobject.VerkoopdatumOption.IsSet)
                writer.WriteString("verkoopdatum", referentieobject.VerkoopdatumOption.Value!.Value.ToString(VerkoopdatumFormat));

            if (referentieobject.AdresOption.IsSet)
            {
                writer.WritePropertyName("adres");
                JsonSerializer.Serialize(writer, referentieobject.Adres, jsonSerializerOptions);
            }
            if (referentieobject.ObjectOption.IsSet)
            {
                writer.WritePropertyName("object");
                JsonSerializer.Serialize(writer, referentieobject.Object, jsonSerializerOptions);
            }
            if (referentieobject.CbsIndelingOption.IsSet)
            {
                writer.WritePropertyName("cbsIndeling");
                JsonSerializer.Serialize(writer, referentieobject.CbsIndeling, jsonSerializerOptions);
            }
            if (referentieobject.FotosOption.IsSet)
            {
                writer.WritePropertyName("fotos");
                JsonSerializer.Serialize(writer, referentieobject.Fotos, jsonSerializerOptions);
            }
            if (referentieobject.BijzonderhedenOption.IsSet)
            {
                writer.WritePropertyName("bijzonderheden");
                JsonSerializer.Serialize(writer, referentieobject.Bijzonderheden, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The ReferentieobjectSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(Referentieobject))]
    public partial class ReferentieobjectSerializationContext : JsonSerializerContext { }
}
