/*
 * Copyright 2023 Calcasa B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Calcasa Public API v1
 *
 * The version of the OpenAPI document: 1.3.1
 * Contact: info@calcasa.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = Calcasa.Api.Client.FileParameter;
using OpenAPIDateConverter = Calcasa.Api.Client.OpenAPIDateConverter;

namespace Calcasa.Api.Model
{
    /// <summary>
    /// De payload van de webhooks die verstuurd worden op het moment dat een klant toestemming geeft voor het delen van een waardering.
    /// </summary>
    [DataContract(Name = "DeelWaarderingWebhookPayload")]
    public partial class DeelWaarderingWebhookPayload : IEquatable<DeelWaarderingWebhookPayload>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeelWaarderingWebhookPayload" /> class.
        /// </summary>
        /// <param name="eventId">Uniek Id voor deze callback..</param>
        /// <param name="waarderingId">Het Id van de waardering waarop deze callback betrekking heeft..</param>
        /// <param name="timestamp">Het tijdstip van het event, in UTC..</param>
        public DeelWaarderingWebhookPayload(Guid eventId = default(Guid), Guid waarderingId = default(Guid), DateTime timestamp = default(DateTime))
        {
            this.EventId = eventId;
            this.WaarderingId = waarderingId;
            this.Timestamp = timestamp;
        }

        /// <summary>
        /// Gets or Sets CallbackName
        /// </summary>
        [DataMember(Name = "callbackName", EmitDefaultValue = false)]
        public string CallbackName { get; private set; }

        /// <summary>
        /// Returns false as CallbackName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCallbackName()
        {
            return false;
        }
        /// <summary>
        /// Uniek Id voor deze callback.
        /// </summary>
        /// <value>Uniek Id voor deze callback.</value>
        [DataMember(Name = "eventId", EmitDefaultValue = false)]
        public Guid EventId { get; set; }

        /// <summary>
        /// Het Id van de waardering waarop deze callback betrekking heeft.
        /// </summary>
        /// <value>Het Id van de waardering waarop deze callback betrekking heeft.</value>
        [DataMember(Name = "waarderingId", EmitDefaultValue = false)]
        public Guid WaarderingId { get; set; }

        /// <summary>
        /// Het tijdstip van het event, in UTC.
        /// </summary>
        /// <value>Het tijdstip van het event, in UTC.</value>
        [DataMember(Name = "timestamp", EmitDefaultValue = false)]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeelWaarderingWebhookPayload {\n");
            sb.Append("  CallbackName: ").Append(CallbackName).Append("\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  WaarderingId: ").Append(WaarderingId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeelWaarderingWebhookPayload);
        }

        /// <summary>
        /// Returns true if DeelWaarderingWebhookPayload instances are equal
        /// </summary>
        /// <param name="input">Instance of DeelWaarderingWebhookPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeelWaarderingWebhookPayload input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CallbackName == input.CallbackName ||
                    (this.CallbackName != null &&
                    this.CallbackName.Equals(input.CallbackName))
                ) && 
                (
                    this.EventId == input.EventId ||
                    (this.EventId != null &&
                    this.EventId.Equals(input.EventId))
                ) && 
                (
                    this.WaarderingId == input.WaarderingId ||
                    (this.WaarderingId != null &&
                    this.WaarderingId.Equals(input.WaarderingId))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CallbackName != null)
                {
                    hashCode = (hashCode * 59) + this.CallbackName.GetHashCode();
                }
                if (this.EventId != null)
                {
                    hashCode = (hashCode * 59) + this.EventId.GetHashCode();
                }
                if (this.WaarderingId != null)
                {
                    hashCode = (hashCode * 59) + this.WaarderingId.GetHashCode();
                }
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
