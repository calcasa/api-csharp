// <auto-generated>
/*
 * Copyright 2025 Calcasa B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Calcasa Public API
 *
 * The Calcasa API is used to connect to Calcasa provided services. For more information, please visit [Documentation](https://docs.calcasa.nl) or [GitHub](https://github.com/calcasa/api).
 *
 * The version of the OpenAPI document: 1.4.0-rc1
 * Contact: info@calcasa.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using Calcasa.Api.Client;

namespace Calcasa.Api.Model
{
    /// <summary>
    /// Het product type voor een waardering. Deze moeten handmatig aangezet worden voor de gebruikte credentails. | Waarde | Omschrijving | | - -- | - -- | | &#x60;onbekend&#x60; | Geen geldige invoer. Onbekend product type. | | &#x60;modelwaardeCalcasa&#x60; | Niet beschikbaar op dit moment.&lt;br&gt;            Modelwaarde aanvraag met Calcasa Waardebepalingrapport. | | &#x60;modelwaardeRisico&#x60; | Modelwaarde aanvraag met risicorapport. | | &#x60;modelwaardeDesktopTaxatie&#x60; | Modelwaarde aanvraag met Desktop Taxatie Beknoptwaarderapport. | | &#x60;desktopTaxatie&#x60; | Desktop taxatie aanvraag met Desktop Taxatie rapport. | | &#x60;desktopTaxatieHerwaardering&#x60; | Desktop taxatie aanvraag met Desktop Taxatie rapport voor herwaarderingen. |
    /// </summary>
    /// <value>Het product type voor een waardering. Deze moeten handmatig aangezet worden voor de gebruikte credentails. | Waarde | Omschrijving | | - -- | - -- | | &#x60;onbekend&#x60; | Geen geldige invoer. Onbekend product type. | | &#x60;modelwaardeCalcasa&#x60; | Niet beschikbaar op dit moment.&lt;br&gt;            Modelwaarde aanvraag met Calcasa Waardebepalingrapport. | | &#x60;modelwaardeRisico&#x60; | Modelwaarde aanvraag met risicorapport. | | &#x60;modelwaardeDesktopTaxatie&#x60; | Modelwaarde aanvraag met Desktop Taxatie Beknoptwaarderapport. | | &#x60;desktopTaxatie&#x60; | Desktop taxatie aanvraag met Desktop Taxatie rapport. | | &#x60;desktopTaxatieHerwaardering&#x60; | Desktop taxatie aanvraag met Desktop Taxatie rapport voor herwaarderingen. |</value>
    public enum ProductType
    {
        /// <summary>
        /// Enum Onbekend for value: onbekend
        /// </summary>
        Onbekend,

        /// <summary>
        /// Enum ModelwaardeCalcasa for value: modelwaardeCalcasa
        /// </summary>
        ModelwaardeCalcasa,

        /// <summary>
        /// Enum ModelwaardeRisico for value: modelwaardeRisico
        /// </summary>
        ModelwaardeRisico,

        /// <summary>
        /// Enum ModelwaardeDesktopTaxatie for value: modelwaardeDesktopTaxatie
        /// </summary>
        ModelwaardeDesktopTaxatie,

        /// <summary>
        /// Enum DesktopTaxatie for value: desktopTaxatie
        /// </summary>
        DesktopTaxatie,

        /// <summary>
        /// Enum DesktopTaxatieHerwaardering for value: desktopTaxatieHerwaardering
        /// </summary>
        DesktopTaxatieHerwaardering
    }

    /// <summary>
    /// Converts <see cref="ProductType"/> to and from the JSON value
    /// </summary>
    public static class ProductTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ProductType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ProductType FromString(string value)
        {
            if (value.Equals("onbekend"))
                return ProductType.Onbekend;

            if (value.Equals("modelwaardeCalcasa"))
                return ProductType.ModelwaardeCalcasa;

            if (value.Equals("modelwaardeRisico"))
                return ProductType.ModelwaardeRisico;

            if (value.Equals("modelwaardeDesktopTaxatie"))
                return ProductType.ModelwaardeDesktopTaxatie;

            if (value.Equals("desktopTaxatie"))
                return ProductType.DesktopTaxatie;

            if (value.Equals("desktopTaxatieHerwaardering"))
                return ProductType.DesktopTaxatieHerwaardering;

            throw new NotImplementedException($"Could not convert value to type ProductType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="ProductType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ProductType? FromStringOrDefault(string value)
        {
            if (value.Equals("onbekend"))
                return ProductType.Onbekend;

            if (value.Equals("modelwaardeCalcasa"))
                return ProductType.ModelwaardeCalcasa;

            if (value.Equals("modelwaardeRisico"))
                return ProductType.ModelwaardeRisico;

            if (value.Equals("modelwaardeDesktopTaxatie"))
                return ProductType.ModelwaardeDesktopTaxatie;

            if (value.Equals("desktopTaxatie"))
                return ProductType.DesktopTaxatie;

            if (value.Equals("desktopTaxatieHerwaardering"))
                return ProductType.DesktopTaxatieHerwaardering;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ProductType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(ProductType value)
        {
            if (value == ProductType.Onbekend)
                return "onbekend";

            if (value == ProductType.ModelwaardeCalcasa)
                return "modelwaardeCalcasa";

            if (value == ProductType.ModelwaardeRisico)
                return "modelwaardeRisico";

            if (value == ProductType.ModelwaardeDesktopTaxatie)
                return "modelwaardeDesktopTaxatie";

            if (value == ProductType.DesktopTaxatie)
                return "desktopTaxatie";

            if (value == ProductType.DesktopTaxatieHerwaardering)
                return "desktopTaxatieHerwaardering";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ProductType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ProductTypeJsonConverter : JsonConverter<ProductType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ProductType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ProductType? result = rawValue == null
                ? null
                : ProductTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ProductType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="productType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ProductType productType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(productType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ProductType"/>
    /// </summary>
    public class ProductTypeNullableJsonConverter : JsonConverter<ProductType?>
    {
        /// <summary>
        /// Returns a ProductType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ProductType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ProductType? result = rawValue == null
                ? null
                : ProductTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="productType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ProductType? productType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(productType?.ToString() ?? "null");
        }
    }


    /// <summary>
    /// The ProductTypeSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(ProductType))]
    public partial class ProductTypeSerializationContext : JsonSerializerContext { }
}
