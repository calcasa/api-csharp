// <auto-generated>
/*
 * Copyright 2025 Calcasa B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Calcasa Public API
 *
 * The Calcasa API is used to connect to Calcasa provided services. For more information, please visit [Documentation](https://docs.calcasa.nl) or [GitHub](https://github.com/calcasa/api).
 *
 * The version of the OpenAPI document: 1.4.0-rc1
 * Contact: info@calcasa.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using Calcasa.Api.Client;

namespace Calcasa.Api.Model
{
    /// <summary>
    /// English: Request Goal. | Waarde | Omschrijving | | - -- | - -- | | &#x60;onbekend&#x60; | English: Unknown. | | &#x60;aankoopNieuweWoning&#x60; | English: New Home Purchase. | | &#x60;overbruggingsfinanciering&#x60; | English: Bridge Financing. | | &#x60;hypotheekOversluiten&#x60; | English: Refinancing Mortgage. | | &#x60;hypotheekOphogen&#x60; | English: Increasing Mortage. | | &#x60;hypotheekWijziging&#x60; | English: Changing Mortgage. | | &#x60;hypotheekrenteWijzigen&#x60; | English: Change Mortgage Intrest. |
    /// </summary>
    /// <value>English: Request Goal. | Waarde | Omschrijving | | - -- | - -- | | &#x60;onbekend&#x60; | English: Unknown. | | &#x60;aankoopNieuweWoning&#x60; | English: New Home Purchase. | | &#x60;overbruggingsfinanciering&#x60; | English: Bridge Financing. | | &#x60;hypotheekOversluiten&#x60; | English: Refinancing Mortgage. | | &#x60;hypotheekOphogen&#x60; | English: Increasing Mortage. | | &#x60;hypotheekWijziging&#x60; | English: Changing Mortgage. | | &#x60;hypotheekrenteWijzigen&#x60; | English: Change Mortgage Intrest. |</value>
    public enum Aanvraagdoel
    {
        /// <summary>
        /// Enum Onbekend for value: onbekend
        /// </summary>
        Onbekend,

        /// <summary>
        /// Enum AankoopNieuweWoning for value: aankoopNieuweWoning
        /// </summary>
        AankoopNieuweWoning,

        /// <summary>
        /// Enum Overbruggingsfinanciering for value: overbruggingsfinanciering
        /// </summary>
        Overbruggingsfinanciering,

        /// <summary>
        /// Enum HypotheekOversluiten for value: hypotheekOversluiten
        /// </summary>
        HypotheekOversluiten,

        /// <summary>
        /// Enum HypotheekOphogen for value: hypotheekOphogen
        /// </summary>
        HypotheekOphogen,

        /// <summary>
        /// Enum HypotheekWijziging for value: hypotheekWijziging
        /// </summary>
        HypotheekWijziging,

        /// <summary>
        /// Enum HypotheekrenteWijzigen for value: hypotheekrenteWijzigen
        /// </summary>
        HypotheekrenteWijzigen
    }

    /// <summary>
    /// Converts <see cref="Aanvraagdoel"/> to and from the JSON value
    /// </summary>
    public static class AanvraagdoelValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="Aanvraagdoel"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Aanvraagdoel FromString(string value)
        {
            if (value.Equals("onbekend"))
                return Aanvraagdoel.Onbekend;

            if (value.Equals("aankoopNieuweWoning"))
                return Aanvraagdoel.AankoopNieuweWoning;

            if (value.Equals("overbruggingsfinanciering"))
                return Aanvraagdoel.Overbruggingsfinanciering;

            if (value.Equals("hypotheekOversluiten"))
                return Aanvraagdoel.HypotheekOversluiten;

            if (value.Equals("hypotheekOphogen"))
                return Aanvraagdoel.HypotheekOphogen;

            if (value.Equals("hypotheekWijziging"))
                return Aanvraagdoel.HypotheekWijziging;

            if (value.Equals("hypotheekrenteWijzigen"))
                return Aanvraagdoel.HypotheekrenteWijzigen;

            throw new NotImplementedException($"Could not convert value to type Aanvraagdoel: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="Aanvraagdoel"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Aanvraagdoel? FromStringOrDefault(string value)
        {
            if (value.Equals("onbekend"))
                return Aanvraagdoel.Onbekend;

            if (value.Equals("aankoopNieuweWoning"))
                return Aanvraagdoel.AankoopNieuweWoning;

            if (value.Equals("overbruggingsfinanciering"))
                return Aanvraagdoel.Overbruggingsfinanciering;

            if (value.Equals("hypotheekOversluiten"))
                return Aanvraagdoel.HypotheekOversluiten;

            if (value.Equals("hypotheekOphogen"))
                return Aanvraagdoel.HypotheekOphogen;

            if (value.Equals("hypotheekWijziging"))
                return Aanvraagdoel.HypotheekWijziging;

            if (value.Equals("hypotheekrenteWijzigen"))
                return Aanvraagdoel.HypotheekrenteWijzigen;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="Aanvraagdoel"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(Aanvraagdoel value)
        {
            if (value == Aanvraagdoel.Onbekend)
                return "onbekend";

            if (value == Aanvraagdoel.AankoopNieuweWoning)
                return "aankoopNieuweWoning";

            if (value == Aanvraagdoel.Overbruggingsfinanciering)
                return "overbruggingsfinanciering";

            if (value == Aanvraagdoel.HypotheekOversluiten)
                return "hypotheekOversluiten";

            if (value == Aanvraagdoel.HypotheekOphogen)
                return "hypotheekOphogen";

            if (value == Aanvraagdoel.HypotheekWijziging)
                return "hypotheekWijziging";

            if (value == Aanvraagdoel.HypotheekrenteWijzigen)
                return "hypotheekrenteWijzigen";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Aanvraagdoel"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class AanvraagdoelJsonConverter : JsonConverter<Aanvraagdoel>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Aanvraagdoel Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Aanvraagdoel? result = rawValue == null
                ? null
                : AanvraagdoelValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the Aanvraagdoel to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="aanvraagdoel"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Aanvraagdoel aanvraagdoel, JsonSerializerOptions options)
        {
            writer.WriteStringValue(aanvraagdoel.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Aanvraagdoel"/>
    /// </summary>
    public class AanvraagdoelNullableJsonConverter : JsonConverter<Aanvraagdoel?>
    {
        /// <summary>
        /// Returns a Aanvraagdoel from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Aanvraagdoel? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Aanvraagdoel? result = rawValue == null
                ? null
                : AanvraagdoelValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="aanvraagdoel"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Aanvraagdoel? aanvraagdoel, JsonSerializerOptions options)
        {
            writer.WriteStringValue(aanvraagdoel?.ToString() ?? "null");
        }
    }


    /// <summary>
    /// The AanvraagdoelSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(Aanvraagdoel))]
    public partial class AanvraagdoelSerializationContext : JsonSerializerContext { }
}
