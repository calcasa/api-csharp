// <auto-generated>
/*
 * Copyright 2025 Calcasa B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Calcasa Public API
 *
 * The Calcasa API is used to connect to Calcasa provided services. For more information, please visit [Documentation](https://docs.calcasa.nl) or [GitHub](https://github.com/calcasa/api).
 *
 * The version of the OpenAPI document: 1.4.0-rc1
 * Contact: info@calcasa.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using Calcasa.Api.Client;

namespace Calcasa.Api.Model
{
    /// <summary>
    /// Reden voor het niet voldoen aan de business rules. | Waarde | Omschrijving | | - -- | - -- | | &#x60;geenWaardebepalingMogelijk&#x60; | De ingevoerde woning kan modelmatig niet goed genoeg worden vastgesteld. | | &#x60;geenBestaandeWoning&#x60; | Geen bestaande koopwoning. | | &#x60;fouteOfOntbrekendeInvoer&#x60; | Noodzakelijke invoer ontbreekt of is foutief ingevoerd. | | &#x60;calcasaWaardeTeHoog&#x60; | Calcasa-waarde is te hoog volgens de business rules. | | &#x60;ltvTeHoog&#x60; | Loan-to-value is te hoog volgens de business rules. | | &#x60;hypotheekTeHoog&#x60; | Hypotheekbedrag is te hoog volgens de business rules. | | &#x60;woningtypeIncorrect&#x60; | Woningtype is incorrect volgens de business rules. | | &#x60;calcasaWaardeTeLaag&#x60; | Calcasa-waarde is te laag volgens de business rules. | | &#x60;calcasaWaardeTeHoogVoorNhg&#x60; | Calcasa-waarde is te hoog voor een NHG-waardering volgens de business rules. | | &#x60;calcasaWaardeEnKoopsomTeHoogVoorNhg&#x60; | Calcasa-waarde en ingevoerde koopsom zijn te hoog voor een NHG-waardering volgens de business rules. | | &#x60;ltvTeHoogOverbrugging&#x60; | Loan-to-value is te hoog voor deze overbrugging volgens de business rules. |
    /// </summary>
    /// <value>Reden voor het niet voldoen aan de business rules. | Waarde | Omschrijving | | - -- | - -- | | &#x60;geenWaardebepalingMogelijk&#x60; | De ingevoerde woning kan modelmatig niet goed genoeg worden vastgesteld. | | &#x60;geenBestaandeWoning&#x60; | Geen bestaande koopwoning. | | &#x60;fouteOfOntbrekendeInvoer&#x60; | Noodzakelijke invoer ontbreekt of is foutief ingevoerd. | | &#x60;calcasaWaardeTeHoog&#x60; | Calcasa-waarde is te hoog volgens de business rules. | | &#x60;ltvTeHoog&#x60; | Loan-to-value is te hoog volgens de business rules. | | &#x60;hypotheekTeHoog&#x60; | Hypotheekbedrag is te hoog volgens de business rules. | | &#x60;woningtypeIncorrect&#x60; | Woningtype is incorrect volgens de business rules. | | &#x60;calcasaWaardeTeLaag&#x60; | Calcasa-waarde is te laag volgens de business rules. | | &#x60;calcasaWaardeTeHoogVoorNhg&#x60; | Calcasa-waarde is te hoog voor een NHG-waardering volgens de business rules. | | &#x60;calcasaWaardeEnKoopsomTeHoogVoorNhg&#x60; | Calcasa-waarde en ingevoerde koopsom zijn te hoog voor een NHG-waardering volgens de business rules. | | &#x60;ltvTeHoogOverbrugging&#x60; | Loan-to-value is te hoog voor deze overbrugging volgens de business rules. |</value>
    public enum BusinessRulesCode
    {
        /// <summary>
        /// Enum GeenWaardebepalingMogelijk for value: geenWaardebepalingMogelijk
        /// </summary>
        GeenWaardebepalingMogelijk,

        /// <summary>
        /// Enum GeenBestaandeWoning for value: geenBestaandeWoning
        /// </summary>
        GeenBestaandeWoning,

        /// <summary>
        /// Enum FouteOfOntbrekendeInvoer for value: fouteOfOntbrekendeInvoer
        /// </summary>
        FouteOfOntbrekendeInvoer,

        /// <summary>
        /// Enum CalcasaWaardeTeHoog for value: calcasaWaardeTeHoog
        /// </summary>
        CalcasaWaardeTeHoog,

        /// <summary>
        /// Enum LtvTeHoog for value: ltvTeHoog
        /// </summary>
        LtvTeHoog,

        /// <summary>
        /// Enum HypotheekTeHoog for value: hypotheekTeHoog
        /// </summary>
        HypotheekTeHoog,

        /// <summary>
        /// Enum WoningtypeIncorrect for value: woningtypeIncorrect
        /// </summary>
        WoningtypeIncorrect,

        /// <summary>
        /// Enum CalcasaWaardeTeLaag for value: calcasaWaardeTeLaag
        /// </summary>
        CalcasaWaardeTeLaag,

        /// <summary>
        /// Enum CalcasaWaardeTeHoogVoorNhg for value: calcasaWaardeTeHoogVoorNhg
        /// </summary>
        CalcasaWaardeTeHoogVoorNhg,

        /// <summary>
        /// Enum CalcasaWaardeEnKoopsomTeHoogVoorNhg for value: calcasaWaardeEnKoopsomTeHoogVoorNhg
        /// </summary>
        CalcasaWaardeEnKoopsomTeHoogVoorNhg,

        /// <summary>
        /// Enum LtvTeHoogOverbrugging for value: ltvTeHoogOverbrugging
        /// </summary>
        LtvTeHoogOverbrugging
    }

    /// <summary>
    /// Converts <see cref="BusinessRulesCode"/> to and from the JSON value
    /// </summary>
    public static class BusinessRulesCodeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="BusinessRulesCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static BusinessRulesCode FromString(string value)
        {
            if (value.Equals("geenWaardebepalingMogelijk"))
                return BusinessRulesCode.GeenWaardebepalingMogelijk;

            if (value.Equals("geenBestaandeWoning"))
                return BusinessRulesCode.GeenBestaandeWoning;

            if (value.Equals("fouteOfOntbrekendeInvoer"))
                return BusinessRulesCode.FouteOfOntbrekendeInvoer;

            if (value.Equals("calcasaWaardeTeHoog"))
                return BusinessRulesCode.CalcasaWaardeTeHoog;

            if (value.Equals("ltvTeHoog"))
                return BusinessRulesCode.LtvTeHoog;

            if (value.Equals("hypotheekTeHoog"))
                return BusinessRulesCode.HypotheekTeHoog;

            if (value.Equals("woningtypeIncorrect"))
                return BusinessRulesCode.WoningtypeIncorrect;

            if (value.Equals("calcasaWaardeTeLaag"))
                return BusinessRulesCode.CalcasaWaardeTeLaag;

            if (value.Equals("calcasaWaardeTeHoogVoorNhg"))
                return BusinessRulesCode.CalcasaWaardeTeHoogVoorNhg;

            if (value.Equals("calcasaWaardeEnKoopsomTeHoogVoorNhg"))
                return BusinessRulesCode.CalcasaWaardeEnKoopsomTeHoogVoorNhg;

            if (value.Equals("ltvTeHoogOverbrugging"))
                return BusinessRulesCode.LtvTeHoogOverbrugging;

            throw new NotImplementedException($"Could not convert value to type BusinessRulesCode: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="BusinessRulesCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static BusinessRulesCode? FromStringOrDefault(string value)
        {
            if (value.Equals("geenWaardebepalingMogelijk"))
                return BusinessRulesCode.GeenWaardebepalingMogelijk;

            if (value.Equals("geenBestaandeWoning"))
                return BusinessRulesCode.GeenBestaandeWoning;

            if (value.Equals("fouteOfOntbrekendeInvoer"))
                return BusinessRulesCode.FouteOfOntbrekendeInvoer;

            if (value.Equals("calcasaWaardeTeHoog"))
                return BusinessRulesCode.CalcasaWaardeTeHoog;

            if (value.Equals("ltvTeHoog"))
                return BusinessRulesCode.LtvTeHoog;

            if (value.Equals("hypotheekTeHoog"))
                return BusinessRulesCode.HypotheekTeHoog;

            if (value.Equals("woningtypeIncorrect"))
                return BusinessRulesCode.WoningtypeIncorrect;

            if (value.Equals("calcasaWaardeTeLaag"))
                return BusinessRulesCode.CalcasaWaardeTeLaag;

            if (value.Equals("calcasaWaardeTeHoogVoorNhg"))
                return BusinessRulesCode.CalcasaWaardeTeHoogVoorNhg;

            if (value.Equals("calcasaWaardeEnKoopsomTeHoogVoorNhg"))
                return BusinessRulesCode.CalcasaWaardeEnKoopsomTeHoogVoorNhg;

            if (value.Equals("ltvTeHoogOverbrugging"))
                return BusinessRulesCode.LtvTeHoogOverbrugging;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="BusinessRulesCode"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(BusinessRulesCode value)
        {
            if (value == BusinessRulesCode.GeenWaardebepalingMogelijk)
                return "geenWaardebepalingMogelijk";

            if (value == BusinessRulesCode.GeenBestaandeWoning)
                return "geenBestaandeWoning";

            if (value == BusinessRulesCode.FouteOfOntbrekendeInvoer)
                return "fouteOfOntbrekendeInvoer";

            if (value == BusinessRulesCode.CalcasaWaardeTeHoog)
                return "calcasaWaardeTeHoog";

            if (value == BusinessRulesCode.LtvTeHoog)
                return "ltvTeHoog";

            if (value == BusinessRulesCode.HypotheekTeHoog)
                return "hypotheekTeHoog";

            if (value == BusinessRulesCode.WoningtypeIncorrect)
                return "woningtypeIncorrect";

            if (value == BusinessRulesCode.CalcasaWaardeTeLaag)
                return "calcasaWaardeTeLaag";

            if (value == BusinessRulesCode.CalcasaWaardeTeHoogVoorNhg)
                return "calcasaWaardeTeHoogVoorNhg";

            if (value == BusinessRulesCode.CalcasaWaardeEnKoopsomTeHoogVoorNhg)
                return "calcasaWaardeEnKoopsomTeHoogVoorNhg";

            if (value == BusinessRulesCode.LtvTeHoogOverbrugging)
                return "ltvTeHoogOverbrugging";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BusinessRulesCode"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class BusinessRulesCodeJsonConverter : JsonConverter<BusinessRulesCode>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override BusinessRulesCode Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            BusinessRulesCode? result = rawValue == null
                ? null
                : BusinessRulesCodeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the BusinessRulesCode to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="businessRulesCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, BusinessRulesCode businessRulesCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(businessRulesCode.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BusinessRulesCode"/>
    /// </summary>
    public class BusinessRulesCodeNullableJsonConverter : JsonConverter<BusinessRulesCode?>
    {
        /// <summary>
        /// Returns a BusinessRulesCode from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override BusinessRulesCode? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            BusinessRulesCode? result = rawValue == null
                ? null
                : BusinessRulesCodeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="businessRulesCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, BusinessRulesCode? businessRulesCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(businessRulesCode?.ToString() ?? "null");
        }
    }


    /// <summary>
    /// The BusinessRulesCodeSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(BusinessRulesCode))]
    public partial class BusinessRulesCodeSerializationContext : JsonSerializerContext { }
}
