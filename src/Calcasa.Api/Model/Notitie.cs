// <auto-generated>
/*
 * Copyright 2025 Calcasa B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Calcasa Public API
 *
 * The Calcasa API is used to connect to Calcasa provided services. For more information, please visit [Documentation](https://docs.calcasa.nl) or [GitHub](https://github.com/calcasa/api).
 *
 * The version of the OpenAPI document: 1.4.0-rc2
 * Contact: info@calcasa.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using System.Text.RegularExpressions;
using Calcasa.Api.Client;

namespace Calcasa.Api.Model
{
    /// <summary>
    /// | Waarde | Omschrijving | | - -- | - -- | | &#x60;geen&#x60; | De input was correct. | | &#x60;gecorrigeerd&#x60; | De input was gecorrigeerd. | | &#x60;onbekend&#x60; | De input is onbekend en kon niet gevonden of gecorrigeerd worden. | | &#x60;ontbreekt&#x60; | De input was leeg en is wel nodig voor een succesvolle zoekopdracht. |
    /// </summary>
    /// <value>| Waarde | Omschrijving | | - -- | - -- | | &#x60;geen&#x60; | De input was correct. | | &#x60;gecorrigeerd&#x60; | De input was gecorrigeerd. | | &#x60;onbekend&#x60; | De input is onbekend en kon niet gevonden of gecorrigeerd worden. | | &#x60;ontbreekt&#x60; | De input was leeg en is wel nodig voor een succesvolle zoekopdracht. |</value>
    public enum Notitie
    {
        /// <summary>
        /// Enum Geen for value: geen
        /// </summary>
        Geen,

        /// <summary>
        /// Enum Gecorrigeerd for value: gecorrigeerd
        /// </summary>
        Gecorrigeerd,

        /// <summary>
        /// Enum Onbekend for value: onbekend
        /// </summary>
        Onbekend,

        /// <summary>
        /// Enum Ontbreekt for value: ontbreekt
        /// </summary>
        Ontbreekt
    }

    /// <summary>
    /// Converts <see cref="Notitie"/> to and from the JSON value
    /// </summary>
    public static class NotitieValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="Notitie"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Notitie FromString(string value)
        {
            if (value.Equals("geen"))
                return Notitie.Geen;

            if (value.Equals("gecorrigeerd"))
                return Notitie.Gecorrigeerd;

            if (value.Equals("onbekend"))
                return Notitie.Onbekend;

            if (value.Equals("ontbreekt"))
                return Notitie.Ontbreekt;

            throw new NotImplementedException($"Could not convert value to type Notitie: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="Notitie"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Notitie? FromStringOrDefault(string value)
        {
            if (value.Equals("geen"))
                return Notitie.Geen;

            if (value.Equals("gecorrigeerd"))
                return Notitie.Gecorrigeerd;

            if (value.Equals("onbekend"))
                return Notitie.Onbekend;

            if (value.Equals("ontbreekt"))
                return Notitie.Ontbreekt;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="Notitie"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(Notitie value)
        {
            if (value == Notitie.Geen)
                return "geen";

            if (value == Notitie.Gecorrigeerd)
                return "gecorrigeerd";

            if (value == Notitie.Onbekend)
                return "onbekend";

            if (value == Notitie.Ontbreekt)
                return "ontbreekt";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Notitie"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class NotitieJsonConverter : JsonConverter<Notitie>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Notitie Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Notitie? result = rawValue == null
                ? null
                : NotitieValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the Notitie to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="notitie"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Notitie notitie, JsonSerializerOptions options)
        {
            writer.WriteStringValue(NotitieValueConverter.ToJsonValue(notitie).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Notitie"/>
    /// </summary>
    public class NotitieNullableJsonConverter : JsonConverter<Notitie?>
    {
        /// <summary>
        /// Returns a Notitie from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Notitie? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Notitie? result = rawValue == null
                ? null
                : NotitieValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the Notitie to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="notitie"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Notitie? notitie, JsonSerializerOptions options)
        {
            writer.WriteStringValue(notitie.HasValue ? NotitieValueConverter.ToJsonValue(notitie.Value).ToString() : "null");
        }
    }


    /// <summary>
    /// The NotitieSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(Notitie))]
    public partial class NotitieSerializationContext : JsonSerializerContext { }
}
