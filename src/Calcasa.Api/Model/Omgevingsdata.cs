// <auto-generated>
/*
 * Copyright 2025 Calcasa B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Calcasa Public API
 *
 * The Calcasa API is used to connect to Calcasa provided services. For more information, please visit [Documentation](https://docs.calcasa.nl) or [GitHub](https://github.com/calcasa/api).
 *
 * The version of the OpenAPI document: 1.4.0-rc3
 * Contact: info@calcasa.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using System.Text.RegularExpressions;
using Calcasa.Api.Client;

namespace Calcasa.Api.Model
{
    /// <summary>
    /// Omgevingsdata
    /// </summary>
    public partial class Omgevingsdata
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Omgevingsdata" /> class.
        /// </summary>
        /// <param name="buurt">buurt</param>
        /// <param name="wijk">wijk</param>
        /// <param name="gemeente">gemeente</param>
        /// <param name="provincie">provincie</param>
        /// <param name="land">land</param>
        [JsonConstructor]
        public Omgevingsdata(Option<Gebiedsdata?> buurt = default, Option<Gebiedsdata?> wijk = default, Option<Gebiedsdata?> gemeente = default, Option<Gebiedsdata?> provincie = default, Option<Gebiedsdata?> land = default)
        {
            BuurtOption = buurt;
            WijkOption = wijk;
            GemeenteOption = gemeente;
            ProvincieOption = provincie;
            LandOption = land;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Buurt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Gebiedsdata?> BuurtOption { get; private set; }

        /// <summary>
        /// Gets or Sets Buurt
        /// </summary>
        [JsonPropertyName("buurt")]
        public Gebiedsdata? Buurt { get { return this.BuurtOption; } set { this.BuurtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Wijk
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Gebiedsdata?> WijkOption { get; private set; }

        /// <summary>
        /// Gets or Sets Wijk
        /// </summary>
        [JsonPropertyName("wijk")]
        public Gebiedsdata? Wijk { get { return this.WijkOption; } set { this.WijkOption = new(value); } }

        /// <summary>
        /// Used to track the state of Gemeente
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Gebiedsdata?> GemeenteOption { get; private set; }

        /// <summary>
        /// Gets or Sets Gemeente
        /// </summary>
        [JsonPropertyName("gemeente")]
        public Gebiedsdata? Gemeente { get { return this.GemeenteOption; } set { this.GemeenteOption = new(value); } }

        /// <summary>
        /// Used to track the state of Provincie
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Gebiedsdata?> ProvincieOption { get; private set; }

        /// <summary>
        /// Gets or Sets Provincie
        /// </summary>
        [JsonPropertyName("provincie")]
        public Gebiedsdata? Provincie { get { return this.ProvincieOption; } set { this.ProvincieOption = new(value); } }

        /// <summary>
        /// Used to track the state of Land
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Gebiedsdata?> LandOption { get; private set; }

        /// <summary>
        /// Gets or Sets Land
        /// </summary>
        [JsonPropertyName("land")]
        public Gebiedsdata? Land { get { return this.LandOption; } set { this.LandOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Omgevingsdata {\n");
            sb.Append("  Buurt: ").Append(Buurt).Append("\n");
            sb.Append("  Wijk: ").Append(Wijk).Append("\n");
            sb.Append("  Gemeente: ").Append(Gemeente).Append("\n");
            sb.Append("  Provincie: ").Append(Provincie).Append("\n");
            sb.Append("  Land: ").Append(Land).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Omgevingsdata" />
    /// </summary>
    public class OmgevingsdataJsonConverter : JsonConverter<Omgevingsdata>
    {
        /// <summary>
        /// Deserializes json to <see cref="Omgevingsdata" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Omgevingsdata Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Gebiedsdata?> buurt = default;
            Option<Gebiedsdata?> wijk = default;
            Option<Gebiedsdata?> gemeente = default;
            Option<Gebiedsdata?> provincie = default;
            Option<Gebiedsdata?> land = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "buurt":
                            buurt = new Option<Gebiedsdata?>(JsonSerializer.Deserialize<Gebiedsdata>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "wijk":
                            wijk = new Option<Gebiedsdata?>(JsonSerializer.Deserialize<Gebiedsdata>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "gemeente":
                            gemeente = new Option<Gebiedsdata?>(JsonSerializer.Deserialize<Gebiedsdata>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "provincie":
                            provincie = new Option<Gebiedsdata?>(JsonSerializer.Deserialize<Gebiedsdata>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "land":
                            land = new Option<Gebiedsdata?>(JsonSerializer.Deserialize<Gebiedsdata>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (buurt.IsSet && buurt.Value == null)
                throw new ArgumentNullException(nameof(buurt), "Property is not nullable for class Omgevingsdata.");

            if (wijk.IsSet && wijk.Value == null)
                throw new ArgumentNullException(nameof(wijk), "Property is not nullable for class Omgevingsdata.");

            if (gemeente.IsSet && gemeente.Value == null)
                throw new ArgumentNullException(nameof(gemeente), "Property is not nullable for class Omgevingsdata.");

            if (provincie.IsSet && provincie.Value == null)
                throw new ArgumentNullException(nameof(provincie), "Property is not nullable for class Omgevingsdata.");

            if (land.IsSet && land.Value == null)
                throw new ArgumentNullException(nameof(land), "Property is not nullable for class Omgevingsdata.");

            return new Omgevingsdata(buurt, wijk, gemeente, provincie, land);
        }

        /// <summary>
        /// Serializes a <see cref="Omgevingsdata" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="omgevingsdata"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Omgevingsdata omgevingsdata, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, omgevingsdata, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Omgevingsdata" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="omgevingsdata"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Omgevingsdata omgevingsdata, JsonSerializerOptions jsonSerializerOptions)
        {
            if (omgevingsdata.BuurtOption.IsSet && omgevingsdata.Buurt == null)
                throw new ArgumentNullException(nameof(omgevingsdata.Buurt), "Property is required for class Omgevingsdata.");

            if (omgevingsdata.WijkOption.IsSet && omgevingsdata.Wijk == null)
                throw new ArgumentNullException(nameof(omgevingsdata.Wijk), "Property is required for class Omgevingsdata.");

            if (omgevingsdata.GemeenteOption.IsSet && omgevingsdata.Gemeente == null)
                throw new ArgumentNullException(nameof(omgevingsdata.Gemeente), "Property is required for class Omgevingsdata.");

            if (omgevingsdata.ProvincieOption.IsSet && omgevingsdata.Provincie == null)
                throw new ArgumentNullException(nameof(omgevingsdata.Provincie), "Property is required for class Omgevingsdata.");

            if (omgevingsdata.LandOption.IsSet && omgevingsdata.Land == null)
                throw new ArgumentNullException(nameof(omgevingsdata.Land), "Property is required for class Omgevingsdata.");

            if (omgevingsdata.BuurtOption.IsSet)
            {
                writer.WritePropertyName("buurt");
                JsonSerializer.Serialize(writer, omgevingsdata.Buurt, jsonSerializerOptions);
            }
            if (omgevingsdata.WijkOption.IsSet)
            {
                writer.WritePropertyName("wijk");
                JsonSerializer.Serialize(writer, omgevingsdata.Wijk, jsonSerializerOptions);
            }
            if (omgevingsdata.GemeenteOption.IsSet)
            {
                writer.WritePropertyName("gemeente");
                JsonSerializer.Serialize(writer, omgevingsdata.Gemeente, jsonSerializerOptions);
            }
            if (omgevingsdata.ProvincieOption.IsSet)
            {
                writer.WritePropertyName("provincie");
                JsonSerializer.Serialize(writer, omgevingsdata.Provincie, jsonSerializerOptions);
            }
            if (omgevingsdata.LandOption.IsSet)
            {
                writer.WritePropertyName("land");
                JsonSerializer.Serialize(writer, omgevingsdata.Land, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The OmgevingsdataSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(Omgevingsdata))]
    public partial class OmgevingsdataSerializationContext : JsonSerializerContext { }
}
