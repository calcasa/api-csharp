/*
 * Copyright 2023 Calcasa B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Calcasa Public API v1
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: info@calcasa.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = Calcasa.Api.Client.FileParameter;
using OpenAPIDateConverter = Calcasa.Api.Client.OpenAPIDateConverter;

namespace Calcasa.Api.Model
{
    /// <summary>
    /// EnergielabelData
    /// </summary>
    [DataContract(Name = "EnergielabelData")]
    public partial class EnergielabelData : IEquatable<EnergielabelData>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergielabelData" /> class.
        /// </summary>
        /// <param name="aantalSterren">Het aantal sterren van het energielabel. 1 is voorlopig label. 3 is beperkt definitief label (zonder energieprestatie-index). 4 is definitief label met energieprestatie-index..</param>
        /// <param name="geldigTot">De registratiedatum. Beschikbaar voor 2 en 3 sterrenlabels..</param>
        /// <param name="registratiedatum">De datum tot wanneer het label geldig is. Beschikbaar voor 2 en 3 sterrenlabels..</param>
        public EnergielabelData(int? aantalSterren = default(int?), DateTime? geldigTot = default(DateTime?), DateTime? registratiedatum = default(DateTime?))
        {
            this.AantalSterren = aantalSterren;
            this.GeldigTot = geldigTot;
            this.Registratiedatum = registratiedatum;
        }

        /// <summary>
        /// Het aantal sterren van het energielabel. 1 is voorlopig label. 3 is beperkt definitief label (zonder energieprestatie-index). 4 is definitief label met energieprestatie-index.
        /// </summary>
        /// <value>Het aantal sterren van het energielabel. 1 is voorlopig label. 3 is beperkt definitief label (zonder energieprestatie-index). 4 is definitief label met energieprestatie-index.</value>
        [DataMember(Name = "aantalSterren", EmitDefaultValue = true)]
        public int? AantalSterren { get; set; }

        /// <summary>
        /// De registratiedatum. Beschikbaar voor 2 en 3 sterrenlabels.
        /// </summary>
        /// <value>De registratiedatum. Beschikbaar voor 2 en 3 sterrenlabels.</value>
        [DataMember(Name = "geldigTot", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? GeldigTot { get; set; }

        /// <summary>
        /// De datum tot wanneer het label geldig is. Beschikbaar voor 2 en 3 sterrenlabels.
        /// </summary>
        /// <value>De datum tot wanneer het label geldig is. Beschikbaar voor 2 en 3 sterrenlabels.</value>
        [DataMember(Name = "registratiedatum", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? Registratiedatum { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EnergielabelData {\n");
            sb.Append("  AantalSterren: ").Append(AantalSterren).Append("\n");
            sb.Append("  GeldigTot: ").Append(GeldigTot).Append("\n");
            sb.Append("  Registratiedatum: ").Append(Registratiedatum).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnergielabelData);
        }

        /// <summary>
        /// Returns true if EnergielabelData instances are equal
        /// </summary>
        /// <param name="input">Instance of EnergielabelData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergielabelData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AantalSterren == input.AantalSterren ||
                    (this.AantalSterren != null &&
                    this.AantalSterren.Equals(input.AantalSterren))
                ) && 
                (
                    this.GeldigTot == input.GeldigTot ||
                    (this.GeldigTot != null &&
                    this.GeldigTot.Equals(input.GeldigTot))
                ) && 
                (
                    this.Registratiedatum == input.Registratiedatum ||
                    (this.Registratiedatum != null &&
                    this.Registratiedatum.Equals(input.Registratiedatum))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AantalSterren != null)
                {
                    hashCode = (hashCode * 59) + this.AantalSterren.GetHashCode();
                }
                if (this.GeldigTot != null)
                {
                    hashCode = (hashCode * 59) + this.GeldigTot.GetHashCode();
                }
                if (this.Registratiedatum != null)
                {
                    hashCode = (hashCode * 59) + this.Registratiedatum.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
