// <auto-generated>
/*
 * Copyright 2025 Calcasa B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Calcasa Public API
 *
 * The Calcasa API is used to connect to Calcasa provided services. For more information, please visit [Documentation](https://docs.calcasa.nl) or [GitHub](https://github.com/calcasa/api).
 *
 * The version of the OpenAPI document: 1.4.0-rc1
 * Contact: info@calcasa.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using Calcasa.Api.Client;

namespace Calcasa.Api.Model
{
    /// <summary>
    /// EnergielabelData
    /// </summary>
    public partial class EnergielabelData
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergielabelData" /> class.
        /// </summary>
        /// <param name="aantalSterren">Het aantal sterren van het energielabel. 1 is voorlopig label. 3 is beperkt definitief label (zonder energieprestatie-index). 4 is definitief label met energieprestatie-index.</param>
        /// <param name="geldigTot">De registratiedatum. Beschikbaar voor 2 en 3 sterrenlabels.</param>
        /// <param name="registratiedatum">De datum tot wanneer het label geldig is. Beschikbaar voor 2 en 3 sterrenlabels.</param>
        [JsonConstructor]
        public EnergielabelData(Option<int?> aantalSterren = default, Option<DateOnly?> geldigTot = default, Option<DateOnly?> registratiedatum = default)
        {
            AantalSterrenOption = aantalSterren;
            GeldigTotOption = geldigTot;
            RegistratiedatumOption = registratiedatum;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AantalSterren
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AantalSterrenOption { get; private set; }

        /// <summary>
        /// Het aantal sterren van het energielabel. 1 is voorlopig label. 3 is beperkt definitief label (zonder energieprestatie-index). 4 is definitief label met energieprestatie-index.
        /// </summary>
        /// <value>Het aantal sterren van het energielabel. 1 is voorlopig label. 3 is beperkt definitief label (zonder energieprestatie-index). 4 is definitief label met energieprestatie-index.</value>
        [JsonPropertyName("aantalSterren")]
        public int? AantalSterren { get { return this.AantalSterrenOption; } set { this.AantalSterrenOption = new(value); } }

        /// <summary>
        /// Used to track the state of GeldigTot
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> GeldigTotOption { get; private set; }

        /// <summary>
        /// De registratiedatum. Beschikbaar voor 2 en 3 sterrenlabels.
        /// </summary>
        /// <value>De registratiedatum. Beschikbaar voor 2 en 3 sterrenlabels.</value>
        [JsonPropertyName("geldigTot")]
        public DateOnly? GeldigTot { get { return this.GeldigTotOption; } set { this.GeldigTotOption = new(value); } }

        /// <summary>
        /// Used to track the state of Registratiedatum
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> RegistratiedatumOption { get; private set; }

        /// <summary>
        /// De datum tot wanneer het label geldig is. Beschikbaar voor 2 en 3 sterrenlabels.
        /// </summary>
        /// <value>De datum tot wanneer het label geldig is. Beschikbaar voor 2 en 3 sterrenlabels.</value>
        [JsonPropertyName("registratiedatum")]
        public DateOnly? Registratiedatum { get { return this.RegistratiedatumOption; } set { this.RegistratiedatumOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EnergielabelData {\n");
            sb.Append("  AantalSterren: ").Append(AantalSterren).Append("\n");
            sb.Append("  GeldigTot: ").Append(GeldigTot).Append("\n");
            sb.Append("  Registratiedatum: ").Append(Registratiedatum).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EnergielabelData" />
    /// </summary>
    public class EnergielabelDataJsonConverter : JsonConverter<EnergielabelData>
    {
        /// <summary>
        /// The format to use to serialize GeldigTot
        /// </summary>
        public static string GeldigTotFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize Registratiedatum
        /// </summary>
        public static string RegistratiedatumFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="EnergielabelData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EnergielabelData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> aantalSterren = default;
            Option<DateOnly?> geldigTot = default;
            Option<DateOnly?> registratiedatum = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "aantalSterren":
                            aantalSterren = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "geldigTot":
                            geldigTot = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "registratiedatum":
                            registratiedatum = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            return new EnergielabelData(aantalSterren, geldigTot, registratiedatum);
        }

        /// <summary>
        /// Serializes a <see cref="EnergielabelData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="energielabelData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EnergielabelData energielabelData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, energielabelData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EnergielabelData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="energielabelData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EnergielabelData energielabelData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (energielabelData.AantalSterrenOption.IsSet)
                if (energielabelData.AantalSterrenOption.Value != null)
                    writer.WriteNumber("aantalSterren", energielabelData.AantalSterrenOption.Value!.Value);
                else
                    writer.WriteNull("aantalSterren");

            if (energielabelData.GeldigTotOption.IsSet)
                if (energielabelData.GeldigTotOption.Value != null)
                    writer.WriteString("geldigTot", energielabelData.GeldigTotOption.Value!.Value.ToString(GeldigTotFormat));
                else
                    writer.WriteNull("geldigTot");

            if (energielabelData.RegistratiedatumOption.IsSet)
                if (energielabelData.RegistratiedatumOption.Value != null)
                    writer.WriteString("registratiedatum", energielabelData.RegistratiedatumOption.Value!.Value.ToString(RegistratiedatumFormat));
                else
                    writer.WriteNull("registratiedatum");
        }
    }

    /// <summary>
    /// The EnergielabelDataSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(EnergielabelData))]
    public partial class EnergielabelDataSerializationContext : JsonSerializerContext { }
}
