// <auto-generated>
/*
 * Copyright 2025 Calcasa B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Calcasa Public API
 *
 * The Calcasa API is used to connect to Calcasa provided services. For more information, please visit [Documentation](https://docs.calcasa.nl) or [GitHub](https://github.com/calcasa/api).
 *
 * The version of the OpenAPI document: 1.4.0-rc3
 * Contact: info@calcasa.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using System.Text.RegularExpressions;
using Calcasa.Api.Client;

namespace Calcasa.Api.Model
{
    /// <summary>
    /// BusinessRulesProblemDetails
    /// </summary>
    public partial class BusinessRulesProblemDetails
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessRulesProblemDetails" /> class.
        /// </summary>
        /// <param name="businessRulesCode">businessRulesCode</param>
        /// <param name="type">A URI reference [RFC3986] that identifies the problem type.</param>
        /// <param name="title">A short, human-readable summary of the problem type.</param>
        /// <param name="status">The HTTP status code for this occurrence of the problem.</param>
        /// <param name="detail">A human-readable explanation specific to this occurrence of the problem.</param>
        /// <param name="instance">A URI reference that identifies the specific occurrence of the problem.</param>
        [JsonConstructor]
        public BusinessRulesProblemDetails(Option<BusinessRulesCode?> businessRulesCode = default, Option<string?> type = default, Option<string?> title = default, Option<int?> status = default, Option<string?> detail = default, Option<string?> instance = default)
        {
            BusinessRulesCodeOption = businessRulesCode;
            TypeOption = type;
            TitleOption = title;
            StatusOption = status;
            DetailOption = detail;
            InstanceOption = instance;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of BusinessRulesCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<BusinessRulesCode?> BusinessRulesCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets BusinessRulesCode
        /// </summary>
        [JsonPropertyName("businessRulesCode")]
        public BusinessRulesCode? BusinessRulesCode { get { return this.BusinessRulesCodeOption; } set { this.BusinessRulesCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TypeOption { get; private set; }

        /// <summary>
        /// A URI reference [RFC3986] that identifies the problem type.
        /// </summary>
        /// <value>A URI reference [RFC3986] that identifies the problem type.</value>
        [JsonPropertyName("type")]
        public string? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// A short, human-readable summary of the problem type.
        /// </summary>
        /// <value>A short, human-readable summary of the problem type.</value>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> StatusOption { get; private set; }

        /// <summary>
        /// The HTTP status code for this occurrence of the problem.
        /// </summary>
        /// <value>The HTTP status code for this occurrence of the problem.</value>
        [JsonPropertyName("status")]
        public int? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of Detail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DetailOption { get; private set; }

        /// <summary>
        /// A human-readable explanation specific to this occurrence of the problem.
        /// </summary>
        /// <value>A human-readable explanation specific to this occurrence of the problem.</value>
        [JsonPropertyName("detail")]
        public string? Detail { get { return this.DetailOption; } set { this.DetailOption = new(value); } }

        /// <summary>
        /// Used to track the state of Instance
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> InstanceOption { get; private set; }

        /// <summary>
        /// A URI reference that identifies the specific occurrence of the problem.
        /// </summary>
        /// <value>A URI reference that identifies the specific occurrence of the problem.</value>
        [JsonPropertyName("instance")]
        public string? Instance { get { return this.InstanceOption; } set { this.InstanceOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BusinessRulesProblemDetails {\n");
            sb.Append("  BusinessRulesCode: ").Append(BusinessRulesCode).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("  Instance: ").Append(Instance).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BusinessRulesProblemDetails" />
    /// </summary>
    public class BusinessRulesProblemDetailsJsonConverter : JsonConverter<BusinessRulesProblemDetails>
    {
        /// <summary>
        /// Deserializes json to <see cref="BusinessRulesProblemDetails" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BusinessRulesProblemDetails Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<BusinessRulesCode?> businessRulesCode = default;
            Option<string?> type = default;
            Option<string?> title = default;
            Option<int?> status = default;
            Option<string?> detail = default;
            Option<string?> instance = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "businessRulesCode":
                            string? businessRulesCodeRawValue = utf8JsonReader.GetString();
                            if (businessRulesCodeRawValue != null)
                                businessRulesCode = new Option<BusinessRulesCode?>(BusinessRulesCodeValueConverter.FromStringOrDefault(businessRulesCodeRawValue));
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "status":
                            status = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "detail":
                            detail = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "instance":
                            instance = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (businessRulesCode.IsSet && businessRulesCode.Value == null)
                throw new ArgumentNullException(nameof(businessRulesCode), "Property is not nullable for class BusinessRulesProblemDetails.");

            return new BusinessRulesProblemDetails(businessRulesCode, type, title, status, detail, instance);
        }

        /// <summary>
        /// Serializes a <see cref="BusinessRulesProblemDetails" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="businessRulesProblemDetails"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BusinessRulesProblemDetails businessRulesProblemDetails, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, businessRulesProblemDetails, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BusinessRulesProblemDetails" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="businessRulesProblemDetails"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BusinessRulesProblemDetails businessRulesProblemDetails, JsonSerializerOptions jsonSerializerOptions)
        {
            if (businessRulesProblemDetails.BusinessRulesCodeOption.IsSet)
            {
                var businessRulesCodeRawValue = BusinessRulesCodeValueConverter.ToJsonValue(businessRulesProblemDetails.BusinessRulesCode!.Value);
                writer.WriteString("businessRulesCode", businessRulesCodeRawValue);
            }
            if (businessRulesProblemDetails.TypeOption.IsSet)
                if (businessRulesProblemDetails.TypeOption.Value != null)
                    writer.WriteString("type", businessRulesProblemDetails.Type);
                else
                    writer.WriteNull("type");

            if (businessRulesProblemDetails.TitleOption.IsSet)
                if (businessRulesProblemDetails.TitleOption.Value != null)
                    writer.WriteString("title", businessRulesProblemDetails.Title);
                else
                    writer.WriteNull("title");

            if (businessRulesProblemDetails.StatusOption.IsSet)
                if (businessRulesProblemDetails.StatusOption.Value != null)
                    writer.WriteNumber("status", businessRulesProblemDetails.StatusOption.Value!.Value);
                else
                    writer.WriteNull("status");

            if (businessRulesProblemDetails.DetailOption.IsSet)
                if (businessRulesProblemDetails.DetailOption.Value != null)
                    writer.WriteString("detail", businessRulesProblemDetails.Detail);
                else
                    writer.WriteNull("detail");

            if (businessRulesProblemDetails.InstanceOption.IsSet)
                if (businessRulesProblemDetails.InstanceOption.Value != null)
                    writer.WriteString("instance", businessRulesProblemDetails.Instance);
                else
                    writer.WriteNull("instance");
        }
    }

    /// <summary>
    /// The BusinessRulesProblemDetailsSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(BusinessRulesProblemDetails))]
    public partial class BusinessRulesProblemDetailsSerializationContext : JsonSerializerContext { }
}
