// <auto-generated>
/*
 * Copyright 2025 Calcasa B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Calcasa Public API
 *
 * The Calcasa API is used to connect to Calcasa provided services. For more information, please visit [Documentation](https://docs.calcasa.nl) or [GitHub](https://github.com/calcasa/api).
 *
 * The version of the OpenAPI document: 1.4.0-rc3
 * Contact: info@calcasa.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using System.Text.RegularExpressions;
using Calcasa.Api.Client;

namespace Calcasa.Api.Model
{
    /// <summary>
    /// WaarderingZoekParameters
    /// </summary>
    public partial class WaarderingZoekParameters
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WaarderingZoekParameters" /> class.
        /// </summary>
        /// <param name="productType">productType</param>
        /// <param name="bagNummeraanduidingId">Verplicht.</param>
        /// <param name="aangemaakt">De datum/tijd waarop de waardering is aangemaakt, in UTC.</param>
        /// <param name="geldverstrekker">De naam van de geldverstrekker voor de waardering.</param>
        /// <param name="aanvraagdoel">aanvraagdoel</param>
        /// <param name="waarderingStatus">waarderingStatus</param>
        [JsonConstructor]
        public WaarderingZoekParameters(ProductType productType, long bagNummeraanduidingId, Option<DateTime?> aangemaakt = default, Option<string?> geldverstrekker = default, Option<Aanvraagdoel?> aanvraagdoel = default, Option<WaarderingStatus?> waarderingStatus = default)
        {
            ProductType = productType;
            BagNummeraanduidingId = bagNummeraanduidingId;
            AangemaaktOption = aangemaakt;
            GeldverstrekkerOption = geldverstrekker;
            AanvraagdoelOption = aanvraagdoel;
            WaarderingStatusOption = waarderingStatus;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets ProductType
        /// </summary>
        [JsonPropertyName("productType")]
        public ProductType ProductType { get; set; }

        /// <summary>
        /// Used to track the state of Aanvraagdoel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Aanvraagdoel?> AanvraagdoelOption { get; private set; }

        /// <summary>
        /// Gets or Sets Aanvraagdoel
        /// </summary>
        [JsonPropertyName("aanvraagdoel")]
        public Aanvraagdoel? Aanvraagdoel { get { return this.AanvraagdoelOption; } set { this.AanvraagdoelOption = new(value); } }

        /// <summary>
        /// Used to track the state of WaarderingStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WaarderingStatus?> WaarderingStatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets WaarderingStatus
        /// </summary>
        [JsonPropertyName("waarderingStatus")]
        public WaarderingStatus? WaarderingStatus { get { return this.WaarderingStatusOption; } set { this.WaarderingStatusOption = new(value); } }

        /// <summary>
        /// Verplicht.
        /// </summary>
        /// <value>Verplicht.</value>
        [JsonPropertyName("bagNummeraanduidingId")]
        public long BagNummeraanduidingId { get; set; }

        /// <summary>
        /// Used to track the state of Aangemaakt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> AangemaaktOption { get; private set; }

        /// <summary>
        /// De datum/tijd waarop de waardering is aangemaakt, in UTC.
        /// </summary>
        /// <value>De datum/tijd waarop de waardering is aangemaakt, in UTC.</value>
        /* <example>2021-04-28T12:34:45Z</example> */
        [JsonPropertyName("aangemaakt")]
        public DateTime? Aangemaakt { get { return this.AangemaaktOption; } set { this.AangemaaktOption = new(value); } }

        /// <summary>
        /// Used to track the state of Geldverstrekker
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GeldverstrekkerOption { get; private set; }

        /// <summary>
        /// De naam van de geldverstrekker voor de waardering.
        /// </summary>
        /// <value>De naam van de geldverstrekker voor de waardering.</value>
        [JsonPropertyName("geldverstrekker")]
        public string? Geldverstrekker { get { return this.GeldverstrekkerOption; } set { this.GeldverstrekkerOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WaarderingZoekParameters {\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  BagNummeraanduidingId: ").Append(BagNummeraanduidingId).Append("\n");
            sb.Append("  Aangemaakt: ").Append(Aangemaakt).Append("\n");
            sb.Append("  Geldverstrekker: ").Append(Geldverstrekker).Append("\n");
            sb.Append("  Aanvraagdoel: ").Append(Aanvraagdoel).Append("\n");
            sb.Append("  WaarderingStatus: ").Append(WaarderingStatus).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WaarderingZoekParameters" />
    /// </summary>
    public class WaarderingZoekParametersJsonConverter : JsonConverter<WaarderingZoekParameters>
    {
        /// <summary>
        /// The format to use to serialize Aangemaakt
        /// </summary>
        public static string AangemaaktFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ssZ";

        /// <summary>
        /// Deserializes json to <see cref="WaarderingZoekParameters" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WaarderingZoekParameters Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ProductType?> productType = default;
            Option<long?> bagNummeraanduidingId = default;
            Option<DateTime?> aangemaakt = default;
            Option<string?> geldverstrekker = default;
            Option<Aanvraagdoel?> aanvraagdoel = default;
            Option<WaarderingStatus?> waarderingStatus = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "productType":
                            string? productTypeRawValue = utf8JsonReader.GetString();
                            if (productTypeRawValue != null)
                                productType = new Option<ProductType?>(ProductTypeValueConverter.FromStringOrDefault(productTypeRawValue));
                            break;
                        case "bagNummeraanduidingId":
                            bagNummeraanduidingId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "aangemaakt":
                            aangemaakt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "geldverstrekker":
                            geldverstrekker = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "aanvraagdoel":
                            string? aanvraagdoelRawValue = utf8JsonReader.GetString();
                            if (aanvraagdoelRawValue != null)
                                aanvraagdoel = new Option<Aanvraagdoel?>(AanvraagdoelValueConverter.FromStringOrDefault(aanvraagdoelRawValue));
                            break;
                        case "waarderingStatus":
                            string? waarderingStatusRawValue = utf8JsonReader.GetString();
                            if (waarderingStatusRawValue != null)
                                waarderingStatus = new Option<WaarderingStatus?>(WaarderingStatusValueConverter.FromStringOrDefault(waarderingStatusRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!productType.IsSet)
                throw new ArgumentException("Property is required for class WaarderingZoekParameters.", nameof(productType));

            if (!bagNummeraanduidingId.IsSet)
                throw new ArgumentException("Property is required for class WaarderingZoekParameters.", nameof(bagNummeraanduidingId));

            if (productType.IsSet && productType.Value == null)
                throw new ArgumentNullException(nameof(productType), "Property is not nullable for class WaarderingZoekParameters.");

            if (bagNummeraanduidingId.IsSet && bagNummeraanduidingId.Value == null)
                throw new ArgumentNullException(nameof(bagNummeraanduidingId), "Property is not nullable for class WaarderingZoekParameters.");

            return new WaarderingZoekParameters(productType.Value!.Value!, bagNummeraanduidingId.Value!.Value!, aangemaakt, geldverstrekker, aanvraagdoel, waarderingStatus);
        }

        /// <summary>
        /// Serializes a <see cref="WaarderingZoekParameters" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="waarderingZoekParameters"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WaarderingZoekParameters waarderingZoekParameters, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, waarderingZoekParameters, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WaarderingZoekParameters" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="waarderingZoekParameters"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WaarderingZoekParameters waarderingZoekParameters, JsonSerializerOptions jsonSerializerOptions)
        {
            var productTypeRawValue = ProductTypeValueConverter.ToJsonValue(waarderingZoekParameters.ProductType);
            writer.WriteString("productType", productTypeRawValue);

            writer.WriteNumber("bagNummeraanduidingId", waarderingZoekParameters.BagNummeraanduidingId);

            if (waarderingZoekParameters.AangemaaktOption.IsSet)
                if (waarderingZoekParameters.AangemaaktOption.Value != null)
                    writer.WriteString("aangemaakt", waarderingZoekParameters.AangemaaktOption.Value!.Value.ToString(AangemaaktFormat));
                else
                    writer.WriteNull("aangemaakt");

            if (waarderingZoekParameters.GeldverstrekkerOption.IsSet)
                if (waarderingZoekParameters.GeldverstrekkerOption.Value != null)
                    writer.WriteString("geldverstrekker", waarderingZoekParameters.Geldverstrekker);
                else
                    writer.WriteNull("geldverstrekker");

            if (waarderingZoekParameters.AanvraagdoelOption.IsSet)
                if (waarderingZoekParameters.AanvraagdoelOption!.Value != null)
                {
                    var aanvraagdoelRawValue = AanvraagdoelValueConverter.ToJsonValue(waarderingZoekParameters.AanvraagdoelOption.Value!.Value);
                    writer.WriteString("aanvraagdoel", aanvraagdoelRawValue);
                }
                else
                    writer.WriteNull("aanvraagdoel");
            if (waarderingZoekParameters.WaarderingStatusOption.IsSet)
                if (waarderingZoekParameters.WaarderingStatusOption!.Value != null)
                {
                    var waarderingStatusRawValue = WaarderingStatusValueConverter.ToJsonValue(waarderingZoekParameters.WaarderingStatusOption.Value!.Value);
                    writer.WriteString("waarderingStatus", waarderingStatusRawValue);
                }
                else
                    writer.WriteNull("waarderingStatus");
        }
    }

    /// <summary>
    /// The WaarderingZoekParametersSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(WaarderingZoekParameters))]
    public partial class WaarderingZoekParametersSerializationContext : JsonSerializerContext { }
}
