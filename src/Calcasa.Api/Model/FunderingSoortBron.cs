// <auto-generated>
/*
 * Copyright 2025 Calcasa B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Calcasa Public API
 *
 * The Calcasa API is used to connect to Calcasa provided services. For more information, please visit [Documentation](https://docs.calcasa.nl) or [GitHub](https://github.com/calcasa/api).
 *
 * The version of the OpenAPI document: 1.4.0-rc1
 * Contact: info@calcasa.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using Calcasa.Api.Client;

namespace Calcasa.Api.Model
{
    /// <summary>
    /// Bron voor funderingsinformatie. | Waarde | Omschrijving | | - -- | - -- | | &#x60;onbekend&#x60; | Onbekende bron. | | &#x60;model&#x60; | Modelmatig. | | &#x60;document&#x60; | Uit een document. | | &#x60;bouweenheid&#x60; | Op basis van woningen in hetzelfde woonblok. |
    /// </summary>
    /// <value>Bron voor funderingsinformatie. | Waarde | Omschrijving | | - -- | - -- | | &#x60;onbekend&#x60; | Onbekende bron. | | &#x60;model&#x60; | Modelmatig. | | &#x60;document&#x60; | Uit een document. | | &#x60;bouweenheid&#x60; | Op basis van woningen in hetzelfde woonblok. |</value>
    public enum FunderingSoortBron
    {
        /// <summary>
        /// Enum Onbekend for value: onbekend
        /// </summary>
        Onbekend,

        /// <summary>
        /// Enum Model for value: model
        /// </summary>
        Model,

        /// <summary>
        /// Enum Document for value: document
        /// </summary>
        Document,

        /// <summary>
        /// Enum Bouweenheid for value: bouweenheid
        /// </summary>
        Bouweenheid
    }

    /// <summary>
    /// Converts <see cref="FunderingSoortBron"/> to and from the JSON value
    /// </summary>
    public static class FunderingSoortBronValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="FunderingSoortBron"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static FunderingSoortBron FromString(string value)
        {
            if (value.Equals("onbekend"))
                return FunderingSoortBron.Onbekend;

            if (value.Equals("model"))
                return FunderingSoortBron.Model;

            if (value.Equals("document"))
                return FunderingSoortBron.Document;

            if (value.Equals("bouweenheid"))
                return FunderingSoortBron.Bouweenheid;

            throw new NotImplementedException($"Could not convert value to type FunderingSoortBron: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="FunderingSoortBron"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static FunderingSoortBron? FromStringOrDefault(string value)
        {
            if (value.Equals("onbekend"))
                return FunderingSoortBron.Onbekend;

            if (value.Equals("model"))
                return FunderingSoortBron.Model;

            if (value.Equals("document"))
                return FunderingSoortBron.Document;

            if (value.Equals("bouweenheid"))
                return FunderingSoortBron.Bouweenheid;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="FunderingSoortBron"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(FunderingSoortBron value)
        {
            if (value == FunderingSoortBron.Onbekend)
                return "onbekend";

            if (value == FunderingSoortBron.Model)
                return "model";

            if (value == FunderingSoortBron.Document)
                return "document";

            if (value == FunderingSoortBron.Bouweenheid)
                return "bouweenheid";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FunderingSoortBron"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class FunderingSoortBronJsonConverter : JsonConverter<FunderingSoortBron>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override FunderingSoortBron Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            FunderingSoortBron? result = rawValue == null
                ? null
                : FunderingSoortBronValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the FunderingSoortBron to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="funderingSoortBron"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, FunderingSoortBron funderingSoortBron, JsonSerializerOptions options)
        {
            writer.WriteStringValue(funderingSoortBron.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FunderingSoortBron"/>
    /// </summary>
    public class FunderingSoortBronNullableJsonConverter : JsonConverter<FunderingSoortBron?>
    {
        /// <summary>
        /// Returns a FunderingSoortBron from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override FunderingSoortBron? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            FunderingSoortBron? result = rawValue == null
                ? null
                : FunderingSoortBronValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="funderingSoortBron"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, FunderingSoortBron? funderingSoortBron, JsonSerializerOptions options)
        {
            writer.WriteStringValue(funderingSoortBron?.ToString() ?? "null");
        }
    }


    /// <summary>
    /// The FunderingSoortBronSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(FunderingSoortBron))]
    public partial class FunderingSoortBronSerializationContext : JsonSerializerContext { }
}
