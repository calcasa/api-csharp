// <auto-generated>
/*
 * Copyright 2025 Calcasa B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Calcasa Public API
 *
 * The Calcasa API is used to connect to Calcasa provided services. For more information, please visit [Documentation](https://docs.calcasa.nl) or [GitHub](https://github.com/calcasa/api).
 *
 * The version of the OpenAPI document: 1.4.0-rc3
 * Contact: info@calcasa.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using System.Text.RegularExpressions;
using Calcasa.Api.Client;

namespace Calcasa.Api.Model
{
    /// <summary>
    /// Informatie over type fundering.
    /// </summary>
    public partial class FunderingTypering
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FunderingTypering" /> class.
        /// </summary>
        /// <param name="type">type</param>
        /// <param name="bron">bron</param>
        /// <param name="omschrijving">De omschrijving van het funderingstype.</param>
        [JsonConstructor]
        public FunderingTypering(Option<FunderingType?> type = default, Option<FunderingSoortBron?> bron = default, Option<string?> omschrijving = default)
        {
            TypeOption = type;
            BronOption = bron;
            OmschrijvingOption = omschrijving;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FunderingType?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public FunderingType? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Bron
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FunderingSoortBron?> BronOption { get; private set; }

        /// <summary>
        /// Gets or Sets Bron
        /// </summary>
        [JsonPropertyName("bron")]
        public FunderingSoortBron? Bron { get { return this.BronOption; } set { this.BronOption = new(value); } }

        /// <summary>
        /// Used to track the state of Omschrijving
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OmschrijvingOption { get; private set; }

        /// <summary>
        /// De omschrijving van het funderingstype.
        /// </summary>
        /// <value>De omschrijving van het funderingstype.</value>
        [JsonPropertyName("omschrijving")]
        public string? Omschrijving { get { return this.OmschrijvingOption; } set { this.OmschrijvingOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FunderingTypering {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Bron: ").Append(Bron).Append("\n");
            sb.Append("  Omschrijving: ").Append(Omschrijving).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FunderingTypering" />
    /// </summary>
    public class FunderingTyperingJsonConverter : JsonConverter<FunderingTypering>
    {
        /// <summary>
        /// Deserializes json to <see cref="FunderingTypering" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FunderingTypering Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<FunderingType?> type = default;
            Option<FunderingSoortBron?> bron = default;
            Option<string?> omschrijving = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<FunderingType?>(FunderingTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "bron":
                            string? bronRawValue = utf8JsonReader.GetString();
                            if (bronRawValue != null)
                                bron = new Option<FunderingSoortBron?>(FunderingSoortBronValueConverter.FromStringOrDefault(bronRawValue));
                            break;
                        case "omschrijving":
                            omschrijving = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class FunderingTypering.");

            if (bron.IsSet && bron.Value == null)
                throw new ArgumentNullException(nameof(bron), "Property is not nullable for class FunderingTypering.");

            if (omschrijving.IsSet && omschrijving.Value == null)
                throw new ArgumentNullException(nameof(omschrijving), "Property is not nullable for class FunderingTypering.");

            return new FunderingTypering(type, bron, omschrijving);
        }

        /// <summary>
        /// Serializes a <see cref="FunderingTypering" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="funderingTypering"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FunderingTypering funderingTypering, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, funderingTypering, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FunderingTypering" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="funderingTypering"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FunderingTypering funderingTypering, JsonSerializerOptions jsonSerializerOptions)
        {
            if (funderingTypering.OmschrijvingOption.IsSet && funderingTypering.Omschrijving == null)
                throw new ArgumentNullException(nameof(funderingTypering.Omschrijving), "Property is required for class FunderingTypering.");

            if (funderingTypering.TypeOption.IsSet)
            {
                var typeRawValue = FunderingTypeValueConverter.ToJsonValue(funderingTypering.Type!.Value);
                writer.WriteString("type", typeRawValue);
            }
            if (funderingTypering.BronOption.IsSet)
            {
                var bronRawValue = FunderingSoortBronValueConverter.ToJsonValue(funderingTypering.Bron!.Value);
                writer.WriteString("bron", bronRawValue);
            }
            if (funderingTypering.OmschrijvingOption.IsSet)
                writer.WriteString("omschrijving", funderingTypering.Omschrijving);
        }
    }

    /// <summary>
    /// The FunderingTyperingSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(FunderingTypering))]
    public partial class FunderingTyperingSerializationContext : JsonSerializerContext { }
}
