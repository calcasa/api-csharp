// <auto-generated>
/*
 * Copyright 2025 Calcasa B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Calcasa Public API
 *
 * The Calcasa API is used to connect to Calcasa provided services. For more information, please visit [Documentation](https://docs.calcasa.nl) or [GitHub](https://github.com/calcasa/api).
 *
 * The version of the OpenAPI document: 1.4.0-rc2
 * Contact: info@calcasa.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using System.Text.RegularExpressions;
using Calcasa.Api.Client;

namespace Calcasa.Api.Model
{
    /// <summary>
    /// CallbackInschrijving
    /// </summary>
    public partial class CallbackInschrijving
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CallbackInschrijving" /> class.
        /// </summary>
        /// <param name="bagNummeraanduidingId">Verplicht. Het BAG (Basisregistratie Adressen en Gebouwen) nummeraanduiding id.</param>
        /// <param name="geldigTot">Verplicht. De datum tot wanneer deze inschrijving effect moet hebben. Als deze inschrijving verloopt wordt deze automatisch opgeruimt. De maximale termijn is afhankelijk van de gebruikte client.</param>
        /// <param name="externeReferentie">Een vrij veld dat terug komt met de callback payload om callbacks aan de juiste callback inschrijving te koppelen.</param>
        /// <param name="geldverstrekker">Optioneel veld om alleen op aanvragen voor een bepaalde geldverstrekker in te schrijven.</param>
        [JsonConstructor]
        public CallbackInschrijving(long bagNummeraanduidingId, DateTime geldigTot, Option<string?> externeReferentie = default, Option<string?> geldverstrekker = default)
        {
            BagNummeraanduidingId = bagNummeraanduidingId;
            GeldigTot = geldigTot;
            ExterneReferentieOption = externeReferentie;
            GeldverstrekkerOption = geldverstrekker;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Verplicht. Het BAG (Basisregistratie Adressen en Gebouwen) nummeraanduiding id.
        /// </summary>
        /// <value>Verplicht. Het BAG (Basisregistratie Adressen en Gebouwen) nummeraanduiding id.</value>
        [JsonPropertyName("bagNummeraanduidingId")]
        public long BagNummeraanduidingId { get; set; }

        /// <summary>
        /// Verplicht. De datum tot wanneer deze inschrijving effect moet hebben. Als deze inschrijving verloopt wordt deze automatisch opgeruimt. De maximale termijn is afhankelijk van de gebruikte client.
        /// </summary>
        /// <value>Verplicht. De datum tot wanneer deze inschrijving effect moet hebben. Als deze inschrijving verloopt wordt deze automatisch opgeruimt. De maximale termijn is afhankelijk van de gebruikte client.</value>
        /* <example>2021-04-28T12:34:45Z</example> */
        [JsonPropertyName("geldigTot")]
        public DateTime GeldigTot { get; set; }

        /// <summary>
        /// Used to track the state of ExterneReferentie
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExterneReferentieOption { get; private set; }

        /// <summary>
        /// Een vrij veld dat terug komt met de callback payload om callbacks aan de juiste callback inschrijving te koppelen.
        /// </summary>
        /// <value>Een vrij veld dat terug komt met de callback payload om callbacks aan de juiste callback inschrijving te koppelen.</value>
        [JsonPropertyName("externeReferentie")]
        public string? ExterneReferentie { get { return this.ExterneReferentieOption; } set { this.ExterneReferentieOption = new(value); } }

        /// <summary>
        /// Used to track the state of Geldverstrekker
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GeldverstrekkerOption { get; private set; }

        /// <summary>
        /// Optioneel veld om alleen op aanvragen voor een bepaalde geldverstrekker in te schrijven.
        /// </summary>
        /// <value>Optioneel veld om alleen op aanvragen voor een bepaalde geldverstrekker in te schrijven.</value>
        [JsonPropertyName("geldverstrekker")]
        public string? Geldverstrekker { get { return this.GeldverstrekkerOption; } set { this.GeldverstrekkerOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CallbackInschrijving {\n");
            sb.Append("  BagNummeraanduidingId: ").Append(BagNummeraanduidingId).Append("\n");
            sb.Append("  GeldigTot: ").Append(GeldigTot).Append("\n");
            sb.Append("  ExterneReferentie: ").Append(ExterneReferentie).Append("\n");
            sb.Append("  Geldverstrekker: ").Append(Geldverstrekker).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CallbackInschrijving" />
    /// </summary>
    public class CallbackInschrijvingJsonConverter : JsonConverter<CallbackInschrijving>
    {
        /// <summary>
        /// The format to use to serialize GeldigTot
        /// </summary>
        public static string GeldigTotFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ssZ";

        /// <summary>
        /// Deserializes json to <see cref="CallbackInschrijving" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CallbackInschrijving Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> bagNummeraanduidingId = default;
            Option<DateTime?> geldigTot = default;
            Option<string?> externeReferentie = default;
            Option<string?> geldverstrekker = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "bagNummeraanduidingId":
                            bagNummeraanduidingId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "geldigTot":
                            geldigTot = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "externeReferentie":
                            externeReferentie = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "geldverstrekker":
                            geldverstrekker = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!bagNummeraanduidingId.IsSet)
                throw new ArgumentException("Property is required for class CallbackInschrijving.", nameof(bagNummeraanduidingId));

            if (!geldigTot.IsSet)
                throw new ArgumentException("Property is required for class CallbackInschrijving.", nameof(geldigTot));

            if (bagNummeraanduidingId.IsSet && bagNummeraanduidingId.Value == null)
                throw new ArgumentNullException(nameof(bagNummeraanduidingId), "Property is not nullable for class CallbackInschrijving.");

            if (geldigTot.IsSet && geldigTot.Value == null)
                throw new ArgumentNullException(nameof(geldigTot), "Property is not nullable for class CallbackInschrijving.");

            return new CallbackInschrijving(bagNummeraanduidingId.Value!.Value!, geldigTot.Value!.Value!, externeReferentie, geldverstrekker);
        }

        /// <summary>
        /// Serializes a <see cref="CallbackInschrijving" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="callbackInschrijving"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CallbackInschrijving callbackInschrijving, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, callbackInschrijving, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CallbackInschrijving" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="callbackInschrijving"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CallbackInschrijving callbackInschrijving, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("bagNummeraanduidingId", callbackInschrijving.BagNummeraanduidingId);

            writer.WriteString("geldigTot", callbackInschrijving.GeldigTot.ToString(GeldigTotFormat));

            if (callbackInschrijving.ExterneReferentieOption.IsSet)
                if (callbackInschrijving.ExterneReferentieOption.Value != null)
                    writer.WriteString("externeReferentie", callbackInschrijving.ExterneReferentie);
                else
                    writer.WriteNull("externeReferentie");

            if (callbackInschrijving.GeldverstrekkerOption.IsSet)
                if (callbackInschrijving.GeldverstrekkerOption.Value != null)
                    writer.WriteString("geldverstrekker", callbackInschrijving.Geldverstrekker);
                else
                    writer.WriteNull("geldverstrekker");
        }
    }

    /// <summary>
    /// The CallbackInschrijvingSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(CallbackInschrijving))]
    public partial class CallbackInschrijvingSerializationContext : JsonSerializerContext { }
}
