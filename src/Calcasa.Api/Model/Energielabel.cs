// <auto-generated>
/*
 * Copyright 2025 Calcasa B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Calcasa Public API
 *
 * The Calcasa API is used to connect to Calcasa provided services. For more information, please visit [Documentation](https://docs.calcasa.nl) or [GitHub](https://github.com/calcasa/api).
 *
 * The version of the OpenAPI document: 1.4.0-rc3
 * Contact: info@calcasa.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using System.Text.RegularExpressions;
using Calcasa.Api.Client;

namespace Calcasa.Api.Model
{
    /// <summary>
    /// | Waarde | Omschrijving | | - -- | - -- | | &#x60;onbekend&#x60; |  | | &#x60;g&#x60; |  | | &#x60;f&#x60; |  | | &#x60;e&#x60; |  | | &#x60;d&#x60; |  | | &#x60;c&#x60; |  | | &#x60;b&#x60; |  | | &#x60;a&#x60; |  | | &#x60;a1&#x60; | A+. | | &#x60;a2&#x60; | A++. | | &#x60;a3&#x60; | A+++. | | &#x60;a4&#x60; | A++++. |
    /// </summary>
    /// <value>| Waarde | Omschrijving | | - -- | - -- | | &#x60;onbekend&#x60; |  | | &#x60;g&#x60; |  | | &#x60;f&#x60; |  | | &#x60;e&#x60; |  | | &#x60;d&#x60; |  | | &#x60;c&#x60; |  | | &#x60;b&#x60; |  | | &#x60;a&#x60; |  | | &#x60;a1&#x60; | A+. | | &#x60;a2&#x60; | A++. | | &#x60;a3&#x60; | A+++. | | &#x60;a4&#x60; | A++++. |</value>
    public enum Energielabel
    {
        /// <summary>
        /// Enum Onbekend for value: onbekend
        /// </summary>
        Onbekend,

        /// <summary>
        /// Enum G for value: g
        /// </summary>
        G,

        /// <summary>
        /// Enum F for value: f
        /// </summary>
        F,

        /// <summary>
        /// Enum E for value: e
        /// </summary>
        E,

        /// <summary>
        /// Enum D for value: d
        /// </summary>
        D,

        /// <summary>
        /// Enum C for value: c
        /// </summary>
        C,

        /// <summary>
        /// Enum B for value: b
        /// </summary>
        B,

        /// <summary>
        /// Enum A for value: a
        /// </summary>
        A,

        /// <summary>
        /// Enum A1 for value: a1
        /// </summary>
        A1,

        /// <summary>
        /// Enum A2 for value: a2
        /// </summary>
        A2,

        /// <summary>
        /// Enum A3 for value: a3
        /// </summary>
        A3,

        /// <summary>
        /// Enum A4 for value: a4
        /// </summary>
        A4
    }

    /// <summary>
    /// Converts <see cref="Energielabel"/> to and from the JSON value
    /// </summary>
    public static class EnergielabelValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="Energielabel"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Energielabel FromString(string value)
        {
            if (value.Equals("onbekend"))
                return Energielabel.Onbekend;

            if (value.Equals("g"))
                return Energielabel.G;

            if (value.Equals("f"))
                return Energielabel.F;

            if (value.Equals("e"))
                return Energielabel.E;

            if (value.Equals("d"))
                return Energielabel.D;

            if (value.Equals("c"))
                return Energielabel.C;

            if (value.Equals("b"))
                return Energielabel.B;

            if (value.Equals("a"))
                return Energielabel.A;

            if (value.Equals("a1"))
                return Energielabel.A1;

            if (value.Equals("a2"))
                return Energielabel.A2;

            if (value.Equals("a3"))
                return Energielabel.A3;

            if (value.Equals("a4"))
                return Energielabel.A4;

            throw new NotImplementedException($"Could not convert value to type Energielabel: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="Energielabel"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Energielabel? FromStringOrDefault(string value)
        {
            if (value.Equals("onbekend"))
                return Energielabel.Onbekend;

            if (value.Equals("g"))
                return Energielabel.G;

            if (value.Equals("f"))
                return Energielabel.F;

            if (value.Equals("e"))
                return Energielabel.E;

            if (value.Equals("d"))
                return Energielabel.D;

            if (value.Equals("c"))
                return Energielabel.C;

            if (value.Equals("b"))
                return Energielabel.B;

            if (value.Equals("a"))
                return Energielabel.A;

            if (value.Equals("a1"))
                return Energielabel.A1;

            if (value.Equals("a2"))
                return Energielabel.A2;

            if (value.Equals("a3"))
                return Energielabel.A3;

            if (value.Equals("a4"))
                return Energielabel.A4;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="Energielabel"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(Energielabel value)
        {
            if (value == Energielabel.Onbekend)
                return "onbekend";

            if (value == Energielabel.G)
                return "g";

            if (value == Energielabel.F)
                return "f";

            if (value == Energielabel.E)
                return "e";

            if (value == Energielabel.D)
                return "d";

            if (value == Energielabel.C)
                return "c";

            if (value == Energielabel.B)
                return "b";

            if (value == Energielabel.A)
                return "a";

            if (value == Energielabel.A1)
                return "a1";

            if (value == Energielabel.A2)
                return "a2";

            if (value == Energielabel.A3)
                return "a3";

            if (value == Energielabel.A4)
                return "a4";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Energielabel"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class EnergielabelJsonConverter : JsonConverter<Energielabel>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Energielabel Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Energielabel? result = rawValue == null
                ? null
                : EnergielabelValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the Energielabel to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="energielabel"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Energielabel energielabel, JsonSerializerOptions options)
        {
            writer.WriteStringValue(EnergielabelValueConverter.ToJsonValue(energielabel).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Energielabel"/>
    /// </summary>
    public class EnergielabelNullableJsonConverter : JsonConverter<Energielabel?>
    {
        /// <summary>
        /// Returns a Energielabel from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Energielabel? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Energielabel? result = rawValue == null
                ? null
                : EnergielabelValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the Energielabel to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="energielabel"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Energielabel? energielabel, JsonSerializerOptions options)
        {
            writer.WriteStringValue(energielabel.HasValue ? EnergielabelValueConverter.ToJsonValue(energielabel.Value).ToString() : "null");
        }
    }


    /// <summary>
    /// The EnergielabelSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(Energielabel))]
    public partial class EnergielabelSerializationContext : JsonSerializerContext { }
}
