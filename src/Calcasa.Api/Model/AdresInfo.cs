// <auto-generated>
/*
 * Copyright 2025 Calcasa B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Calcasa Public API
 *
 * The Calcasa API is used to connect to Calcasa provided services. For more information, please visit [Documentation](https://docs.calcasa.nl) or [GitHub](https://github.com/calcasa/api).
 *
 * The version of the OpenAPI document: 1.4.0-rc1
 * Contact: info@calcasa.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using Calcasa.Api.Client;

namespace Calcasa.Api.Model
{
    /// <summary>
    /// AdresInfo
    /// </summary>
    public partial class AdresInfo
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdresInfo" /> class.
        /// </summary>
        /// <param name="bagNummeraanduidingId">Het BAG nummeraanduiding Id van het adres. Normaal aangevuld met nullen tot 16 karakters.</param>
        /// <param name="adres">adres</param>
        /// <param name="notities">notities</param>
        /// <param name="adresGevonden">Geeft aan of er een correct adres is gevonden voor deze zoekopdracht.</param>
        [JsonConstructor]
        public AdresInfo(long bagNummeraanduidingId, Option<Adres?> adres = default, Option<Notities?> notities = default, Option<bool?> adresGevonden = default)
        {
            BagNummeraanduidingId = bagNummeraanduidingId;
            AdresOption = adres;
            NotitiesOption = notities;
            AdresGevondenOption = adresGevonden;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Het BAG nummeraanduiding Id van het adres. Normaal aangevuld met nullen tot 16 karakters.
        /// </summary>
        /// <value>Het BAG nummeraanduiding Id van het adres. Normaal aangevuld met nullen tot 16 karakters.</value>
        [JsonPropertyName("bagNummeraanduidingId")]
        public long BagNummeraanduidingId { get; set; }

        /// <summary>
        /// Used to track the state of Adres
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Adres?> AdresOption { get; private set; }

        /// <summary>
        /// Gets or Sets Adres
        /// </summary>
        [JsonPropertyName("adres")]
        public Adres? Adres { get { return this.AdresOption; } set { this.AdresOption = new(value); } }

        /// <summary>
        /// Used to track the state of Notities
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Notities?> NotitiesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Notities
        /// </summary>
        [JsonPropertyName("notities")]
        public Notities? Notities { get { return this.NotitiesOption; } set { this.NotitiesOption = new(value); } }

        /// <summary>
        /// Used to track the state of AdresGevonden
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AdresGevondenOption { get; private set; }

        /// <summary>
        /// Geeft aan of er een correct adres is gevonden voor deze zoekopdracht.
        /// </summary>
        /// <value>Geeft aan of er een correct adres is gevonden voor deze zoekopdracht.</value>
        [JsonPropertyName("adresGevonden")]
        public bool? AdresGevonden { get { return this.AdresGevondenOption; } set { this.AdresGevondenOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdresInfo {\n");
            sb.Append("  BagNummeraanduidingId: ").Append(BagNummeraanduidingId).Append("\n");
            sb.Append("  Adres: ").Append(Adres).Append("\n");
            sb.Append("  Notities: ").Append(Notities).Append("\n");
            sb.Append("  AdresGevonden: ").Append(AdresGevonden).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AdresInfo" />
    /// </summary>
    public class AdresInfoJsonConverter : JsonConverter<AdresInfo>
    {
        /// <summary>
        /// Deserializes json to <see cref="AdresInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AdresInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> bagNummeraanduidingId = default;
            Option<Adres?> adres = default;
            Option<Notities?> notities = default;
            Option<bool?> adresGevonden = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "bagNummeraanduidingId":
                            bagNummeraanduidingId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "adres":
                            adres = new Option<Adres?>(JsonSerializer.Deserialize<Adres>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "notities":
                            notities = new Option<Notities?>(JsonSerializer.Deserialize<Notities>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "adresGevonden":
                            adresGevonden = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!bagNummeraanduidingId.IsSet)
                throw new ArgumentException("Property is required for class AdresInfo.", nameof(bagNummeraanduidingId));

            if (bagNummeraanduidingId.IsSet && bagNummeraanduidingId.Value == null)
                throw new ArgumentNullException(nameof(bagNummeraanduidingId), "Property is not nullable for class AdresInfo.");

            if (adres.IsSet && adres.Value == null)
                throw new ArgumentNullException(nameof(adres), "Property is not nullable for class AdresInfo.");

            if (notities.IsSet && notities.Value == null)
                throw new ArgumentNullException(nameof(notities), "Property is not nullable for class AdresInfo.");

            return new AdresInfo(bagNummeraanduidingId.Value!.Value!, adres, notities, adresGevonden);
        }

        /// <summary>
        /// Serializes a <see cref="AdresInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="adresInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AdresInfo adresInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, adresInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AdresInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="adresInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AdresInfo adresInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (adresInfo.AdresOption.IsSet && adresInfo.Adres == null)
                throw new ArgumentNullException(nameof(adresInfo.Adres), "Property is required for class AdresInfo.");

            if (adresInfo.NotitiesOption.IsSet && adresInfo.Notities == null)
                throw new ArgumentNullException(nameof(adresInfo.Notities), "Property is required for class AdresInfo.");

            writer.WriteNumber("bagNummeraanduidingId", adresInfo.BagNummeraanduidingId);

            if (adresInfo.AdresOption.IsSet)
            {
                writer.WritePropertyName("adres");
                JsonSerializer.Serialize(writer, adresInfo.Adres, jsonSerializerOptions);
            }
            if (adresInfo.NotitiesOption.IsSet)
            {
                writer.WritePropertyName("notities");
                JsonSerializer.Serialize(writer, adresInfo.Notities, jsonSerializerOptions);
            }
            if (adresInfo.AdresGevondenOption.IsSet)
                if (adresInfo.AdresGevondenOption.Value != null)
                    writer.WriteBoolean("adresGevonden", adresInfo.AdresGevondenOption.Value!.Value);
                else
                    writer.WriteNull("adresGevonden");
        }
    }

    /// <summary>
    /// The AdresInfoSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(AdresInfo))]
    public partial class AdresInfoSerializationContext : JsonSerializerContext { }
}
