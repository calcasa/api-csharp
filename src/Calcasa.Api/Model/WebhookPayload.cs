// <auto-generated>
/*
 * Copyright 2025 Calcasa B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Calcasa Public API
 *
 * The Calcasa API is used to connect to Calcasa provided services. For more information, please visit [Documentation](https://docs.calcasa.nl) or [GitHub](https://github.com/calcasa/api).
 *
 * The version of the OpenAPI document: 1.4.0-rc1
 * Contact: info@calcasa.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using Calcasa.Api.Client;

namespace Calcasa.Api.Model
{
    /// <summary>
    /// De base payload van de webhooks die verstuurd worden voor verschillende events.
    /// </summary>
    public partial class WebhookPayload
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookPayload" /> class.
        /// </summary>
        /// <param name="callbackName">callbackName</param>
        /// <param name="eventId">Uniek Id voor deze callback.</param>
        /// <param name="timestamp">Het tijdstip van het event, in UTC.</param>
        [JsonConstructor]
        public WebhookPayload(string callbackName, Guid eventId, DateTime timestamp)
        {
            CallbackName = callbackName;
            EventId = eventId;
            Timestamp = timestamp;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets CallbackName
        /// </summary>
        [JsonPropertyName("callbackName")]
        public string CallbackName { get; }

        /// <summary>
        /// Uniek Id voor deze callback.
        /// </summary>
        /// <value>Uniek Id voor deze callback.</value>
        [JsonPropertyName("eventId")]
        public Guid EventId { get; set; }

        /// <summary>
        /// Het tijdstip van het event, in UTC.
        /// </summary>
        /// <value>Het tijdstip van het event, in UTC.</value>
        /* <example>2021-04-28T12:34:45Z</example> */
        [JsonPropertyName("timestamp")]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebhookPayload {\n");
            sb.Append("  CallbackName: ").Append(CallbackName).Append("\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebhookPayload" />
    /// </summary>
    public class WebhookPayloadJsonConverter : JsonConverter<WebhookPayload>
    {
        /// <summary>
        /// The format to use to serialize Timestamp
        /// </summary>
        public static string TimestampFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ssZ";

        /// <summary>
        /// Deserializes json to <see cref="WebhookPayload" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebhookPayload Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> callbackName = default;
            Option<Guid?> eventId = default;
            Option<DateTime?> timestamp = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "callbackName":
                            callbackName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "eventId":
                            eventId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "timestamp":
                            timestamp = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!callbackName.IsSet)
                throw new ArgumentException("Property is required for class WebhookPayload.", nameof(callbackName));

            if (!eventId.IsSet)
                throw new ArgumentException("Property is required for class WebhookPayload.", nameof(eventId));

            if (!timestamp.IsSet)
                throw new ArgumentException("Property is required for class WebhookPayload.", nameof(timestamp));

            if (callbackName.IsSet && callbackName.Value == null)
                throw new ArgumentNullException(nameof(callbackName), "Property is not nullable for class WebhookPayload.");

            if (eventId.IsSet && eventId.Value == null)
                throw new ArgumentNullException(nameof(eventId), "Property is not nullable for class WebhookPayload.");

            if (timestamp.IsSet && timestamp.Value == null)
                throw new ArgumentNullException(nameof(timestamp), "Property is not nullable for class WebhookPayload.");

            return new WebhookPayload(callbackName.Value!, eventId.Value!.Value!, timestamp.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="WebhookPayload" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhookPayload"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebhookPayload webhookPayload, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webhookPayload, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebhookPayload" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhookPayload"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebhookPayload webhookPayload, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webhookPayload.CallbackName == null)
                throw new ArgumentNullException(nameof(webhookPayload.CallbackName), "Property is required for class WebhookPayload.");

            writer.WriteString("callbackName", webhookPayload.CallbackName);

            writer.WriteString("eventId", webhookPayload.EventId);

            writer.WriteString("timestamp", webhookPayload.Timestamp.ToString(TimestampFormat));
        }
    }

    /// <summary>
    /// The WebhookPayloadSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(WebhookPayload))]
    public partial class WebhookPayloadSerializationContext : JsonSerializerContext { }
}
