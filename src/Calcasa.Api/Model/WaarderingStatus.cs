// <auto-generated>
/*
 * Copyright 2025 Calcasa B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Calcasa Public API
 *
 * The Calcasa API is used to connect to Calcasa provided services. For more information, please visit [Documentation](https://docs.calcasa.nl) or [GitHub](https://github.com/calcasa/api).
 *
 * The version of the OpenAPI document: 1.4.0-rc1
 * Contact: info@calcasa.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using Calcasa.Api.Client;

namespace Calcasa.Api.Model
{
    /// <summary>
    /// | Waarde | Omschrijving | | - -- | - -- | | &#x60;onbekend&#x60; | Status onbekend. | | &#x60;initialiseren&#x60; | Deze waardering is geinitialiseerd maar moet nog bevestigd worden. | | &#x60;open&#x60; | Deze waardering is bevestigd maar moet nog uitgevoerd worden. | | &#x60;voltooid&#x60; | Deze waardering is voltooid. | | &#x60;opgewaardeerd&#x60; | Deze waardering is geupgrade naar een ander waardering type. | | &#x60;ongeldig&#x60; | Deze waardering is niet geldig, bijvoorbeeld omdat hij niet door de business rules is gekomen. | | &#x60;verlopen&#x60; | Deze waardering is verlopen omdat hij niet op tijd bevestigd is. | | &#x60;error&#x60; | Er is iets mis gegaan voor deze waardering. | | &#x60;inBehandeling&#x60; | Deze waardering is in behandeling door het systeem. |
    /// </summary>
    /// <value>| Waarde | Omschrijving | | - -- | - -- | | &#x60;onbekend&#x60; | Status onbekend. | | &#x60;initialiseren&#x60; | Deze waardering is geinitialiseerd maar moet nog bevestigd worden. | | &#x60;open&#x60; | Deze waardering is bevestigd maar moet nog uitgevoerd worden. | | &#x60;voltooid&#x60; | Deze waardering is voltooid. | | &#x60;opgewaardeerd&#x60; | Deze waardering is geupgrade naar een ander waardering type. | | &#x60;ongeldig&#x60; | Deze waardering is niet geldig, bijvoorbeeld omdat hij niet door de business rules is gekomen. | | &#x60;verlopen&#x60; | Deze waardering is verlopen omdat hij niet op tijd bevestigd is. | | &#x60;error&#x60; | Er is iets mis gegaan voor deze waardering. | | &#x60;inBehandeling&#x60; | Deze waardering is in behandeling door het systeem. |</value>
    public enum WaarderingStatus
    {
        /// <summary>
        /// Enum Onbekend for value: onbekend
        /// </summary>
        Onbekend,

        /// <summary>
        /// Enum Initialiseren for value: initialiseren
        /// </summary>
        Initialiseren,

        /// <summary>
        /// Enum Open for value: open
        /// </summary>
        Open,

        /// <summary>
        /// Enum Voltooid for value: voltooid
        /// </summary>
        Voltooid,

        /// <summary>
        /// Enum Opgewaardeerd for value: opgewaardeerd
        /// </summary>
        Opgewaardeerd,

        /// <summary>
        /// Enum Ongeldig for value: ongeldig
        /// </summary>
        Ongeldig,

        /// <summary>
        /// Enum Verlopen for value: verlopen
        /// </summary>
        Verlopen,

        /// <summary>
        /// Enum Error for value: error
        /// </summary>
        Error,

        /// <summary>
        /// Enum InBehandeling for value: inBehandeling
        /// </summary>
        InBehandeling
    }

    /// <summary>
    /// Converts <see cref="WaarderingStatus"/> to and from the JSON value
    /// </summary>
    public static class WaarderingStatusValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="WaarderingStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static WaarderingStatus FromString(string value)
        {
            if (value.Equals("onbekend"))
                return WaarderingStatus.Onbekend;

            if (value.Equals("initialiseren"))
                return WaarderingStatus.Initialiseren;

            if (value.Equals("open"))
                return WaarderingStatus.Open;

            if (value.Equals("voltooid"))
                return WaarderingStatus.Voltooid;

            if (value.Equals("opgewaardeerd"))
                return WaarderingStatus.Opgewaardeerd;

            if (value.Equals("ongeldig"))
                return WaarderingStatus.Ongeldig;

            if (value.Equals("verlopen"))
                return WaarderingStatus.Verlopen;

            if (value.Equals("error"))
                return WaarderingStatus.Error;

            if (value.Equals("inBehandeling"))
                return WaarderingStatus.InBehandeling;

            throw new NotImplementedException($"Could not convert value to type WaarderingStatus: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="WaarderingStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static WaarderingStatus? FromStringOrDefault(string value)
        {
            if (value.Equals("onbekend"))
                return WaarderingStatus.Onbekend;

            if (value.Equals("initialiseren"))
                return WaarderingStatus.Initialiseren;

            if (value.Equals("open"))
                return WaarderingStatus.Open;

            if (value.Equals("voltooid"))
                return WaarderingStatus.Voltooid;

            if (value.Equals("opgewaardeerd"))
                return WaarderingStatus.Opgewaardeerd;

            if (value.Equals("ongeldig"))
                return WaarderingStatus.Ongeldig;

            if (value.Equals("verlopen"))
                return WaarderingStatus.Verlopen;

            if (value.Equals("error"))
                return WaarderingStatus.Error;

            if (value.Equals("inBehandeling"))
                return WaarderingStatus.InBehandeling;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="WaarderingStatus"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(WaarderingStatus value)
        {
            if (value == WaarderingStatus.Onbekend)
                return "onbekend";

            if (value == WaarderingStatus.Initialiseren)
                return "initialiseren";

            if (value == WaarderingStatus.Open)
                return "open";

            if (value == WaarderingStatus.Voltooid)
                return "voltooid";

            if (value == WaarderingStatus.Opgewaardeerd)
                return "opgewaardeerd";

            if (value == WaarderingStatus.Ongeldig)
                return "ongeldig";

            if (value == WaarderingStatus.Verlopen)
                return "verlopen";

            if (value == WaarderingStatus.Error)
                return "error";

            if (value == WaarderingStatus.InBehandeling)
                return "inBehandeling";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WaarderingStatus"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class WaarderingStatusJsonConverter : JsonConverter<WaarderingStatus>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override WaarderingStatus Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            WaarderingStatus? result = rawValue == null
                ? null
                : WaarderingStatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the WaarderingStatus to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="waarderingStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, WaarderingStatus waarderingStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(waarderingStatus.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WaarderingStatus"/>
    /// </summary>
    public class WaarderingStatusNullableJsonConverter : JsonConverter<WaarderingStatus?>
    {
        /// <summary>
        /// Returns a WaarderingStatus from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override WaarderingStatus? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            WaarderingStatus? result = rawValue == null
                ? null
                : WaarderingStatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="waarderingStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, WaarderingStatus? waarderingStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(waarderingStatus?.ToString() ?? "null");
        }
    }


    /// <summary>
    /// The WaarderingStatusSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(WaarderingStatus))]
    public partial class WaarderingStatusSerializationContext : JsonSerializerContext { }
}
