/*
 * Copyright 2022 Calcasa B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Calcasa Public API v1
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: info@calcasa.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = Calcasa.Api.Client.FileParameter;
using OpenAPIDateConverter = Calcasa.Api.Client.OpenAPIDateConverter;

namespace Calcasa.Api.Model
{
    /// <summary>
    /// WaarderingOntwikkelingKwartaalKwartaal
    /// </summary>
    [DataContract(Name = "WaarderingOntwikkelingKwartaal_kwartaal")]
    public partial class WaarderingOntwikkelingKwartaalKwartaal : IEquatable<WaarderingOntwikkelingKwartaalKwartaal>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WaarderingOntwikkelingKwartaalKwartaal" /> class.
        /// </summary>
        /// <param name="jaar">jaar.</param>
        /// <param name="number">Het kwartaal van 1 tot 4..</param>
        public WaarderingOntwikkelingKwartaalKwartaal(int jaar = default(int), int number = default(int))
        {
            this.Jaar = jaar;
            this.Number = number;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets Jaar
        /// </summary>
        [DataMember(Name = "jaar", EmitDefaultValue = false)]
        public int Jaar { get; set; }

        /// <summary>
        /// Het kwartaal van 1 tot 4.
        /// </summary>
        /// <value>Het kwartaal van 1 tot 4.</value>
        [DataMember(Name = "number", EmitDefaultValue = false)]
        public int Number { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WaarderingOntwikkelingKwartaalKwartaal {\n");
            sb.Append("  Jaar: ").Append(Jaar).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WaarderingOntwikkelingKwartaalKwartaal);
        }

        /// <summary>
        /// Returns true if WaarderingOntwikkelingKwartaalKwartaal instances are equal
        /// </summary>
        /// <param name="input">Instance of WaarderingOntwikkelingKwartaalKwartaal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WaarderingOntwikkelingKwartaalKwartaal input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Jaar == input.Jaar ||
                    this.Jaar.Equals(input.Jaar)
                ) && 
                (
                    this.Number == input.Number ||
                    this.Number.Equals(input.Number)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Jaar.GetHashCode();
                hashCode = (hashCode * 59) + this.Number.GetHashCode();
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
