// <auto-generated>
/*
 * Copyright 2025 Calcasa B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Calcasa Public API
 *
 * The Calcasa API is used to connect to Calcasa provided services. For more information, please visit [Documentation](https://docs.calcasa.nl) or [GitHub](https://github.com/calcasa/api).
 *
 * The version of the OpenAPI document: 1.4.0-rc2
 * Contact: info@calcasa.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using System.Text.RegularExpressions;
using Calcasa.Api.Client;

namespace Calcasa.Api.Model
{
    /// <summary>
    /// Factuur
    /// </summary>
    public partial class Factuur
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Factuur" /> class.
        /// </summary>
        /// <param name="id">Het factuur Id.</param>
        /// <param name="factuurnummer">Het factuurnummer van de factuur.</param>
        [JsonConstructor]
        public Factuur(Guid id, string factuurnummer)
        {
            Id = id;
            Factuurnummer = factuurnummer;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Het factuur Id.
        /// </summary>
        /// <value>Het factuur Id.</value>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Het factuurnummer van de factuur.
        /// </summary>
        /// <value>Het factuurnummer van de factuur.</value>
        [JsonPropertyName("factuurnummer")]
        public string Factuurnummer { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Factuur {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Factuurnummer: ").Append(Factuurnummer).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Factuur" />
    /// </summary>
    public class FactuurJsonConverter : JsonConverter<Factuur>
    {
        /// <summary>
        /// Deserializes json to <see cref="Factuur" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Factuur Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<string?> factuurnummer = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "factuurnummer":
                            factuurnummer = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Factuur.", nameof(id));

            if (!factuurnummer.IsSet)
                throw new ArgumentException("Property is required for class Factuur.", nameof(factuurnummer));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Factuur.");

            if (factuurnummer.IsSet && factuurnummer.Value == null)
                throw new ArgumentNullException(nameof(factuurnummer), "Property is not nullable for class Factuur.");

            return new Factuur(id.Value!.Value!, factuurnummer.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="Factuur" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="factuur"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Factuur factuur, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, factuur, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Factuur" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="factuur"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Factuur factuur, JsonSerializerOptions jsonSerializerOptions)
        {
            if (factuur.Factuurnummer == null)
                throw new ArgumentNullException(nameof(factuur.Factuurnummer), "Property is required for class Factuur.");

            writer.WriteString("id", factuur.Id);

            writer.WriteString("factuurnummer", factuur.Factuurnummer);
        }
    }

    /// <summary>
    /// The FactuurSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(Factuur))]
    public partial class FactuurSerializationContext : JsonSerializerContext { }
}
