// <auto-generated>
/*
 * Copyright 2025 Calcasa B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Calcasa Public API
 *
 * The Calcasa API is used to connect to Calcasa provided services. For more information, please visit [Documentation](https://docs.calcasa.nl) or [GitHub](https://github.com/calcasa/api).
 *
 * The version of the OpenAPI document: 1.4.0-rc3
 * Contact: info@calcasa.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using System.Text.RegularExpressions;
using Calcasa.Api.Client;

namespace Calcasa.Api.Model
{
    /// <summary>
    /// Woningtypes zoals gedefinieerd in het Calcasa-model. | Waarde | Omschrijving | | - -- | - -- | | &#x60;onbekend&#x60; | Onbekend woning type. | | &#x60;vrijstaand&#x60; | Vrijstaande woning. | | &#x60;halfVrijstaand&#x60; | Half-vrijstaande woning / twee-onder-een-kap. | | &#x60;hoekwoning&#x60; | Hoekwoning. | | &#x60;tussenwoning&#x60; | Tussenwoning. | | &#x60;galerijflat&#x60; | Galerijflat. | | &#x60;portiekflat&#x60; | Portiekflat. | | &#x60;maisonnette&#x60; | Maisonette. | | &#x60;bovenwoning&#x60; | Bovenwoning. | | &#x60;benedenwoning&#x60; | Benedenwoning. |
    /// </summary>
    /// <value>Woningtypes zoals gedefinieerd in het Calcasa-model. | Waarde | Omschrijving | | - -- | - -- | | &#x60;onbekend&#x60; | Onbekend woning type. | | &#x60;vrijstaand&#x60; | Vrijstaande woning. | | &#x60;halfVrijstaand&#x60; | Half-vrijstaande woning / twee-onder-een-kap. | | &#x60;hoekwoning&#x60; | Hoekwoning. | | &#x60;tussenwoning&#x60; | Tussenwoning. | | &#x60;galerijflat&#x60; | Galerijflat. | | &#x60;portiekflat&#x60; | Portiekflat. | | &#x60;maisonnette&#x60; | Maisonette. | | &#x60;bovenwoning&#x60; | Bovenwoning. | | &#x60;benedenwoning&#x60; | Benedenwoning. |</value>
    public enum WoningType
    {
        /// <summary>
        /// Enum Onbekend for value: onbekend
        /// </summary>
        Onbekend,

        /// <summary>
        /// Enum Vrijstaand for value: vrijstaand
        /// </summary>
        Vrijstaand,

        /// <summary>
        /// Enum HalfVrijstaand for value: halfVrijstaand
        /// </summary>
        HalfVrijstaand,

        /// <summary>
        /// Enum Hoekwoning for value: hoekwoning
        /// </summary>
        Hoekwoning,

        /// <summary>
        /// Enum Tussenwoning for value: tussenwoning
        /// </summary>
        Tussenwoning,

        /// <summary>
        /// Enum Galerijflat for value: galerijflat
        /// </summary>
        Galerijflat,

        /// <summary>
        /// Enum Portiekflat for value: portiekflat
        /// </summary>
        Portiekflat,

        /// <summary>
        /// Enum Maisonnette for value: maisonnette
        /// </summary>
        Maisonnette,

        /// <summary>
        /// Enum Bovenwoning for value: bovenwoning
        /// </summary>
        Bovenwoning,

        /// <summary>
        /// Enum Benedenwoning for value: benedenwoning
        /// </summary>
        Benedenwoning
    }

    /// <summary>
    /// Converts <see cref="WoningType"/> to and from the JSON value
    /// </summary>
    public static class WoningTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="WoningType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static WoningType FromString(string value)
        {
            if (value.Equals("onbekend"))
                return WoningType.Onbekend;

            if (value.Equals("vrijstaand"))
                return WoningType.Vrijstaand;

            if (value.Equals("halfVrijstaand"))
                return WoningType.HalfVrijstaand;

            if (value.Equals("hoekwoning"))
                return WoningType.Hoekwoning;

            if (value.Equals("tussenwoning"))
                return WoningType.Tussenwoning;

            if (value.Equals("galerijflat"))
                return WoningType.Galerijflat;

            if (value.Equals("portiekflat"))
                return WoningType.Portiekflat;

            if (value.Equals("maisonnette"))
                return WoningType.Maisonnette;

            if (value.Equals("bovenwoning"))
                return WoningType.Bovenwoning;

            if (value.Equals("benedenwoning"))
                return WoningType.Benedenwoning;

            throw new NotImplementedException($"Could not convert value to type WoningType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="WoningType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static WoningType? FromStringOrDefault(string value)
        {
            if (value.Equals("onbekend"))
                return WoningType.Onbekend;

            if (value.Equals("vrijstaand"))
                return WoningType.Vrijstaand;

            if (value.Equals("halfVrijstaand"))
                return WoningType.HalfVrijstaand;

            if (value.Equals("hoekwoning"))
                return WoningType.Hoekwoning;

            if (value.Equals("tussenwoning"))
                return WoningType.Tussenwoning;

            if (value.Equals("galerijflat"))
                return WoningType.Galerijflat;

            if (value.Equals("portiekflat"))
                return WoningType.Portiekflat;

            if (value.Equals("maisonnette"))
                return WoningType.Maisonnette;

            if (value.Equals("bovenwoning"))
                return WoningType.Bovenwoning;

            if (value.Equals("benedenwoning"))
                return WoningType.Benedenwoning;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="WoningType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(WoningType value)
        {
            if (value == WoningType.Onbekend)
                return "onbekend";

            if (value == WoningType.Vrijstaand)
                return "vrijstaand";

            if (value == WoningType.HalfVrijstaand)
                return "halfVrijstaand";

            if (value == WoningType.Hoekwoning)
                return "hoekwoning";

            if (value == WoningType.Tussenwoning)
                return "tussenwoning";

            if (value == WoningType.Galerijflat)
                return "galerijflat";

            if (value == WoningType.Portiekflat)
                return "portiekflat";

            if (value == WoningType.Maisonnette)
                return "maisonnette";

            if (value == WoningType.Bovenwoning)
                return "bovenwoning";

            if (value == WoningType.Benedenwoning)
                return "benedenwoning";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WoningType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class WoningTypeJsonConverter : JsonConverter<WoningType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override WoningType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            WoningType? result = rawValue == null
                ? null
                : WoningTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the WoningType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="woningType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, WoningType woningType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(WoningTypeValueConverter.ToJsonValue(woningType).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WoningType"/>
    /// </summary>
    public class WoningTypeNullableJsonConverter : JsonConverter<WoningType?>
    {
        /// <summary>
        /// Returns a WoningType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override WoningType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            WoningType? result = rawValue == null
                ? null
                : WoningTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the WoningType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="woningType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, WoningType? woningType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(woningType.HasValue ? WoningTypeValueConverter.ToJsonValue(woningType.Value).ToString() : "null");
        }
    }


    /// <summary>
    /// The WoningTypeSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(WoningType))]
    public partial class WoningTypeSerializationContext : JsonSerializerContext { }
}
