// <auto-generated>
/*
 * Copyright 2025 Calcasa B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Calcasa Public API
 *
 * The Calcasa API is used to connect to Calcasa provided services. For more information, please visit [Documentation](https://docs.calcasa.nl) or [GitHub](https://github.com/calcasa/api).
 *
 * The version of the OpenAPI document: 1.4.0-rc3
 * Contact: info@calcasa.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using System.Text.RegularExpressions;
using Calcasa.Api.Client;

namespace Calcasa.Api.Model
{
    /// <summary>
    /// CbsIndeling
    /// </summary>
    public partial class CbsIndeling
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CbsIndeling" /> class.
        /// </summary>
        /// <param name="buurtId">De buurt code zoals bekend bij het CBS (Centraal Bureau voor de Statistiek).</param>
        /// <param name="buurtCode">De buurt code zoals bekend bij het CBS (Centraal Bureau voor de Statistiek).</param>
        /// <param name="buurtnaam">De naam van de buurt.</param>
        /// <param name="wijknaam">De naam van de wijk.</param>
        /// <param name="gemeentenaam">De naam van de gemeente.</param>
        [JsonConstructor]
        public CbsIndeling(Option<int?> buurtId = default, Option<string?> buurtCode = default, Option<string?> buurtnaam = default, Option<string?> wijknaam = default, Option<string?> gemeentenaam = default)
        {
            BuurtIdOption = buurtId;
            BuurtCodeOption = buurtCode;
            BuurtnaamOption = buurtnaam;
            WijknaamOption = wijknaam;
            GemeentenaamOption = gemeentenaam;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of BuurtId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> BuurtIdOption { get; private set; }

        /// <summary>
        /// De buurt code zoals bekend bij het CBS (Centraal Bureau voor de Statistiek).
        /// </summary>
        /// <value>De buurt code zoals bekend bij het CBS (Centraal Bureau voor de Statistiek).</value>
        [JsonPropertyName("buurtId")]
        public int? BuurtId { get { return this.BuurtIdOption; } set { this.BuurtIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of BuurtCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BuurtCodeOption { get; private set; }

        /// <summary>
        /// De buurt code zoals bekend bij het CBS (Centraal Bureau voor de Statistiek).
        /// </summary>
        /// <value>De buurt code zoals bekend bij het CBS (Centraal Bureau voor de Statistiek).</value>
        [JsonPropertyName("buurtCode")]
        public string? BuurtCode { get { return this.BuurtCodeOption; } set { this.BuurtCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Buurtnaam
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BuurtnaamOption { get; private set; }

        /// <summary>
        /// De naam van de buurt.
        /// </summary>
        /// <value>De naam van de buurt.</value>
        [JsonPropertyName("buurtnaam")]
        public string? Buurtnaam { get { return this.BuurtnaamOption; } set { this.BuurtnaamOption = new(value); } }

        /// <summary>
        /// Used to track the state of Wijknaam
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WijknaamOption { get; private set; }

        /// <summary>
        /// De naam van de wijk.
        /// </summary>
        /// <value>De naam van de wijk.</value>
        [JsonPropertyName("wijknaam")]
        public string? Wijknaam { get { return this.WijknaamOption; } set { this.WijknaamOption = new(value); } }

        /// <summary>
        /// Used to track the state of Gemeentenaam
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GemeentenaamOption { get; private set; }

        /// <summary>
        /// De naam van de gemeente.
        /// </summary>
        /// <value>De naam van de gemeente.</value>
        [JsonPropertyName("gemeentenaam")]
        public string? Gemeentenaam { get { return this.GemeentenaamOption; } set { this.GemeentenaamOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CbsIndeling {\n");
            sb.Append("  BuurtId: ").Append(BuurtId).Append("\n");
            sb.Append("  BuurtCode: ").Append(BuurtCode).Append("\n");
            sb.Append("  Buurtnaam: ").Append(Buurtnaam).Append("\n");
            sb.Append("  Wijknaam: ").Append(Wijknaam).Append("\n");
            sb.Append("  Gemeentenaam: ").Append(Gemeentenaam).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CbsIndeling" />
    /// </summary>
    public class CbsIndelingJsonConverter : JsonConverter<CbsIndeling>
    {
        /// <summary>
        /// Deserializes json to <see cref="CbsIndeling" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CbsIndeling Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> buurtId = default;
            Option<string?> buurtCode = default;
            Option<string?> buurtnaam = default;
            Option<string?> wijknaam = default;
            Option<string?> gemeentenaam = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "buurtId":
                            buurtId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "buurtCode":
                            buurtCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "buurtnaam":
                            buurtnaam = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "wijknaam":
                            wijknaam = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "gemeentenaam":
                            gemeentenaam = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (buurtId.IsSet && buurtId.Value == null)
                throw new ArgumentNullException(nameof(buurtId), "Property is not nullable for class CbsIndeling.");

            if (buurtCode.IsSet && buurtCode.Value == null)
                throw new ArgumentNullException(nameof(buurtCode), "Property is not nullable for class CbsIndeling.");

            if (buurtnaam.IsSet && buurtnaam.Value == null)
                throw new ArgumentNullException(nameof(buurtnaam), "Property is not nullable for class CbsIndeling.");

            if (wijknaam.IsSet && wijknaam.Value == null)
                throw new ArgumentNullException(nameof(wijknaam), "Property is not nullable for class CbsIndeling.");

            if (gemeentenaam.IsSet && gemeentenaam.Value == null)
                throw new ArgumentNullException(nameof(gemeentenaam), "Property is not nullable for class CbsIndeling.");

            return new CbsIndeling(buurtId, buurtCode, buurtnaam, wijknaam, gemeentenaam);
        }

        /// <summary>
        /// Serializes a <see cref="CbsIndeling" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cbsIndeling"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CbsIndeling cbsIndeling, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, cbsIndeling, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CbsIndeling" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cbsIndeling"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CbsIndeling cbsIndeling, JsonSerializerOptions jsonSerializerOptions)
        {
            if (cbsIndeling.BuurtCodeOption.IsSet && cbsIndeling.BuurtCode == null)
                throw new ArgumentNullException(nameof(cbsIndeling.BuurtCode), "Property is required for class CbsIndeling.");

            if (cbsIndeling.BuurtnaamOption.IsSet && cbsIndeling.Buurtnaam == null)
                throw new ArgumentNullException(nameof(cbsIndeling.Buurtnaam), "Property is required for class CbsIndeling.");

            if (cbsIndeling.WijknaamOption.IsSet && cbsIndeling.Wijknaam == null)
                throw new ArgumentNullException(nameof(cbsIndeling.Wijknaam), "Property is required for class CbsIndeling.");

            if (cbsIndeling.GemeentenaamOption.IsSet && cbsIndeling.Gemeentenaam == null)
                throw new ArgumentNullException(nameof(cbsIndeling.Gemeentenaam), "Property is required for class CbsIndeling.");

            if (cbsIndeling.BuurtIdOption.IsSet)
                writer.WriteNumber("buurtId", cbsIndeling.BuurtIdOption.Value!.Value);

            if (cbsIndeling.BuurtCodeOption.IsSet)
                writer.WriteString("buurtCode", cbsIndeling.BuurtCode);

            if (cbsIndeling.BuurtnaamOption.IsSet)
                writer.WriteString("buurtnaam", cbsIndeling.Buurtnaam);

            if (cbsIndeling.WijknaamOption.IsSet)
                writer.WriteString("wijknaam", cbsIndeling.Wijknaam);

            if (cbsIndeling.GemeentenaamOption.IsSet)
                writer.WriteString("gemeentenaam", cbsIndeling.Gemeentenaam);
        }
    }

    /// <summary>
    /// The CbsIndelingSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(CbsIndeling))]
    public partial class CbsIndelingSerializationContext : JsonSerializerContext { }
}
