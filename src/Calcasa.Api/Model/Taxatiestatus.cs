// <auto-generated>
/*
 * Copyright 2025 Calcasa B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Calcasa Public API
 *
 * The Calcasa API is used to connect to Calcasa provided services. For more information, please visit [Documentation](https://docs.calcasa.nl) or [GitHub](https://github.com/calcasa/api).
 *
 * The version of the OpenAPI document: 1.4.0-rc2
 * Contact: info@calcasa.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using System.Text.RegularExpressions;
using Calcasa.Api.Client;

namespace Calcasa.Api.Model
{
    /// <summary>
    /// | Waarde | Omschrijving | | - -- | - -- | | &#x60;nietGecontroleerd&#x60; | Status is onbekend of niet van toepassing. | | &#x60;goedgekeurd&#x60; | De waardering is geaccepteerd door een taxateur. | | &#x60;afgekeurd&#x60; | De waardering is afgewezen door een taxateur. |
    /// </summary>
    /// <value>| Waarde | Omschrijving | | - -- | - -- | | &#x60;nietGecontroleerd&#x60; | Status is onbekend of niet van toepassing. | | &#x60;goedgekeurd&#x60; | De waardering is geaccepteerd door een taxateur. | | &#x60;afgekeurd&#x60; | De waardering is afgewezen door een taxateur. |</value>
    public enum Taxatiestatus
    {
        /// <summary>
        /// Enum NietGecontroleerd for value: nietGecontroleerd
        /// </summary>
        NietGecontroleerd,

        /// <summary>
        /// Enum Goedgekeurd for value: goedgekeurd
        /// </summary>
        Goedgekeurd,

        /// <summary>
        /// Enum Afgekeurd for value: afgekeurd
        /// </summary>
        Afgekeurd
    }

    /// <summary>
    /// Converts <see cref="Taxatiestatus"/> to and from the JSON value
    /// </summary>
    public static class TaxatiestatusValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="Taxatiestatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Taxatiestatus FromString(string value)
        {
            if (value.Equals("nietGecontroleerd"))
                return Taxatiestatus.NietGecontroleerd;

            if (value.Equals("goedgekeurd"))
                return Taxatiestatus.Goedgekeurd;

            if (value.Equals("afgekeurd"))
                return Taxatiestatus.Afgekeurd;

            throw new NotImplementedException($"Could not convert value to type Taxatiestatus: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="Taxatiestatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Taxatiestatus? FromStringOrDefault(string value)
        {
            if (value.Equals("nietGecontroleerd"))
                return Taxatiestatus.NietGecontroleerd;

            if (value.Equals("goedgekeurd"))
                return Taxatiestatus.Goedgekeurd;

            if (value.Equals("afgekeurd"))
                return Taxatiestatus.Afgekeurd;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="Taxatiestatus"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(Taxatiestatus value)
        {
            if (value == Taxatiestatus.NietGecontroleerd)
                return "nietGecontroleerd";

            if (value == Taxatiestatus.Goedgekeurd)
                return "goedgekeurd";

            if (value == Taxatiestatus.Afgekeurd)
                return "afgekeurd";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Taxatiestatus"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class TaxatiestatusJsonConverter : JsonConverter<Taxatiestatus>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Taxatiestatus Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Taxatiestatus? result = rawValue == null
                ? null
                : TaxatiestatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the Taxatiestatus to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="taxatiestatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Taxatiestatus taxatiestatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(TaxatiestatusValueConverter.ToJsonValue(taxatiestatus).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Taxatiestatus"/>
    /// </summary>
    public class TaxatiestatusNullableJsonConverter : JsonConverter<Taxatiestatus?>
    {
        /// <summary>
        /// Returns a Taxatiestatus from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Taxatiestatus? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Taxatiestatus? result = rawValue == null
                ? null
                : TaxatiestatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the Taxatiestatus to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="taxatiestatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Taxatiestatus? taxatiestatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(taxatiestatus.HasValue ? TaxatiestatusValueConverter.ToJsonValue(taxatiestatus.Value).ToString() : "null");
        }
    }


    /// <summary>
    /// The TaxatiestatusSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(Taxatiestatus))]
    public partial class TaxatiestatusSerializationContext : JsonSerializerContext { }
}
