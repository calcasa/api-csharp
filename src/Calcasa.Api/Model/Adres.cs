// <auto-generated>
/*
 * Copyright 2025 Calcasa B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Calcasa Public API
 *
 * The Calcasa API is used to connect to Calcasa provided services. For more information, please visit [Documentation](https://docs.calcasa.nl) or [GitHub](https://github.com/calcasa/api).
 *
 * The version of the OpenAPI document: 1.4.0-rc1
 * Contact: info@calcasa.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using Calcasa.Api.Client;

namespace Calcasa.Api.Model
{
    /// <summary>
    /// Adres
    /// </summary>
    public partial class Adres
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Adres" /> class.
        /// </summary>
        /// <param name="straat">De straatnaam zoals geschreven in de BAG (Basisregistratie Adressen en Gebouwen).</param>
        /// <param name="huisnummer">Het huisnummer.</param>
        /// <param name="huisnummertoevoeging">De huisnummertoevoeging.</param>
        /// <param name="postcode">De postcode met 4 cijfers en 2 letters zonder spatie.</param>
        /// <param name="woonplaats">De woonplaats zoals geschreven in de BAG (Basisregistratie Adressen en Gebouwen).</param>
        [JsonConstructor]
        public Adres(Option<string?> straat = default, Option<int?> huisnummer = default, Option<string?> huisnummertoevoeging = default, Option<string?> postcode = default, Option<string?> woonplaats = default)
        {
            StraatOption = straat;
            HuisnummerOption = huisnummer;
            HuisnummertoevoegingOption = huisnummertoevoeging;
            PostcodeOption = postcode;
            WoonplaatsOption = woonplaats;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Straat
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StraatOption { get; private set; }

        /// <summary>
        /// De straatnaam zoals geschreven in de BAG (Basisregistratie Adressen en Gebouwen).
        /// </summary>
        /// <value>De straatnaam zoals geschreven in de BAG (Basisregistratie Adressen en Gebouwen).</value>
        /* <example>Voorbeeldstraat</example> */
        [JsonPropertyName("straat")]
        public string? Straat { get { return this.StraatOption; } set { this.StraatOption = new(value); } }

        /// <summary>
        /// Used to track the state of Huisnummer
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> HuisnummerOption { get; private set; }

        /// <summary>
        /// Het huisnummer.
        /// </summary>
        /// <value>Het huisnummer.</value>
        /* <example>123</example> */
        [JsonPropertyName("huisnummer")]
        public int? Huisnummer { get { return this.HuisnummerOption; } set { this.HuisnummerOption = new(value); } }

        /// <summary>
        /// Used to track the state of Huisnummertoevoeging
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HuisnummertoevoegingOption { get; private set; }

        /// <summary>
        /// De huisnummertoevoeging.
        /// </summary>
        /// <value>De huisnummertoevoeging.</value>
        /* <example>A</example> */
        [JsonPropertyName("huisnummertoevoeging")]
        public string? Huisnummertoevoeging { get { return this.HuisnummertoevoegingOption; } set { this.HuisnummertoevoegingOption = new(value); } }

        /// <summary>
        /// Used to track the state of Postcode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PostcodeOption { get; private set; }

        /// <summary>
        /// De postcode met 4 cijfers en 2 letters zonder spatie.
        /// </summary>
        /// <value>De postcode met 4 cijfers en 2 letters zonder spatie.</value>
        /* <example>1234AB</example> */
        [JsonPropertyName("postcode")]
        public string? Postcode { get { return this.PostcodeOption; } set { this.PostcodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Woonplaats
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WoonplaatsOption { get; private set; }

        /// <summary>
        /// De woonplaats zoals geschreven in de BAG (Basisregistratie Adressen en Gebouwen).
        /// </summary>
        /// <value>De woonplaats zoals geschreven in de BAG (Basisregistratie Adressen en Gebouwen).</value>
        /* <example>Voorbeeldstad</example> */
        [JsonPropertyName("woonplaats")]
        public string? Woonplaats { get { return this.WoonplaatsOption; } set { this.WoonplaatsOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Adres {\n");
            sb.Append("  Straat: ").Append(Straat).Append("\n");
            sb.Append("  Huisnummer: ").Append(Huisnummer).Append("\n");
            sb.Append("  Huisnummertoevoeging: ").Append(Huisnummertoevoeging).Append("\n");
            sb.Append("  Postcode: ").Append(Postcode).Append("\n");
            sb.Append("  Woonplaats: ").Append(Woonplaats).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Adres" />
    /// </summary>
    public class AdresJsonConverter : JsonConverter<Adres>
    {
        /// <summary>
        /// Deserializes json to <see cref="Adres" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Adres Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> straat = default;
            Option<int?> huisnummer = default;
            Option<string?> huisnummertoevoeging = default;
            Option<string?> postcode = default;
            Option<string?> woonplaats = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "straat":
                            straat = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "huisnummer":
                            huisnummer = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "huisnummertoevoeging":
                            huisnummertoevoeging = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "postcode":
                            postcode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "woonplaats":
                            woonplaats = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (straat.IsSet && straat.Value == null)
                throw new ArgumentNullException(nameof(straat), "Property is not nullable for class Adres.");

            if (huisnummer.IsSet && huisnummer.Value == null)
                throw new ArgumentNullException(nameof(huisnummer), "Property is not nullable for class Adres.");

            if (postcode.IsSet && postcode.Value == null)
                throw new ArgumentNullException(nameof(postcode), "Property is not nullable for class Adres.");

            if (woonplaats.IsSet && woonplaats.Value == null)
                throw new ArgumentNullException(nameof(woonplaats), "Property is not nullable for class Adres.");

            return new Adres(straat, huisnummer, huisnummertoevoeging, postcode, woonplaats);
        }

        /// <summary>
        /// Serializes a <see cref="Adres" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="adres"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Adres adres, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, adres, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Adres" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="adres"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Adres adres, JsonSerializerOptions jsonSerializerOptions)
        {
            if (adres.StraatOption.IsSet && adres.Straat == null)
                throw new ArgumentNullException(nameof(adres.Straat), "Property is required for class Adres.");

            if (adres.PostcodeOption.IsSet && adres.Postcode == null)
                throw new ArgumentNullException(nameof(adres.Postcode), "Property is required for class Adres.");

            if (adres.WoonplaatsOption.IsSet && adres.Woonplaats == null)
                throw new ArgumentNullException(nameof(adres.Woonplaats), "Property is required for class Adres.");

            if (adres.StraatOption.IsSet)
                writer.WriteString("straat", adres.Straat);

            if (adres.HuisnummerOption.IsSet)
                writer.WriteNumber("huisnummer", adres.HuisnummerOption.Value!.Value);

            if (adres.HuisnummertoevoegingOption.IsSet)
                if (adres.HuisnummertoevoegingOption.Value != null)
                    writer.WriteString("huisnummertoevoeging", adres.Huisnummertoevoeging);
                else
                    writer.WriteNull("huisnummertoevoeging");

            if (adres.PostcodeOption.IsSet)
                writer.WriteString("postcode", adres.Postcode);

            if (adres.WoonplaatsOption.IsSet)
                writer.WriteString("woonplaats", adres.Woonplaats);
        }
    }

    /// <summary>
    /// The AdresSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(Adres))]
    public partial class AdresSerializationContext : JsonSerializerContext { }
}
