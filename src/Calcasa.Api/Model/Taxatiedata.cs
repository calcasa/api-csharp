// <auto-generated>
/*
 * Copyright 2025 Calcasa B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Calcasa Public API
 *
 * The Calcasa API is used to connect to Calcasa provided services. For more information, please visit [Documentation](https://docs.calcasa.nl) or [GitHub](https://github.com/calcasa/api).
 *
 * The version of the OpenAPI document: 1.4.0-rc3
 * Contact: info@calcasa.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using System.Text.RegularExpressions;
using Calcasa.Api.Client;

namespace Calcasa.Api.Model
{
    /// <summary>
    /// Taxatiedata
    /// </summary>
    public partial class Taxatiedata
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Taxatiedata" /> class.
        /// </summary>
        /// <param name="taxatieorganisatie">De interne naam van de taxatieorganisatie. Deze wijzigt niet.</param>
        /// <param name="taxatieorganisatieWeergave">De externe of rapport naam van de taxatieorganisatie.</param>
        /// <param name="taxateurnaam">De naam van de taxateur die de waardering heeft behandeld.</param>
        /// <param name="status">status</param>
        /// <param name="taxatiedatum">De datum/tijd waarop de waardering getaxeerd is, in UTC.</param>
        [JsonConstructor]
        public Taxatiedata(Option<string?> taxatieorganisatie = default, Option<string?> taxatieorganisatieWeergave = default, Option<string?> taxateurnaam = default, Option<Taxatiestatus?> status = default, Option<DateTime?> taxatiedatum = default)
        {
            TaxatieorganisatieOption = taxatieorganisatie;
            TaxatieorganisatieWeergaveOption = taxatieorganisatieWeergave;
            TaxateurnaamOption = taxateurnaam;
            StatusOption = status;
            TaxatiedatumOption = taxatiedatum;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Taxatiestatus?> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public Taxatiestatus? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of Taxatieorganisatie
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TaxatieorganisatieOption { get; private set; }

        /// <summary>
        /// De interne naam van de taxatieorganisatie. Deze wijzigt niet.
        /// </summary>
        /// <value>De interne naam van de taxatieorganisatie. Deze wijzigt niet.</value>
        [JsonPropertyName("taxatieorganisatie")]
        public string? Taxatieorganisatie { get { return this.TaxatieorganisatieOption; } set { this.TaxatieorganisatieOption = new(value); } }

        /// <summary>
        /// Used to track the state of TaxatieorganisatieWeergave
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TaxatieorganisatieWeergaveOption { get; private set; }

        /// <summary>
        /// De externe of rapport naam van de taxatieorganisatie.
        /// </summary>
        /// <value>De externe of rapport naam van de taxatieorganisatie.</value>
        [JsonPropertyName("taxatieorganisatieWeergave")]
        public string? TaxatieorganisatieWeergave { get { return this.TaxatieorganisatieWeergaveOption; } set { this.TaxatieorganisatieWeergaveOption = new(value); } }

        /// <summary>
        /// Used to track the state of Taxateurnaam
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TaxateurnaamOption { get; private set; }

        /// <summary>
        /// De naam van de taxateur die de waardering heeft behandeld.
        /// </summary>
        /// <value>De naam van de taxateur die de waardering heeft behandeld.</value>
        [JsonPropertyName("taxateurnaam")]
        public string? Taxateurnaam { get { return this.TaxateurnaamOption; } set { this.TaxateurnaamOption = new(value); } }

        /// <summary>
        /// Used to track the state of Taxatiedatum
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> TaxatiedatumOption { get; private set; }

        /// <summary>
        /// De datum/tijd waarop de waardering getaxeerd is, in UTC.
        /// </summary>
        /// <value>De datum/tijd waarop de waardering getaxeerd is, in UTC.</value>
        /* <example>2021-04-28T12:34:45Z</example> */
        [JsonPropertyName("taxatiedatum")]
        public DateTime? Taxatiedatum { get { return this.TaxatiedatumOption; } set { this.TaxatiedatumOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Taxatiedata {\n");
            sb.Append("  Taxatieorganisatie: ").Append(Taxatieorganisatie).Append("\n");
            sb.Append("  TaxatieorganisatieWeergave: ").Append(TaxatieorganisatieWeergave).Append("\n");
            sb.Append("  Taxateurnaam: ").Append(Taxateurnaam).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Taxatiedatum: ").Append(Taxatiedatum).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Taxatiedata" />
    /// </summary>
    public class TaxatiedataJsonConverter : JsonConverter<Taxatiedata>
    {
        /// <summary>
        /// The format to use to serialize Taxatiedatum
        /// </summary>
        public static string TaxatiedatumFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ssZ";

        /// <summary>
        /// Deserializes json to <see cref="Taxatiedata" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Taxatiedata Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> taxatieorganisatie = default;
            Option<string?> taxatieorganisatieWeergave = default;
            Option<string?> taxateurnaam = default;
            Option<Taxatiestatus?> status = default;
            Option<DateTime?> taxatiedatum = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "taxatieorganisatie":
                            taxatieorganisatie = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "taxatieorganisatieWeergave":
                            taxatieorganisatieWeergave = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "taxateurnaam":
                            taxateurnaam = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<Taxatiestatus?>(TaxatiestatusValueConverter.FromStringOrDefault(statusRawValue));
                            break;
                        case "taxatiedatum":
                            taxatiedatum = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (taxatieorganisatie.IsSet && taxatieorganisatie.Value == null)
                throw new ArgumentNullException(nameof(taxatieorganisatie), "Property is not nullable for class Taxatiedata.");

            if (taxatieorganisatieWeergave.IsSet && taxatieorganisatieWeergave.Value == null)
                throw new ArgumentNullException(nameof(taxatieorganisatieWeergave), "Property is not nullable for class Taxatiedata.");

            if (taxateurnaam.IsSet && taxateurnaam.Value == null)
                throw new ArgumentNullException(nameof(taxateurnaam), "Property is not nullable for class Taxatiedata.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class Taxatiedata.");

            if (taxatiedatum.IsSet && taxatiedatum.Value == null)
                throw new ArgumentNullException(nameof(taxatiedatum), "Property is not nullable for class Taxatiedata.");

            return new Taxatiedata(taxatieorganisatie, taxatieorganisatieWeergave, taxateurnaam, status, taxatiedatum);
        }

        /// <summary>
        /// Serializes a <see cref="Taxatiedata" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="taxatiedata"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Taxatiedata taxatiedata, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, taxatiedata, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Taxatiedata" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="taxatiedata"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Taxatiedata taxatiedata, JsonSerializerOptions jsonSerializerOptions)
        {
            if (taxatiedata.TaxatieorganisatieOption.IsSet && taxatiedata.Taxatieorganisatie == null)
                throw new ArgumentNullException(nameof(taxatiedata.Taxatieorganisatie), "Property is required for class Taxatiedata.");

            if (taxatiedata.TaxatieorganisatieWeergaveOption.IsSet && taxatiedata.TaxatieorganisatieWeergave == null)
                throw new ArgumentNullException(nameof(taxatiedata.TaxatieorganisatieWeergave), "Property is required for class Taxatiedata.");

            if (taxatiedata.TaxateurnaamOption.IsSet && taxatiedata.Taxateurnaam == null)
                throw new ArgumentNullException(nameof(taxatiedata.Taxateurnaam), "Property is required for class Taxatiedata.");

            if (taxatiedata.TaxatieorganisatieOption.IsSet)
                writer.WriteString("taxatieorganisatie", taxatiedata.Taxatieorganisatie);

            if (taxatiedata.TaxatieorganisatieWeergaveOption.IsSet)
                writer.WriteString("taxatieorganisatieWeergave", taxatiedata.TaxatieorganisatieWeergave);

            if (taxatiedata.TaxateurnaamOption.IsSet)
                writer.WriteString("taxateurnaam", taxatiedata.Taxateurnaam);

            if (taxatiedata.StatusOption.IsSet)
            {
                var statusRawValue = TaxatiestatusValueConverter.ToJsonValue(taxatiedata.Status!.Value);
                writer.WriteString("status", statusRawValue);
            }
            if (taxatiedata.TaxatiedatumOption.IsSet)
                writer.WriteString("taxatiedatum", taxatiedata.TaxatiedatumOption.Value!.Value.ToString(TaxatiedatumFormat));
        }
    }

    /// <summary>
    /// The TaxatiedataSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(Taxatiedata))]
    public partial class TaxatiedataSerializationContext : JsonSerializerContext { }
}
