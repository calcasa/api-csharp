// <auto-generated>
/*
 * Copyright 2025 Calcasa B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Calcasa Public API
 *
 * The Calcasa API is used to connect to Calcasa provided services. For more information, please visit [Documentation](https://docs.calcasa.nl) or [GitHub](https://github.com/calcasa/api).
 *
 * The version of the OpenAPI document: 1.4.0-rc2
 * Contact: info@calcasa.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using System.Text.RegularExpressions;
using Calcasa.Api.Client;

namespace Calcasa.Api.Model
{
    /// <summary>
    /// Modeldata
    /// </summary>
    public partial class Modeldata
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Modeldata" /> class.
        /// </summary>
        /// <param name="marktwaarde">In hele euros.</param>
        /// <param name="marktwaardeOndergrens">In hele euros.</param>
        /// <param name="marktwaardeBovengrens">In hele euros.</param>
        /// <param name="confidenceLevel">Op een schaal van 0 tot 7.</param>
        /// <param name="waardebepalingsdatum">waardebepalingsdatum</param>
        /// <param name="executiewaarde">In hele euros.</param>
        [JsonConstructor]
        public Modeldata(Option<int?> marktwaarde = default, Option<int?> marktwaardeOndergrens = default, Option<int?> marktwaardeBovengrens = default, Option<float?> confidenceLevel = default, Option<DateOnly?> waardebepalingsdatum = default, Option<int?> executiewaarde = default)
        {
            MarktwaardeOption = marktwaarde;
            MarktwaardeOndergrensOption = marktwaardeOndergrens;
            MarktwaardeBovengrensOption = marktwaardeBovengrens;
            ConfidenceLevelOption = confidenceLevel;
            WaardebepalingsdatumOption = waardebepalingsdatum;
            ExecutiewaardeOption = executiewaarde;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Marktwaarde
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MarktwaardeOption { get; private set; }

        /// <summary>
        /// In hele euros.
        /// </summary>
        /// <value>In hele euros.</value>
        [JsonPropertyName("marktwaarde")]
        public int? Marktwaarde { get { return this.MarktwaardeOption; } set { this.MarktwaardeOption = new(value); } }

        /// <summary>
        /// Used to track the state of MarktwaardeOndergrens
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MarktwaardeOndergrensOption { get; private set; }

        /// <summary>
        /// In hele euros.
        /// </summary>
        /// <value>In hele euros.</value>
        [JsonPropertyName("marktwaardeOndergrens")]
        public int? MarktwaardeOndergrens { get { return this.MarktwaardeOndergrensOption; } set { this.MarktwaardeOndergrensOption = new(value); } }

        /// <summary>
        /// Used to track the state of MarktwaardeBovengrens
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MarktwaardeBovengrensOption { get; private set; }

        /// <summary>
        /// In hele euros.
        /// </summary>
        /// <value>In hele euros.</value>
        [JsonPropertyName("marktwaardeBovengrens")]
        public int? MarktwaardeBovengrens { get { return this.MarktwaardeBovengrensOption; } set { this.MarktwaardeBovengrensOption = new(value); } }

        /// <summary>
        /// Used to track the state of ConfidenceLevel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<float?> ConfidenceLevelOption { get; private set; }

        /// <summary>
        /// Op een schaal van 0 tot 7.
        /// </summary>
        /// <value>Op een schaal van 0 tot 7.</value>
        [JsonPropertyName("confidenceLevel")]
        public float? ConfidenceLevel { get { return this.ConfidenceLevelOption; } set { this.ConfidenceLevelOption = new(value); } }

        /// <summary>
        /// Used to track the state of Waardebepalingsdatum
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> WaardebepalingsdatumOption { get; private set; }

        /// <summary>
        /// Gets or Sets Waardebepalingsdatum
        /// </summary>
        /* <example>Wed Apr 28 00:00:00 UTC 2021</example> */
        [JsonPropertyName("waardebepalingsdatum")]
        public DateOnly? Waardebepalingsdatum { get { return this.WaardebepalingsdatumOption; } set { this.WaardebepalingsdatumOption = new(value); } }

        /// <summary>
        /// Used to track the state of Executiewaarde
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ExecutiewaardeOption { get; private set; }

        /// <summary>
        /// In hele euros.
        /// </summary>
        /// <value>In hele euros.</value>
        [JsonPropertyName("executiewaarde")]
        public int? Executiewaarde { get { return this.ExecutiewaardeOption; } set { this.ExecutiewaardeOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Modeldata {\n");
            sb.Append("  Marktwaarde: ").Append(Marktwaarde).Append("\n");
            sb.Append("  MarktwaardeOndergrens: ").Append(MarktwaardeOndergrens).Append("\n");
            sb.Append("  MarktwaardeBovengrens: ").Append(MarktwaardeBovengrens).Append("\n");
            sb.Append("  ConfidenceLevel: ").Append(ConfidenceLevel).Append("\n");
            sb.Append("  Waardebepalingsdatum: ").Append(Waardebepalingsdatum).Append("\n");
            sb.Append("  Executiewaarde: ").Append(Executiewaarde).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Modeldata" />
    /// </summary>
    public class ModeldataJsonConverter : JsonConverter<Modeldata>
    {
        /// <summary>
        /// The format to use to serialize Waardebepalingsdatum
        /// </summary>
        public static string WaardebepalingsdatumFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="Modeldata" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Modeldata Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> marktwaarde = default;
            Option<int?> marktwaardeOndergrens = default;
            Option<int?> marktwaardeBovengrens = default;
            Option<float?> confidenceLevel = default;
            Option<DateOnly?> waardebepalingsdatum = default;
            Option<int?> executiewaarde = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "marktwaarde":
                            marktwaarde = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "marktwaardeOndergrens":
                            marktwaardeOndergrens = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "marktwaardeBovengrens":
                            marktwaardeBovengrens = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "confidenceLevel":
                            confidenceLevel = new Option<float?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (float?)null : (float)utf8JsonReader.GetDouble());
                            break;
                        case "waardebepalingsdatum":
                            waardebepalingsdatum = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "executiewaarde":
                            executiewaarde = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (marktwaarde.IsSet && marktwaarde.Value == null)
                throw new ArgumentNullException(nameof(marktwaarde), "Property is not nullable for class Modeldata.");

            if (marktwaardeOndergrens.IsSet && marktwaardeOndergrens.Value == null)
                throw new ArgumentNullException(nameof(marktwaardeOndergrens), "Property is not nullable for class Modeldata.");

            if (marktwaardeBovengrens.IsSet && marktwaardeBovengrens.Value == null)
                throw new ArgumentNullException(nameof(marktwaardeBovengrens), "Property is not nullable for class Modeldata.");

            if (confidenceLevel.IsSet && confidenceLevel.Value == null)
                throw new ArgumentNullException(nameof(confidenceLevel), "Property is not nullable for class Modeldata.");

            if (waardebepalingsdatum.IsSet && waardebepalingsdatum.Value == null)
                throw new ArgumentNullException(nameof(waardebepalingsdatum), "Property is not nullable for class Modeldata.");

            if (executiewaarde.IsSet && executiewaarde.Value == null)
                throw new ArgumentNullException(nameof(executiewaarde), "Property is not nullable for class Modeldata.");

            return new Modeldata(marktwaarde, marktwaardeOndergrens, marktwaardeBovengrens, confidenceLevel, waardebepalingsdatum, executiewaarde);
        }

        /// <summary>
        /// Serializes a <see cref="Modeldata" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="modeldata"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Modeldata modeldata, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, modeldata, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Modeldata" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="modeldata"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Modeldata modeldata, JsonSerializerOptions jsonSerializerOptions)
        {
            if (modeldata.MarktwaardeOption.IsSet)
                writer.WriteNumber("marktwaarde", modeldata.MarktwaardeOption.Value!.Value);

            if (modeldata.MarktwaardeOndergrensOption.IsSet)
                writer.WriteNumber("marktwaardeOndergrens", modeldata.MarktwaardeOndergrensOption.Value!.Value);

            if (modeldata.MarktwaardeBovengrensOption.IsSet)
                writer.WriteNumber("marktwaardeBovengrens", modeldata.MarktwaardeBovengrensOption.Value!.Value);

            if (modeldata.ConfidenceLevelOption.IsSet)
                writer.WriteNumber("confidenceLevel", modeldata.ConfidenceLevelOption.Value!.Value);

            if (modeldata.WaardebepalingsdatumOption.IsSet)
                writer.WriteString("waardebepalingsdatum", modeldata.WaardebepalingsdatumOption.Value!.Value.ToString(WaardebepalingsdatumFormat));

            if (modeldata.ExecutiewaardeOption.IsSet)
                writer.WriteNumber("executiewaarde", modeldata.ExecutiewaardeOption.Value!.Value);
        }
    }

    /// <summary>
    /// The ModeldataSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(Modeldata))]
    public partial class ModeldataSerializationContext : JsonSerializerContext { }
}
