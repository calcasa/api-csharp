// <auto-generated>
/*
 * Copyright 2025 Calcasa B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Calcasa Public API
 *
 * The Calcasa API is used to connect to Calcasa provided services. For more information, please visit [Documentation](https://docs.calcasa.nl) or [GitHub](https://github.com/calcasa/api).
 *
 * The version of the OpenAPI document: 1.4.0-rc2
 * Contact: info@calcasa.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using System.Text.RegularExpressions;
using Calcasa.Api.Client;

namespace Calcasa.Api.Model
{
    /// <summary>
    /// Objectdata
    /// </summary>
    public partial class Objectdata
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Objectdata" /> class.
        /// </summary>
        /// <param name="woningType">woningType</param>
        /// <param name="bouwjaar">bouwjaar</param>
        /// <param name="oppervlak">Het woonoppervlak in hele vierkante meters.</param>
        /// <param name="perceeloppervlak">Het perceeloppervlak in hele vierkante meters.</param>
        /// <param name="inhoud">De inhoud in hele kubieke meters.</param>
        /// <param name="energielabel">energielabel</param>
        /// <param name="energielabelData">energielabelData</param>
        [JsonConstructor]
        public Objectdata(Option<WoningType?> woningType = default, Option<int?> bouwjaar = default, Option<int?> oppervlak = default, Option<int?> perceeloppervlak = default, Option<int?> inhoud = default, Option<Energielabel?> energielabel = default, Option<EnergielabelData?> energielabelData = default)
        {
            WoningTypeOption = woningType;
            BouwjaarOption = bouwjaar;
            OppervlakOption = oppervlak;
            PerceeloppervlakOption = perceeloppervlak;
            InhoudOption = inhoud;
            EnergielabelOption = energielabel;
            EnergielabelDataOption = energielabelData;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of WoningType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WoningType?> WoningTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets WoningType
        /// </summary>
        [JsonPropertyName("woningType")]
        public WoningType? WoningType { get { return this.WoningTypeOption; } set { this.WoningTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Energielabel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Energielabel?> EnergielabelOption { get; private set; }

        /// <summary>
        /// Gets or Sets Energielabel
        /// </summary>
        [JsonPropertyName("energielabel")]
        public Energielabel? Energielabel { get { return this.EnergielabelOption; } set { this.EnergielabelOption = new(value); } }

        /// <summary>
        /// Used to track the state of Bouwjaar
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> BouwjaarOption { get; private set; }

        /// <summary>
        /// Gets or Sets Bouwjaar
        /// </summary>
        [JsonPropertyName("bouwjaar")]
        public int? Bouwjaar { get { return this.BouwjaarOption; } set { this.BouwjaarOption = new(value); } }

        /// <summary>
        /// Used to track the state of Oppervlak
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OppervlakOption { get; private set; }

        /// <summary>
        /// Het woonoppervlak in hele vierkante meters.
        /// </summary>
        /// <value>Het woonoppervlak in hele vierkante meters.</value>
        [JsonPropertyName("oppervlak")]
        public int? Oppervlak { get { return this.OppervlakOption; } set { this.OppervlakOption = new(value); } }

        /// <summary>
        /// Used to track the state of Perceeloppervlak
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PerceeloppervlakOption { get; private set; }

        /// <summary>
        /// Het perceeloppervlak in hele vierkante meters.
        /// </summary>
        /// <value>Het perceeloppervlak in hele vierkante meters.</value>
        [JsonPropertyName("perceeloppervlak")]
        public int? Perceeloppervlak { get { return this.PerceeloppervlakOption; } set { this.PerceeloppervlakOption = new(value); } }

        /// <summary>
        /// Used to track the state of Inhoud
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> InhoudOption { get; private set; }

        /// <summary>
        /// De inhoud in hele kubieke meters.
        /// </summary>
        /// <value>De inhoud in hele kubieke meters.</value>
        [JsonPropertyName("inhoud")]
        public int? Inhoud { get { return this.InhoudOption; } set { this.InhoudOption = new(value); } }

        /// <summary>
        /// Used to track the state of EnergielabelData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EnergielabelData?> EnergielabelDataOption { get; private set; }

        /// <summary>
        /// Gets or Sets EnergielabelData
        /// </summary>
        [JsonPropertyName("energielabelData")]
        public EnergielabelData? EnergielabelData { get { return this.EnergielabelDataOption; } set { this.EnergielabelDataOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Objectdata {\n");
            sb.Append("  WoningType: ").Append(WoningType).Append("\n");
            sb.Append("  Bouwjaar: ").Append(Bouwjaar).Append("\n");
            sb.Append("  Oppervlak: ").Append(Oppervlak).Append("\n");
            sb.Append("  Perceeloppervlak: ").Append(Perceeloppervlak).Append("\n");
            sb.Append("  Inhoud: ").Append(Inhoud).Append("\n");
            sb.Append("  Energielabel: ").Append(Energielabel).Append("\n");
            sb.Append("  EnergielabelData: ").Append(EnergielabelData).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Objectdata" />
    /// </summary>
    public class ObjectdataJsonConverter : JsonConverter<Objectdata>
    {
        /// <summary>
        /// Deserializes json to <see cref="Objectdata" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Objectdata Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<WoningType?> woningType = default;
            Option<int?> bouwjaar = default;
            Option<int?> oppervlak = default;
            Option<int?> perceeloppervlak = default;
            Option<int?> inhoud = default;
            Option<Energielabel?> energielabel = default;
            Option<EnergielabelData?> energielabelData = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "woningType":
                            string? woningTypeRawValue = utf8JsonReader.GetString();
                            if (woningTypeRawValue != null)
                                woningType = new Option<WoningType?>(WoningTypeValueConverter.FromStringOrDefault(woningTypeRawValue));
                            break;
                        case "bouwjaar":
                            bouwjaar = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "oppervlak":
                            oppervlak = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "perceeloppervlak":
                            perceeloppervlak = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "inhoud":
                            inhoud = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "energielabel":
                            string? energielabelRawValue = utf8JsonReader.GetString();
                            if (energielabelRawValue != null)
                                energielabel = new Option<Energielabel?>(EnergielabelValueConverter.FromStringOrDefault(energielabelRawValue));
                            break;
                        case "energielabelData":
                            energielabelData = new Option<EnergielabelData?>(JsonSerializer.Deserialize<EnergielabelData>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (woningType.IsSet && woningType.Value == null)
                throw new ArgumentNullException(nameof(woningType), "Property is not nullable for class Objectdata.");

            if (bouwjaar.IsSet && bouwjaar.Value == null)
                throw new ArgumentNullException(nameof(bouwjaar), "Property is not nullable for class Objectdata.");

            if (oppervlak.IsSet && oppervlak.Value == null)
                throw new ArgumentNullException(nameof(oppervlak), "Property is not nullable for class Objectdata.");

            if (perceeloppervlak.IsSet && perceeloppervlak.Value == null)
                throw new ArgumentNullException(nameof(perceeloppervlak), "Property is not nullable for class Objectdata.");

            if (inhoud.IsSet && inhoud.Value == null)
                throw new ArgumentNullException(nameof(inhoud), "Property is not nullable for class Objectdata.");

            if (energielabel.IsSet && energielabel.Value == null)
                throw new ArgumentNullException(nameof(energielabel), "Property is not nullable for class Objectdata.");

            if (energielabelData.IsSet && energielabelData.Value == null)
                throw new ArgumentNullException(nameof(energielabelData), "Property is not nullable for class Objectdata.");

            return new Objectdata(woningType, bouwjaar, oppervlak, perceeloppervlak, inhoud, energielabel, energielabelData);
        }

        /// <summary>
        /// Serializes a <see cref="Objectdata" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="objectdata"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Objectdata objectdata, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, objectdata, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Objectdata" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="objectdata"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Objectdata objectdata, JsonSerializerOptions jsonSerializerOptions)
        {
            if (objectdata.EnergielabelDataOption.IsSet && objectdata.EnergielabelData == null)
                throw new ArgumentNullException(nameof(objectdata.EnergielabelData), "Property is required for class Objectdata.");

            if (objectdata.WoningTypeOption.IsSet)
            {
                var woningTypeRawValue = WoningTypeValueConverter.ToJsonValue(objectdata.WoningType!.Value);
                writer.WriteString("woningType", woningTypeRawValue);
            }
            if (objectdata.BouwjaarOption.IsSet)
                writer.WriteNumber("bouwjaar", objectdata.BouwjaarOption.Value!.Value);

            if (objectdata.OppervlakOption.IsSet)
                writer.WriteNumber("oppervlak", objectdata.OppervlakOption.Value!.Value);

            if (objectdata.PerceeloppervlakOption.IsSet)
                writer.WriteNumber("perceeloppervlak", objectdata.PerceeloppervlakOption.Value!.Value);

            if (objectdata.InhoudOption.IsSet)
                writer.WriteNumber("inhoud", objectdata.InhoudOption.Value!.Value);

            if (objectdata.EnergielabelOption.IsSet)
            {
                var energielabelRawValue = EnergielabelValueConverter.ToJsonValue(objectdata.Energielabel!.Value);
                writer.WriteString("energielabel", energielabelRawValue);
            }
            if (objectdata.EnergielabelDataOption.IsSet)
            {
                writer.WritePropertyName("energielabelData");
                JsonSerializer.Serialize(writer, objectdata.EnergielabelData, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The ObjectdataSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(Objectdata))]
    public partial class ObjectdataSerializationContext : JsonSerializerContext { }
}
