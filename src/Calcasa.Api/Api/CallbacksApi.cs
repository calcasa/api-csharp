// <auto-generated>
/*
 * Copyright 2025 Calcasa B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Calcasa Public API
 *
 * The Calcasa API is used to connect to Calcasa provided services. For more information, please visit [Documentation](https://docs.calcasa.nl) or [GitHub](https://github.com/calcasa/api).
 *
 * The version of the OpenAPI document: 1.4.0-rc3
 * Contact: info@calcasa.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using System.Threading.Tasks;
using Calcasa.Api.Client;
using Calcasa.Api.Model;
using Microsoft.Extensions.Logging;

namespace Calcasa.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ICallbacksApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        CallbacksApiEvents Events { get; }

        /// <summary>
        /// Voeg een callback inschrijving toe (of werk bij) voor de huidige client voor een adres.
        /// </summary>
        /// <remarks>
        /// De callback objecten zullen gefilterd terug komen afhankelijk van het client_id wat gebruikt is voor de authenticatie. Als er al een inschrijving bestaat voor dit adres dan wordt deze overschreven. De inschrijvingen worden vanzelf opgeruimt als ze verlopen.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callbackInschrijving">De te configureren callback inschrijving.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddOrUpdateCallbackSubscriptionApiResponse"/>&gt;</returns>
        Task<IAddOrUpdateCallbackSubscriptionApiResponse> AddOrUpdateCallbackSubscriptionAsync(CallbackInschrijving callbackInschrijving, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Voeg een callback inschrijving toe (of werk bij) voor de huidige client voor een adres.
        /// </summary>
        /// <remarks>
        /// De callback objecten zullen gefilterd terug komen afhankelijk van het client_id wat gebruikt is voor de authenticatie. Als er al een inschrijving bestaat voor dit adres dan wordt deze overschreven. De inschrijvingen worden vanzelf opgeruimt als ze verlopen.
        /// </remarks>
        /// <param name="callbackInschrijving">De te configureren callback inschrijving.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddOrUpdateCallbackSubscriptionApiResponse"/>?&gt;</returns>
        Task<IAddOrUpdateCallbackSubscriptionApiResponse?> AddOrUpdateCallbackSubscriptionOrDefaultAsync(CallbackInschrijving callbackInschrijving, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Verwijder de callback inschrijving voor deze client, dit adres en optioneel een geldverstrekker.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bagNummeraanduidingId">Het BAG Nummeraanduiding ID waar de callback inschrijving voor geldt.</param>
        /// <param name="geldverstrekker">De naam van de geldverstrekker waar de callback inschrijving voor geldt. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteNotificationSubscriptionApiResponse"/>&gt;</returns>
        Task<IDeleteNotificationSubscriptionApiResponse> DeleteNotificationSubscriptionAsync(long bagNummeraanduidingId, Option<string> geldverstrekker = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Verwijder de callback inschrijving voor deze client, dit adres en optioneel een geldverstrekker.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="bagNummeraanduidingId">Het BAG Nummeraanduiding ID waar de callback inschrijving voor geldt.</param>
        /// <param name="geldverstrekker">De naam van de geldverstrekker waar de callback inschrijving voor geldt. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteNotificationSubscriptionApiResponse"/>?&gt;</returns>
        Task<IDeleteNotificationSubscriptionApiResponse?> DeleteNotificationSubscriptionOrDefaultAsync(long bagNummeraanduidingId, Option<string> geldverstrekker = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Haal de callback inschrijving op voor deze client, dit adres en eventueel opgegeven geldverstrekker.
        /// </summary>
        /// <remarks>
        /// Het callback object zal gefilterd terug komen afhankelijk van het client_id wat gebruikt is voor de authenticatie.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bagNummeraanduidingId">Het BAG Nummeraanduiding ID waar de callback inschrijving voor geldt.</param>
        /// <param name="geldverstrekker">De naam van de geldverstrekker waar de callback inschrijving voor geldt. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetNotificationSubscriptionApiResponse"/>&gt;</returns>
        Task<IGetNotificationSubscriptionApiResponse> GetNotificationSubscriptionAsync(long bagNummeraanduidingId, Option<string> geldverstrekker = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Haal de callback inschrijving op voor deze client, dit adres en eventueel opgegeven geldverstrekker.
        /// </summary>
        /// <remarks>
        /// Het callback object zal gefilterd terug komen afhankelijk van het client_id wat gebruikt is voor de authenticatie.
        /// </remarks>
        /// <param name="bagNummeraanduidingId">Het BAG Nummeraanduiding ID waar de callback inschrijving voor geldt.</param>
        /// <param name="geldverstrekker">De naam van de geldverstrekker waar de callback inschrijving voor geldt. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetNotificationSubscriptionApiResponse"/>?&gt;</returns>
        Task<IGetNotificationSubscriptionApiResponse?> GetNotificationSubscriptionOrDefaultAsync(long bagNummeraanduidingId, Option<string> geldverstrekker = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Haal de callback inschrijvingen binnen voor deze client.
        /// </summary>
        /// <remarks>
        /// De callback objecten zullen gefilterd terug komen afhankelijk van het client_id wat gebruikt is voor de authenticatie.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetNotificationSubscriptionsApiResponse"/>&gt;</returns>
        Task<IGetNotificationSubscriptionsApiResponse> GetNotificationSubscriptionsAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Haal de callback inschrijvingen binnen voor deze client.
        /// </summary>
        /// <remarks>
        /// De callback objecten zullen gefilterd terug komen afhankelijk van het client_id wat gebruikt is voor de authenticatie.
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetNotificationSubscriptionsApiResponse"/>?&gt;</returns>
        Task<IGetNotificationSubscriptionsApiResponse?> GetNotificationSubscriptionsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAddOrUpdateCallbackSubscriptionApiResponse"/>
    /// </summary>
    public interface IAddOrUpdateCallbackSubscriptionApiResponse : Calcasa.Api.Client.IApiResponse, IOk<Calcasa.Api.Model.CallbackInschrijving?>, IBadRequest<Calcasa.Api.Model.InvalidArgumentProblemDetails?>, IUnauthorized<Calcasa.Api.Model.UnauthorizedProblemDetails?>, IForbidden<Calcasa.Api.Model.PermissionsDeniedProblemDetails?>, IDefault<Microsoft.AspNetCore.Mvc.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteNotificationSubscriptionApiResponse"/>
    /// </summary>
    public interface IDeleteNotificationSubscriptionApiResponse : Calcasa.Api.Client.IApiResponse, IUnauthorized<Calcasa.Api.Model.UnauthorizedProblemDetails?>, IForbidden<Calcasa.Api.Model.PermissionsDeniedProblemDetails?>, INotFound<Calcasa.Api.Model.NotFoundProblemDetails?>, IDefault<Microsoft.AspNetCore.Mvc.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetNotificationSubscriptionApiResponse"/>
    /// </summary>
    public interface IGetNotificationSubscriptionApiResponse : Calcasa.Api.Client.IApiResponse, IOk<Calcasa.Api.Model.CallbackInschrijving?>, IUnauthorized<Calcasa.Api.Model.UnauthorizedProblemDetails?>, IForbidden<Calcasa.Api.Model.PermissionsDeniedProblemDetails?>, INotFound<Calcasa.Api.Model.NotFoundProblemDetails?>, IDefault<Microsoft.AspNetCore.Mvc.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetNotificationSubscriptionsApiResponse"/>
    /// </summary>
    public interface IGetNotificationSubscriptionsApiResponse : Calcasa.Api.Client.IApiResponse, IOk<Collection<CallbackInschrijving>?>, IUnauthorized<Calcasa.Api.Model.UnauthorizedProblemDetails?>, IForbidden<Calcasa.Api.Model.PermissionsDeniedProblemDetails?>, IDefault<Microsoft.AspNetCore.Mvc.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class CallbacksApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddOrUpdateCallbackSubscription;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddOrUpdateCallbackSubscription;

        internal void ExecuteOnAddOrUpdateCallbackSubscription(CallbacksApi.AddOrUpdateCallbackSubscriptionApiResponse apiResponse)
        {
            OnAddOrUpdateCallbackSubscription?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddOrUpdateCallbackSubscription(Exception exception)
        {
            OnErrorAddOrUpdateCallbackSubscription?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteNotificationSubscription;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteNotificationSubscription;

        internal void ExecuteOnDeleteNotificationSubscription(CallbacksApi.DeleteNotificationSubscriptionApiResponse apiResponse)
        {
            OnDeleteNotificationSubscription?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteNotificationSubscription(Exception exception)
        {
            OnErrorDeleteNotificationSubscription?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetNotificationSubscription;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetNotificationSubscription;

        internal void ExecuteOnGetNotificationSubscription(CallbacksApi.GetNotificationSubscriptionApiResponse apiResponse)
        {
            OnGetNotificationSubscription?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetNotificationSubscription(Exception exception)
        {
            OnErrorGetNotificationSubscription?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetNotificationSubscriptions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetNotificationSubscriptions;

        internal void ExecuteOnGetNotificationSubscriptions(CallbacksApi.GetNotificationSubscriptionsApiResponse apiResponse)
        {
            OnGetNotificationSubscriptions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetNotificationSubscriptions(Exception exception)
        {
            OnErrorGetNotificationSubscriptions?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class CallbacksApi : ICallbacksApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<CallbacksApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public CallbacksApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallbacksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CallbacksApi(ILogger<CallbacksApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, CallbacksApiEvents callbacksApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<CallbacksApi>();
            HttpClient = httpClient;
            Events = callbacksApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatAddOrUpdateCallbackSubscription(CallbackInschrijving callbackInschrijving);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="callbackInschrijving"></param>
        /// <returns></returns>
        private void ValidateAddOrUpdateCallbackSubscription(CallbackInschrijving callbackInschrijving)
        {
            if (callbackInschrijving == null)
                throw new ArgumentNullException(nameof(callbackInschrijving));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="callbackInschrijving"></param>
        private void AfterAddOrUpdateCallbackSubscriptionDefaultImplementation(IAddOrUpdateCallbackSubscriptionApiResponse apiResponseLocalVar, CallbackInschrijving callbackInschrijving)
        {
            bool suppressDefaultLog = false;
            AfterAddOrUpdateCallbackSubscription(ref suppressDefaultLog, apiResponseLocalVar, callbackInschrijving);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="callbackInschrijving"></param>
        partial void AfterAddOrUpdateCallbackSubscription(ref bool suppressDefaultLog, IAddOrUpdateCallbackSubscriptionApiResponse apiResponseLocalVar, CallbackInschrijving callbackInschrijving);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="callbackInschrijving"></param>
        private void OnErrorAddOrUpdateCallbackSubscriptionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CallbackInschrijving callbackInschrijving)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddOrUpdateCallbackSubscription(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, callbackInschrijving);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="callbackInschrijving"></param>
        partial void OnErrorAddOrUpdateCallbackSubscription(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CallbackInschrijving callbackInschrijving);

        /// <summary>
        /// Voeg een callback inschrijving toe (of werk bij) voor de huidige client voor een adres. De callback objecten zullen gefilterd terug komen afhankelijk van het client_id wat gebruikt is voor de authenticatie. Als er al een inschrijving bestaat voor dit adres dan wordt deze overschreven. De inschrijvingen worden vanzelf opgeruimt als ze verlopen.
        /// </summary>
        /// <param name="callbackInschrijving">De te configureren callback inschrijving.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddOrUpdateCallbackSubscriptionApiResponse"/>&gt;</returns>
        public async Task<IAddOrUpdateCallbackSubscriptionApiResponse?> AddOrUpdateCallbackSubscriptionOrDefaultAsync(CallbackInschrijving callbackInschrijving, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddOrUpdateCallbackSubscriptionAsync(callbackInschrijving, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Voeg een callback inschrijving toe (of werk bij) voor de huidige client voor een adres. De callback objecten zullen gefilterd terug komen afhankelijk van het client_id wat gebruikt is voor de authenticatie. Als er al een inschrijving bestaat voor dit adres dan wordt deze overschreven. De inschrijvingen worden vanzelf opgeruimt als ze verlopen.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="callbackInschrijving">De te configureren callback inschrijving.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddOrUpdateCallbackSubscriptionApiResponse"/>&gt;</returns>
        public async Task<IAddOrUpdateCallbackSubscriptionApiResponse> AddOrUpdateCallbackSubscriptionAsync(CallbackInschrijving callbackInschrijving, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddOrUpdateCallbackSubscription(callbackInschrijving);

                FormatAddOrUpdateCallbackSubscription(callbackInschrijving);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/callbacks/inschrijvingen"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/callbacks/inschrijvingen");

                    httpRequestMessageLocalVar.Content = (callbackInschrijving as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(callbackInschrijving, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken)await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    IEnumerable<MediaTypeWithQualityHeaderValue> acceptHeaderValuesLocalVar = ClientUtils.SelectHeaderAcceptArray(acceptLocalVars);

                    foreach (var acceptLocalVar in acceptHeaderValuesLocalVar)
                        httpRequestMessageLocalVar.Headers.Accept.Add(acceptLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<AddOrUpdateCallbackSubscriptionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddOrUpdateCallbackSubscriptionApiResponse>();
                        AddOrUpdateCallbackSubscriptionApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode)
                        {
                            default:
                                {
                                    string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                    apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/callbacks/inschrijvingen", requestedAtLocalVar, _jsonSerializerOptions);

                                    break;
                                }
                        }

                        AfterAddOrUpdateCallbackSubscriptionDefaultImplementation(apiResponseLocalVar, callbackInschrijving);

                        Events.ExecuteOnAddOrUpdateCallbackSubscription(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode)429)
                            foreach (TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch (Exception e)
            {
                OnErrorAddOrUpdateCallbackSubscriptionDefaultImplementation(e, "/callbacks/inschrijvingen", uriBuilderLocalVar.Path, callbackInschrijving);
                Events.ExecuteOnErrorAddOrUpdateCallbackSubscription(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddOrUpdateCallbackSubscriptionApiResponse"/>
        /// </summary>
        public partial class AddOrUpdateCallbackSubscriptionApiResponse : Calcasa.Api.Client.ApiResponse, IAddOrUpdateCallbackSubscriptionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddOrUpdateCallbackSubscriptionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddOrUpdateCallbackSubscriptionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddOrUpdateCallbackSubscriptionApiResponse(ILogger<AddOrUpdateCallbackSubscriptionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="AddOrUpdateCallbackSubscriptionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddOrUpdateCallbackSubscriptionApiResponse(ILogger<AddOrUpdateCallbackSubscriptionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Calcasa.Api.Model.CallbackInschrijving? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Calcasa.Api.Model.CallbackInschrijving>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)] out Calcasa.Api.Model.CallbackInschrijving? result)
            {
                result = null;

                try
                {
                    result = Ok();
                }
                catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Calcasa.Api.Model.InvalidArgumentProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Calcasa.Api.Model.InvalidArgumentProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)] out Calcasa.Api.Model.InvalidArgumentProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                }
                catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public Calcasa.Api.Model.UnauthorizedProblemDetails? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<Calcasa.Api.Model.UnauthorizedProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)] out Calcasa.Api.Model.UnauthorizedProblemDetails? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                }
                catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Calcasa.Api.Model.PermissionsDeniedProblemDetails? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Calcasa.Api.Model.PermissionsDeniedProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)] out Calcasa.Api.Model.PermissionsDeniedProblemDetails? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                }
                catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsBadRequest && !IsUnauthorized && !IsForbidden;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Microsoft.AspNetCore.Mvc.ProblemDetails? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Microsoft.AspNetCore.Mvc.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)] out Microsoft.AspNetCore.Mvc.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = Default();
                }
                catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteNotificationSubscription(ref long bagNummeraanduidingId, ref Option<string> geldverstrekker);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="geldverstrekker"></param>
        /// <returns></returns>
        private void ValidateDeleteNotificationSubscription(Option<string> geldverstrekker)
        {
            if (geldverstrekker.IsSet && geldverstrekker.Value == null)
                throw new ArgumentNullException(nameof(geldverstrekker));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="bagNummeraanduidingId"></param>
        /// <param name="geldverstrekker"></param>
        private void AfterDeleteNotificationSubscriptionDefaultImplementation(IDeleteNotificationSubscriptionApiResponse apiResponseLocalVar, long bagNummeraanduidingId, Option<string> geldverstrekker)
        {
            bool suppressDefaultLog = false;
            AfterDeleteNotificationSubscription(ref suppressDefaultLog, apiResponseLocalVar, bagNummeraanduidingId, geldverstrekker);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="bagNummeraanduidingId"></param>
        /// <param name="geldverstrekker"></param>
        partial void AfterDeleteNotificationSubscription(ref bool suppressDefaultLog, IDeleteNotificationSubscriptionApiResponse apiResponseLocalVar, long bagNummeraanduidingId, Option<string> geldverstrekker);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="bagNummeraanduidingId"></param>
        /// <param name="geldverstrekker"></param>
        private void OnErrorDeleteNotificationSubscriptionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long bagNummeraanduidingId, Option<string> geldverstrekker)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteNotificationSubscription(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, bagNummeraanduidingId, geldverstrekker);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="bagNummeraanduidingId"></param>
        /// <param name="geldverstrekker"></param>
        partial void OnErrorDeleteNotificationSubscription(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long bagNummeraanduidingId, Option<string> geldverstrekker);

        /// <summary>
        /// Verwijder de callback inschrijving voor deze client, dit adres en optioneel een geldverstrekker. 
        /// </summary>
        /// <param name="bagNummeraanduidingId">Het BAG Nummeraanduiding ID waar de callback inschrijving voor geldt.</param>
        /// <param name="geldverstrekker">De naam van de geldverstrekker waar de callback inschrijving voor geldt. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteNotificationSubscriptionApiResponse"/>&gt;</returns>
        public async Task<IDeleteNotificationSubscriptionApiResponse?> DeleteNotificationSubscriptionOrDefaultAsync(long bagNummeraanduidingId, Option<string> geldverstrekker = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteNotificationSubscriptionAsync(bagNummeraanduidingId, geldverstrekker, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Verwijder de callback inschrijving voor deze client, dit adres en optioneel een geldverstrekker. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bagNummeraanduidingId">Het BAG Nummeraanduiding ID waar de callback inschrijving voor geldt.</param>
        /// <param name="geldverstrekker">De naam van de geldverstrekker waar de callback inschrijving voor geldt. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteNotificationSubscriptionApiResponse"/>&gt;</returns>
        public async Task<IDeleteNotificationSubscriptionApiResponse> DeleteNotificationSubscriptionAsync(long bagNummeraanduidingId, Option<string> geldverstrekker = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteNotificationSubscription(geldverstrekker);

                FormatDeleteNotificationSubscription(ref bagNummeraanduidingId, ref geldverstrekker);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/callbacks/inschrijvingen/{bagNummeraanduidingId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/callbacks/inschrijvingen/{bagNummeraanduidingId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BbagNummeraanduidingId%7D", Uri.EscapeDataString(bagNummeraanduidingId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (geldverstrekker.IsSet)
                        parseQueryStringLocalVar["geldverstrekker"] = ClientUtils.ParameterToString(geldverstrekker.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken)await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/problem+json"
                    };

                    IEnumerable<MediaTypeWithQualityHeaderValue> acceptHeaderValuesLocalVar = ClientUtils.SelectHeaderAcceptArray(acceptLocalVars);

                    foreach (var acceptLocalVar in acceptHeaderValuesLocalVar)
                        httpRequestMessageLocalVar.Headers.Accept.Add(acceptLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<DeleteNotificationSubscriptionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteNotificationSubscriptionApiResponse>();
                        DeleteNotificationSubscriptionApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode)
                        {
                            default:
                                {
                                    string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                    apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/callbacks/inschrijvingen/{bagNummeraanduidingId}", requestedAtLocalVar, _jsonSerializerOptions);

                                    break;
                                }
                        }

                        AfterDeleteNotificationSubscriptionDefaultImplementation(apiResponseLocalVar, bagNummeraanduidingId, geldverstrekker);

                        Events.ExecuteOnDeleteNotificationSubscription(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode)429)
                            foreach (TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch (Exception e)
            {
                OnErrorDeleteNotificationSubscriptionDefaultImplementation(e, "/callbacks/inschrijvingen/{bagNummeraanduidingId}", uriBuilderLocalVar.Path, bagNummeraanduidingId, geldverstrekker);
                Events.ExecuteOnErrorDeleteNotificationSubscription(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteNotificationSubscriptionApiResponse"/>
        /// </summary>
        public partial class DeleteNotificationSubscriptionApiResponse : Calcasa.Api.Client.ApiResponse, IDeleteNotificationSubscriptionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteNotificationSubscriptionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteNotificationSubscriptionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteNotificationSubscriptionApiResponse(ILogger<DeleteNotificationSubscriptionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="DeleteNotificationSubscriptionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteNotificationSubscriptionApiResponse(ILogger<DeleteNotificationSubscriptionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public Calcasa.Api.Model.UnauthorizedProblemDetails? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<Calcasa.Api.Model.UnauthorizedProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)] out Calcasa.Api.Model.UnauthorizedProblemDetails? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                }
                catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Calcasa.Api.Model.PermissionsDeniedProblemDetails? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Calcasa.Api.Model.PermissionsDeniedProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)] out Calcasa.Api.Model.PermissionsDeniedProblemDetails? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                }
                catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public Calcasa.Api.Model.NotFoundProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<Calcasa.Api.Model.NotFoundProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)] out Calcasa.Api.Model.NotFoundProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                }
                catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsNoContent && !IsUnauthorized && !IsForbidden && !IsNotFound;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Microsoft.AspNetCore.Mvc.ProblemDetails? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Microsoft.AspNetCore.Mvc.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)] out Microsoft.AspNetCore.Mvc.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = Default();
                }
                catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetNotificationSubscription(ref long bagNummeraanduidingId, ref Option<string> geldverstrekker);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="geldverstrekker"></param>
        /// <returns></returns>
        private void ValidateGetNotificationSubscription(Option<string> geldverstrekker)
        {
            if (geldverstrekker.IsSet && geldverstrekker.Value == null)
                throw new ArgumentNullException(nameof(geldverstrekker));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="bagNummeraanduidingId"></param>
        /// <param name="geldverstrekker"></param>
        private void AfterGetNotificationSubscriptionDefaultImplementation(IGetNotificationSubscriptionApiResponse apiResponseLocalVar, long bagNummeraanduidingId, Option<string> geldverstrekker)
        {
            bool suppressDefaultLog = false;
            AfterGetNotificationSubscription(ref suppressDefaultLog, apiResponseLocalVar, bagNummeraanduidingId, geldverstrekker);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="bagNummeraanduidingId"></param>
        /// <param name="geldverstrekker"></param>
        partial void AfterGetNotificationSubscription(ref bool suppressDefaultLog, IGetNotificationSubscriptionApiResponse apiResponseLocalVar, long bagNummeraanduidingId, Option<string> geldverstrekker);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="bagNummeraanduidingId"></param>
        /// <param name="geldverstrekker"></param>
        private void OnErrorGetNotificationSubscriptionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long bagNummeraanduidingId, Option<string> geldverstrekker)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetNotificationSubscription(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, bagNummeraanduidingId, geldverstrekker);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="bagNummeraanduidingId"></param>
        /// <param name="geldverstrekker"></param>
        partial void OnErrorGetNotificationSubscription(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long bagNummeraanduidingId, Option<string> geldverstrekker);

        /// <summary>
        /// Haal de callback inschrijving op voor deze client, dit adres en eventueel opgegeven geldverstrekker. Het callback object zal gefilterd terug komen afhankelijk van het client_id wat gebruikt is voor de authenticatie.
        /// </summary>
        /// <param name="bagNummeraanduidingId">Het BAG Nummeraanduiding ID waar de callback inschrijving voor geldt.</param>
        /// <param name="geldverstrekker">De naam van de geldverstrekker waar de callback inschrijving voor geldt. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetNotificationSubscriptionApiResponse"/>&gt;</returns>
        public async Task<IGetNotificationSubscriptionApiResponse?> GetNotificationSubscriptionOrDefaultAsync(long bagNummeraanduidingId, Option<string> geldverstrekker = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetNotificationSubscriptionAsync(bagNummeraanduidingId, geldverstrekker, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Haal de callback inschrijving op voor deze client, dit adres en eventueel opgegeven geldverstrekker. Het callback object zal gefilterd terug komen afhankelijk van het client_id wat gebruikt is voor de authenticatie.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bagNummeraanduidingId">Het BAG Nummeraanduiding ID waar de callback inschrijving voor geldt.</param>
        /// <param name="geldverstrekker">De naam van de geldverstrekker waar de callback inschrijving voor geldt. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetNotificationSubscriptionApiResponse"/>&gt;</returns>
        public async Task<IGetNotificationSubscriptionApiResponse> GetNotificationSubscriptionAsync(long bagNummeraanduidingId, Option<string> geldverstrekker = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetNotificationSubscription(geldverstrekker);

                FormatGetNotificationSubscription(ref bagNummeraanduidingId, ref geldverstrekker);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/callbacks/inschrijvingen/{bagNummeraanduidingId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/callbacks/inschrijvingen/{bagNummeraanduidingId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BbagNummeraanduidingId%7D", Uri.EscapeDataString(bagNummeraanduidingId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (geldverstrekker.IsSet)
                        parseQueryStringLocalVar["geldverstrekker"] = ClientUtils.ParameterToString(geldverstrekker.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken)await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    IEnumerable<MediaTypeWithQualityHeaderValue> acceptHeaderValuesLocalVar = ClientUtils.SelectHeaderAcceptArray(acceptLocalVars);

                    foreach (var acceptLocalVar in acceptHeaderValuesLocalVar)
                        httpRequestMessageLocalVar.Headers.Accept.Add(acceptLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetNotificationSubscriptionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetNotificationSubscriptionApiResponse>();
                        GetNotificationSubscriptionApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode)
                        {
                            default:
                                {
                                    string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                    apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/callbacks/inschrijvingen/{bagNummeraanduidingId}", requestedAtLocalVar, _jsonSerializerOptions);

                                    break;
                                }
                        }

                        AfterGetNotificationSubscriptionDefaultImplementation(apiResponseLocalVar, bagNummeraanduidingId, geldverstrekker);

                        Events.ExecuteOnGetNotificationSubscription(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode)429)
                            foreach (TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch (Exception e)
            {
                OnErrorGetNotificationSubscriptionDefaultImplementation(e, "/callbacks/inschrijvingen/{bagNummeraanduidingId}", uriBuilderLocalVar.Path, bagNummeraanduidingId, geldverstrekker);
                Events.ExecuteOnErrorGetNotificationSubscription(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetNotificationSubscriptionApiResponse"/>
        /// </summary>
        public partial class GetNotificationSubscriptionApiResponse : Calcasa.Api.Client.ApiResponse, IGetNotificationSubscriptionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetNotificationSubscriptionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetNotificationSubscriptionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetNotificationSubscriptionApiResponse(ILogger<GetNotificationSubscriptionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetNotificationSubscriptionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetNotificationSubscriptionApiResponse(ILogger<GetNotificationSubscriptionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Calcasa.Api.Model.CallbackInschrijving? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Calcasa.Api.Model.CallbackInschrijving>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)] out Calcasa.Api.Model.CallbackInschrijving? result)
            {
                result = null;

                try
                {
                    result = Ok();
                }
                catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public Calcasa.Api.Model.UnauthorizedProblemDetails? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<Calcasa.Api.Model.UnauthorizedProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)] out Calcasa.Api.Model.UnauthorizedProblemDetails? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                }
                catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Calcasa.Api.Model.PermissionsDeniedProblemDetails? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Calcasa.Api.Model.PermissionsDeniedProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)] out Calcasa.Api.Model.PermissionsDeniedProblemDetails? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                }
                catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public Calcasa.Api.Model.NotFoundProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<Calcasa.Api.Model.NotFoundProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)] out Calcasa.Api.Model.NotFoundProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                }
                catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsUnauthorized && !IsForbidden && !IsNotFound;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Microsoft.AspNetCore.Mvc.ProblemDetails? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Microsoft.AspNetCore.Mvc.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)] out Microsoft.AspNetCore.Mvc.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = Default();
                }
                catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetNotificationSubscriptionsDefaultImplementation(IGetNotificationSubscriptionsApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetNotificationSubscriptions(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetNotificationSubscriptions(ref bool suppressDefaultLog, IGetNotificationSubscriptionsApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetNotificationSubscriptionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetNotificationSubscriptions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetNotificationSubscriptions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Haal de callback inschrijvingen binnen voor deze client. De callback objecten zullen gefilterd terug komen afhankelijk van het client_id wat gebruikt is voor de authenticatie.
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetNotificationSubscriptionsApiResponse"/>&gt;</returns>
        public async Task<IGetNotificationSubscriptionsApiResponse?> GetNotificationSubscriptionsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetNotificationSubscriptionsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Haal de callback inschrijvingen binnen voor deze client. De callback objecten zullen gefilterd terug komen afhankelijk van het client_id wat gebruikt is voor de authenticatie.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetNotificationSubscriptionsApiResponse"/>&gt;</returns>
        public async Task<IGetNotificationSubscriptionsApiResponse> GetNotificationSubscriptionsAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/callbacks/inschrijvingen"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/callbacks/inschrijvingen");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken)await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    IEnumerable<MediaTypeWithQualityHeaderValue> acceptHeaderValuesLocalVar = ClientUtils.SelectHeaderAcceptArray(acceptLocalVars);

                    foreach (var acceptLocalVar in acceptHeaderValuesLocalVar)
                        httpRequestMessageLocalVar.Headers.Accept.Add(acceptLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetNotificationSubscriptionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetNotificationSubscriptionsApiResponse>();
                        GetNotificationSubscriptionsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode)
                        {
                            default:
                                {
                                    string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                    apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/callbacks/inschrijvingen", requestedAtLocalVar, _jsonSerializerOptions);

                                    break;
                                }
                        }

                        AfterGetNotificationSubscriptionsDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetNotificationSubscriptions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode)429)
                            foreach (TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch (Exception e)
            {
                OnErrorGetNotificationSubscriptionsDefaultImplementation(e, "/callbacks/inschrijvingen", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetNotificationSubscriptions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetNotificationSubscriptionsApiResponse"/>
        /// </summary>
        public partial class GetNotificationSubscriptionsApiResponse : Calcasa.Api.Client.ApiResponse, IGetNotificationSubscriptionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetNotificationSubscriptionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetNotificationSubscriptionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetNotificationSubscriptionsApiResponse(ILogger<GetNotificationSubscriptionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetNotificationSubscriptionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetNotificationSubscriptionsApiResponse(ILogger<GetNotificationSubscriptionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Collection<CallbackInschrijving>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Collection<CallbackInschrijving>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)] out Collection<CallbackInschrijving>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                }
                catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public Calcasa.Api.Model.UnauthorizedProblemDetails? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<Calcasa.Api.Model.UnauthorizedProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)] out Calcasa.Api.Model.UnauthorizedProblemDetails? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                }
                catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Calcasa.Api.Model.PermissionsDeniedProblemDetails? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Calcasa.Api.Model.PermissionsDeniedProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)] out Calcasa.Api.Model.PermissionsDeniedProblemDetails? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                }
                catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsUnauthorized && !IsForbidden;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Microsoft.AspNetCore.Mvc.ProblemDetails? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Microsoft.AspNetCore.Mvc.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)] out Microsoft.AspNetCore.Mvc.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = Default();
                }
                catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
